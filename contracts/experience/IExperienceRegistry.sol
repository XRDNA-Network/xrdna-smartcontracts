// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.24;

import {VectorAddress} from '../VectorAddress.sol';
import {IExperience} from './IExperience.sol';
import {IWorldRegistryV2} from '../world/v0.2/IWorldRegistryV2.sol';
import {IPortalRegistry} from '../portal/IPortalRegistry.sol';

/**
 * @dev Arguments for registering an experience with the registry. The vector address 
 * should be generated by the parent company and all requests for experience registration
 * must come from a registered Company contract.
 */
struct RegisterExperienceRequest {
    VectorAddress vector;
    address company;
    bytes initData;
    string name;
}

/**
 * @dev Information about an experience that is registered with the registry.
 */
struct ExperienceInfo {
    address company;
    address world;
    IExperience experience;
    uint256 portalId;
}

/**
 * @title IExperienceRegistry
    * @dev Interface for a registry that manages experiences.
 */
interface IExperienceRegistry {
    
    event ExperienceRegistered(address indexed world, address indexed company, address indexed experience, string name);
    event ExperienceRemoved(address indexed experience, uint256 indexed portalId);
    
    /**
     * @dev Returns experience info for the given vector address.
     */
    function getExperienceByVector(VectorAddress memory vector) external view returns (ExperienceInfo memory);
    
    /**
     * @dev Returns experience info for the given address.
     */
    function getExperienceByAddress(address exp) external view returns (ExperienceInfo memory);

    /**
     * @dev Returns experience info for the given name.
     */
    function getExperiencesByName(string memory name) external view returns (ExperienceInfo memory);
    
    /**
     * @dev Sets the experience factory that is used to create new experiences. Only admin can do this
     */
    function setExperienceFactory(address factory) external;

    /**
     * @dev Sets the world registry that is used to validate world addresses. Only admin can do this
     */
    function setWorldRegistry(IWorldRegistryV2 reg) external;

    /**
     * @dev Sets the portal registry that is used to manage portals. Only admin can do this
     */
    function setPortalRegistry(IPortalRegistry reg) external;

    /**
     * @dev Returns true if the given address is a registered experience
     */
    function isExperience(address exp) external view returns (bool);

    /**
     * @dev Registers a new experience with the registry. This can only be called by a registered company contract. 
     * This will also register a portal with the portal registry with the new experience as a 
     * destination.
     */
    function registerExperience(RegisterExperienceRequest memory request) external returns (address, uint256);
    
    /**
     * @dev Removes an experience from the registry. This can only be called by a world in which the experience lives.
     */
    function removeExperience(address company, address exp) external returns (uint256 portalId);

    /**
     * @dev Upgrades an experience to a new version. This can only be called by the experience itself,
     * which is initiated from a company contract
     */
    function upgradeExperience(bytes calldata initData) external;

    /**
     * @dev Returns the current version of the experience contract implementation. This
     * can be used to determine if an experience should be upgraded.
     */
    function currentExperienceVersion() external view returns (uint256);
}