// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.24;

import {VectorAddress} from '../../libraries/LibVectorAddress.sol';
import {IExperience} from '../instance/IExperience.sol';
import {Version} from '../../libraries/LibTypes.sol';
import {IRegistryFactory} from '../../interfaces/registry/IRegistryFactory.sol';
import {IAccessControl} from '../../interfaces/IAccessControl.sol';

/**
 * @dev Arguments for registering an experience with the registry. The vector address 
 * should be generated by the parent company and all requests for experience registration
 * must come from a registered Company contract.
 */
struct CreateExperienceArgs {
    address company;
    VectorAddress vector;
    string name;
    bytes initData;
}

struct ExperienceInitArgs {
    uint256 entryFee;
    bytes connectionDetails;
}

/**
 * @title IExperienceRegistry
    * @dev Interface for a registry that manages experiences.
 */
interface IExperienceRegistry is IAccessControl, IRegistryFactory {
    
    event RegistryExperienceRegistered(address indexed world, address indexed company, address indexed experience, string name);
    event RegistryExperienceRemoved(address indexed experience, uint256 indexed portalId);
    
    /**
     * @dev Returns the world registry that is used to validate world addresses.
     */
    function worldRegistry() external view returns (address);

    /**
     * @dev Registers a new experience with the registry. This can only be called by a registered company contract. 
     * This will also register a portal with the portal registry with the new experience as a 
     * destination.
     */
    function registerExperience(CreateExperienceArgs memory args) external returns (address experience, uint256 portalId);
    
    /**
     * @dev Deactivates an experience. This can only be called by the world registry. The company must be 
     * the owner of the experience. Company initiates this call through a world so that events are 
     * emitted for both the company and world for tracking purposes. The company must also belong to the world.
     */
    function deactivateExperience(address company, address exp, string calldata reason) external;

    /**
     * @dev Reactivates an experience. This can only be called by the world registry. The company must be 
     * the owner of the experience. Company initiates this call through a world so that events are 
     * emitted for both the company and world for tracking purposes. The company must also belong to the world.
     */
    function reactivateExperience(address company, address exp) external;

    /**
     * @dev Removes an experience from the registry. This can only be called by the world. The company must be
        * the owner of the experience. Company initiates this call through a world so that events are
        * emitted for both the company and world for tracking purposes. The company must also belong to the world.
     */
    function removeExperience(address company, address exp, string calldata reason) external returns (uint256 portalId);
}