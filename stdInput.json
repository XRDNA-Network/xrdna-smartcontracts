{
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi",
          "evm.methodIdentifiers"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "paris"
  },
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/asset/IAssetCondition.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nstruct AssetCheckArgs {\n    address asset;\n    address world;\n    address company;\n    address experience;\n    address avatar;\n}\n\n/**\n * @title IAssetCondition\n * @dev This interface should be implemented to customize the conditional behavior of \n * viewing or using an asset in the interoperability layer. Companies can deploy custom\n * conditions and add them to their controlled assets.\n * \n * There are some situations where assets may or may not be viewable or usable in \n * a metaverse environment. Licensing, restrictions, or other conditions may have to be \n * met before the asset is allowed. This condition can be added to any asset by its issuing\n * company to enforce rules. Note, however, that the only time these rules are enforced\n * on-chain is when an Avatar attempt to add a wearable to itself. All other checks are\n * likely to happen off-chain or within other metaverse smart contracts interacting with\n * avatars and their assets.\n */\ninterface IAssetCondition {\n\n    /**\n     * @dev Returns true if the asset can be viewed by the given world, company, experience, and avatar.\n     */\n    function canView(AssetCheckArgs memory args) external view returns (bool);\n\n    /**\n     * @dev Returns true if the asset can be used by the given world, company, experience, and avatar.\n     */\n    function canUse(AssetCheckArgs memory args) external view returns (bool);\n}"
    },
    "contracts/asset/IMultiAssetRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAssetRegistry} from './registry/IAssetRegistry.sol';\n\n/**\n * @title IMultiAssetRegistry\n * @dev To simplify asset verification regardless of its type, this interface wraps\n * multiple asset registries into a single interface. This allows for a single call \n * to check all registries for a valid assets.\n */\ninterface IMultiAssetRegistry {\n\n    /**\n     * @dev Returns true if the asset is registered in any of the registries\n     */\n    function isRegistered(address asset) external view returns (bool);\n\n    /**\n     * @dev Registers a new asset with the registry. Only callable by the registry admin\n     */\n    function registerRegistry(IAssetRegistry registry) external;\n}"
    },
    "contracts/asset/instance/BaseAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAvatarRegistry} from '../../avatar/registry/IAvatarRegistry.sol';\nimport {ICompanyRegistry} from '../../company/registry/ICompanyRegistry.sol';\nimport {BaseRemovableEntity} from '../../base-types/entity/BaseRemovableEntity.sol';\nimport {AssetStorage, LibAsset} from '../../libraries/LibAsset.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\nimport {IAssetCondition, AssetCheckArgs} from '../IAssetCondition.sol';\nimport {IAsset} from './IAsset.sol';\nimport {LibRemovableEntity} from '../../libraries/LibRemovableEntity.sol';\nimport {IAvatar} from '../../avatar/instance/IAvatar.sol';\nimport {IExperience} from '../../experience/instance/IExperience.sol';\nimport {IRegistry} from '../../interfaces/registry/IRegistry.sol';\n\n/**\n * Constructor arguments that immutably reference registries and factories required\n * for asset management.\n */\nstruct BaseAssetConstructorArgs {\n    address assetRegistry;\n    address avatarRegistry;\n    address companyRegistry;\n}\n\n/**\n * Once an asset proxy is cloned, its underlying implementation is initialized. These are the \n * base asset init args to initialize basic/common asset information\n */\nstruct BaseInitArgs {\n    string name; \n    string symbol;\n    address issuer; \n    address originAddress;\n    uint256 originChainId;\n}\n\n/**\n * @title BaseAsset\n * @dev BaseAsset is the base contract for all assets. It provides the basic\n * functionality for asset management, including the ability to add and remove\n * hooks and conditions, as well as the ability to verify that an asset can be\n * viewed or used by a given avatar.\n */\nabstract contract BaseAsset is BaseRemovableEntity, IAsset {\n\n    /**\n     * Fields initialized by asset master-copy constructor\n     */\n    address public immutable assetRegistry;\n    IAvatarRegistry public immutable avatarRegistry;\n    ICompanyRegistry public immutable companyRegistry;\n\n    modifier onlyIssuer {\n        require(LibAsset.load().issuer == msg.sender, \"BaseAsset: caller is not the issuer\");\n        _;\n    }\n\n    /**\n     * Called once at deploy time. All cloned instances of this asset will retain immutable\n     * references to the registries and factories required for asset management.\n     */\n    constructor(BaseAssetConstructorArgs memory args) {\n        require(args.assetRegistry != address(0), \"BaseAsset: assetRegistry is the zero address\");\n        require(args.avatarRegistry != address(0), \"BaseAsset: avatarRegistry is the zero address\");\n        require(args.companyRegistry != address(0), \"BaseAsset: companyRegistry is the zero address\");\n        assetRegistry = args.assetRegistry;\n        avatarRegistry = IAvatarRegistry(args.avatarRegistry);\n        companyRegistry = ICompanyRegistry(args.companyRegistry);\n    }\n\n    /**\n        * @dev Initializes basic asset information\n     */\n    function initBase(BaseInitArgs memory args) internal {\n\n        //basic asset storage\n        AssetStorage storage store = LibAsset.load();\n        require(store.issuer == address(0), \"NTERC20Asset: already initialized\");\n\n        require(args.issuer != address(0), \"NTERC20Asset: issuer cannot be zero address\");\n        require(bytes(args.name).length > 0, \"NTERC20Asset: name cannot be empty\");\n        require(bytes(args.symbol).length > 0, \"NTERC20Asset: symbol cannot be empty\");\n        require(args.originAddress != address(0), \"NTERC20Asset: origin address cannot be zero address\");   \n        require(args.originChainId > 0, \"NTERC20Asset: origin chain id must be greater than zero\"); \n\n        store.issuer = args.issuer;\n        store.originAddress = args.originAddress;\n        store.originChainId = args.originChainId;\n        store.symbol = args.symbol;\n        \n        //registered entity storage info\n        LibEntity.load().name = args.name;\n       \n        //removable entity (asset) storage info\n        LibRemovableEntity.load().active = true;\n    }\n\n    /**\n     * @dev Returns the address of the registry that manages this asset.\n     */\n    function owningRegistry() internal view override returns (address) {\n        return assetRegistry;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return LibAsset.load().symbol;\n    }\n\n    /**\n     * @dev Returns the address of the issuer (company) of the asset.\n     */\n    function issuer() public view returns (address) {\n        return LibAsset.load().issuer;\n    }\n\n    /**\n     * @dev Returns the address of the origin chain where the asset was created.\n     */\n    function originAddress() public view returns (address) {\n        return LibAsset.load().originAddress;\n    }\n\n    /**\n     * @dev Returns the chain id of the origin chain where the asset was created.\n     */\n    function originChainId() public view returns (uint256) {\n        return LibAsset.load().originChainId;\n    }\n\n    /**\n     * @dev sets a condition on the asset for viewing and / or using. Only the issuer can\n     * call this function.\n     */\n    function setCondition(address condition) public onlyIssuer {\n        require(condition != address(0), \"BaseAsset: condition cannot be zero address\");\n        LibAsset.load().condition = IAssetCondition(condition);\n        emit AssetConditionSet(condition);\n    }\n\n    /**\n     * @dev removes the condition on the asset for viewing and / or using. Only the issuer can\n        * call this function.\n     */\n    function removeCondition() public onlyIssuer {\n        delete LibAsset.load().condition;\n        emit AssetConditionRemoved();\n    }   \n\n    /**\n     * @dev Checks if the asset can be viewed based on the world/company/experience/avatar\n     */\n    function canViewAsset(AssetCheckArgs memory args) public view returns (bool) {\n        IAssetCondition con = LibAsset.load().condition;\n        return address(con) == address(0) || con.canView(args);\n    }\n\n    /**\n     * @dev Checks if the asset can be used based on the world/company/experience/avatar\n     */\n    function canUseAsset(AssetCheckArgs memory args) public view returns (bool) {\n        IAssetCondition con = LibAsset.load().condition;\n        return address(con) == address(0) || con.canUse(args);\n    }\n\n\n    //verify if receiver is avatar and if ok to mint to the avatar\n    function _verifyAvatarMinting(address to) internal view {\n        //if minting to an avatar, \n        if(avatarRegistry.isRegistered(to)) {\n            //make sure avatar allows it if they are not in this company's experience\n            IAvatar avatar = IAvatar(to);\n            if(!avatar.canReceiveTokensOutsideOfExperience()) {\n                address exp = avatar.location();\n                require(exp != address(0), \"BaseAsset: avatar location is not an experience\");\n                require(IExperience(exp).company() == issuer(), \"BaseAsset: avatar location is not in an experience owned by this company\");\n            }\n        }\n    }\n\n    function upgrade(bytes calldata initData) external onlyIssuer nonReentrant override{\n        IRegistry(owningRegistry()).upgradeEntity(initData);\n    }\n\n}"
    },
    "contracts/asset/instance/erc20/IERC20Asset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAsset} from '../IAsset.sol';\n\n/**\n * @title IERC20Asset\n * @dev IERC20Asset represents a synthetic asset for any XR chain ERC20 tokens.\n */\ninterface IERC20Asset is IAsset {\n\n    event ERC20Minted(address indexed to, uint256 indexed amt);\n\n    /**\n     * @dev Returns true if the asset can be minted to the given address with the given data\n     */\n    function canMint(address to, uint256 amt) external view returns (bool);\n\n    /**\n     * @dev Mints the asset to the given address with the given data. Only callable by the asset issuer\n     * after verifying the minting parameters.\n     */\n    function mint(address to, uint256 amt) external;\n\n    /**\n     * @dev Revokes the asset from the given address with the given data. Only callable by the asset issuer\n     */\n    function revoke(address holder, uint256 amt) external;\n    \n    /**\n        * @dev Returns the number of decimals for the asset (preferably aligned with original ERC20)\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the total supply of the asset (this only represents the XR chain supply,\n     * not the original ERC20 supply)\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the any spend allowance for the spender on the owner's asset\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Transfers the asset to the recipient\n     */\n    function transfer(address, uint256) external returns (bool);\n\n}"
    },
    "contracts/asset/instance/erc20/NTERC20Asset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseAsset, BaseAssetConstructorArgs, BaseInitArgs} from '../BaseAsset.sol';\nimport {Version} from '../../../libraries/LibVersion.sol';\nimport {LibERC20, ERC20Storage} from '../../../libraries/LibERC20.sol';\nimport {AssetInitArgs} from '../IAsset.sol';\nimport {IERC20Asset} from './IERC20Asset.sol';\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\nstruct ERC20InitData {\n    //the number of decimal places for the token\n    uint8 decimals;\n\n    //maximum supply, set to type(uint256).max for unlimited supply\n    uint256 maxSupply;\n}\n\n/**\n * @title NTERC20Asset\n * @dev NTERC20Asset represents a synthetic asset for any XR chain ERC20 tokens.\n */\ncontract NTERC20Asset is BaseAsset, IERC20Asset {\n    \n    constructor(BaseAssetConstructorArgs memory args) BaseAsset(args) { }\n\n    function version() external pure returns (Version memory) {\n        return Version({\n            major: 1,\n            minor: 0\n        });\n    }\n\n    /**\n     * @dev Initialize the state for the ERC20 asset. NOTE: this is called on the asset's proxy and \n     * falls back to this version of the asset implementation. This is called when a new asset is \n     * created in the ERC20 registry and its proxy is cloned. This implementation is set on the proxy\n     * and the init method is called in the context of the proxy (i.e. using proxy's storage).\n     */\n    function init(AssetInitArgs calldata args) external onlyRegistry {\n        \n        ERC20InitData memory initData = abi.decode(args.initData, (ERC20InitData));\n        require(initData.decimals > 0, \"NTERC20Asset: decimals must be greater than zero\");\n        require(initData.maxSupply > 0, \"NTERC20Asset: max supply must be greater than zero\");\n\n        //initialize basic token info\n        initBase(BaseInitArgs({\n            issuer: args.issuer,\n            name: args.name,\n            symbol: args.symbol,\n            originAddress: args.originAddress,\n            originChainId: args.originChainId\n        }));\n        \n        //then erc20 specific fields\n        ERC20Storage storage erc20Store = LibERC20.load();\n        erc20Store.maxSupply = initData.maxSupply;\n        erc20Store.decimals = initData.decimals;\n    }\n\n    function postUpgradeInit(bytes calldata) external override onlyRegistry {\n        //no-op\n    }\n\n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function decimals() external view returns (uint8) {\n        return LibERC20.load().decimals;\n    }\n\n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function totalSupply() external view returns (uint256) {\n        return LibERC20.load().totalSupply;\n    }\n\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return LibERC20.load().balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address _owner, address spender) public view virtual returns (uint256) {\n        return LibERC20.load().allowances[_owner][spender];\n    }\n\n    \n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function canMint(address to, uint256 amt) public override view returns (bool) {\n        require(to != address(0), \"NTERC20Asset: cannot mint to zero address\");\n        ERC20Storage storage s = LibERC20.load();\n        require(s.totalSupply + amt <= s.maxSupply, \"NTERC20Asset: max supply exceeded\");\n        //if the asset is going to an avatar\n        _verifyAvatarMinting(to);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function mint(address to, uint256 amt) public nonReentrant onlyIssuer  {\n        require(canMint(to, amt), \"NTERC20Asset: cannot mint tokens\");\n        \n        //if all good, mint tokens\n        _mint(to, amt);\n    }\n\n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function revoke(address tgt, uint256 amt) public nonReentrant onlyIssuer {\n        require(tgt != address(0), \"NTERC20Asset: cannot revoke from zero address\");\n        require(amt > 0, \"NTERC20Asset: revoke amount must be greater than zero\");\n        require(balanceOf(tgt) >= amt, \"NTERC20Asset: insufficient balance to revoke\");\n        _burn(tgt, amt);\n    }\n\n    /**\n     * @inheritdoc IERC20Asset\n     */\n    function transfer(address, uint256) public pure returns (bool) {\n       revert(\"NTERC20Asset: transfers not allowed yet\");\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address, uint256) public pure returns (bool) {\n        revert(\"NTERC20Asset: approvals not allowed yet\");\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address, address, uint256) public pure returns (bool) {\n        revert(\"NTERC20Asset: transfers not allowed yet\");\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage s = LibERC20.load();\n        if (from == address(0)) {\n            s.totalSupply += value;\n        } else {\n            uint256 fromBalance = s.balances[from];\n            if (fromBalance < value) {\n                revert IERC20Errors.ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                s.balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                s.totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                s.balances[to] += value;\n            }\n        }\n\n        emit IERC20.Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal  {\n        if (account == address(0)) {\n            revert IERC20Errors.ERC20InvalidReceiver(address(0));\n        } \n        _update(address(0), account, value);\n        emit ERC20Minted(account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert IERC20Errors.ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n}\n"
    },
    "contracts/asset/instance/erc20/NTERC20AssetProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../../base-types/entity/EntityProxy.sol';\n\n/**\n * @title NTERC20AssetProxy\n * @dev Proxy for erc20 asset implementation to allow for future logic upgrades.\n */\ncontract ERC20AssetProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/asset/instance/erc721/ERC721AssetProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../../base-types/entity/EntityProxy.sol';\n\n/**\n * @title ERC721AssetProxy\n * @dev Proxy for erc721 asset implementation to allow for future logic upgrades.\n */\ncontract ERC721AssetProxy is EntityProxy {\n    constructor(address registry) EntityProxy(registry) {}\n}"
    },
    "contracts/asset/instance/erc721/IERC721Asset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nimport {IAsset} from '../IAsset.sol';\n\n/**\n    * @title IERC721Asset\n    * @dev IERC721Asset represents a synthetic asset for any XR chain ERC721 tokens.\n */\ninterface IERC721Asset  is IAsset {\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event BaseURIChanged(string baseURI);\n\n    event ERC721Minted(address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Returns true if the asset can be minted to the given address with the given data\n     */\n    function canMint(address to) external view returns (bool);\n\n    /**\n     * @dev Mints the asset to the given address with the given data. Only callable by the asset issuer\n     * after verifying the minting parameters.\n     */\n    function mint(address to) external;\n\n    /**\n     * @dev Revokes the asset from the given address with the given data. Only callable by the asset issuer\n     */\n    function revoke(address holder, uint256 tokenId) external;\n\n    /**\n     * @dev returns whether given selector is supported by this contract\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @dev Returns owner of given token id\n     */\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Returns the uri used to retrieve token metadata\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    /**\n     * @dev Sets the base URI for all token ids\n     */\n    function setBaseURI(string memory baseURI) external;\n\n    /**\n     * @dev Gets address approved to manage the given token ID\n     */\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Set approval for a given address on all token ids\n     */\n    function setApprovalForAll(address, bool) external;\n\n    /**\n     * @dev Check if given address is approved for all token ids\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfer tokens from holder to new address. This requires approval from holder\n     * and the receiver must implement ERC721Receiver interface\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Safely transfer tokens from holder to new address. This requires approval from holder\n     * and the receiver must implement ERC721Receiver interface\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}"
    },
    "contracts/asset/instance/erc721/NTERC721Asset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseAsset, BaseAssetConstructorArgs, BaseInitArgs} from '../BaseAsset.sol';\nimport {Version} from '../../../libraries/LibVersion.sol';\nimport {LibERC721, ERC721Storage} from '../../../libraries/LibERC721.sol';\nimport {AssetInitArgs} from '../IAsset.sol';\nimport {IAvatar} from '../../../avatar/instance/IAvatar.sol';\nimport {IERC721Asset} from './IERC721Asset.sol';\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\n\n\n\nstruct ERC721InitData {\n    //baseURI cannot be empty\n    string baseURI;\n}\n\n/**\n * @title NTERC721Asset\n    * @dev NTERC721Asset represents a synthetic asset for any XR chain ERC721 tokens.\n */\ncontract NTERC721Asset is BaseAsset, IERC721Asset {\n\n    using Strings for uint256;\n    \n    constructor(BaseAssetConstructorArgs memory args) BaseAsset(args) {   }\n\n    function version() external pure returns (Version memory) {\n        return Version({\n            major: 1,\n            minor: 0\n        });\n    }\n\n    /**\n     * @dev Initialize the state for the ERC721 asset. NOTE: this is called on the asset's proxy and \n     * falls back to this version of the asset implementation. This is called when a new asset is \n     * created in the ERC721 registry and its proxy is cloned. This implementation is set on the proxy\n     * and the init method is called in the context of the proxy (i.e. using proxy's storage).\n     */\n    function init(AssetInitArgs calldata args) external onlyRegistry {\n        \n        ERC721InitData memory initData = abi.decode(args.initData, (ERC721InitData));\n        \n        initBase(BaseInitArgs({\n            issuer: args.issuer,\n            name: args.name,\n            symbol: args.symbol,\n            originAddress: args.originAddress,\n            originChainId: args.originChainId\n        }));\n\n        ERC721Storage storage ercStore = LibERC721.load();\n        require(bytes(initData.baseURI).length > 0, \"NTERC721Asset: base URI must be set\");\n         if(!_endsWith(initData.baseURI, \"/\")) {\n            ercStore.baseURI = string.concat(initData.baseURI, \"/\");\n        } else {\n            ercStore.baseURI = initData.baseURI;\n        }\n    }\n\n    function postUpgradeInit(bytes calldata) external override onlyRegistry {\n        //no-op\n    }\n\n    /**\n     * @inheritdoc IERC721Asset\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual  returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address _owner) public view virtual returns (uint256) {\n        if (_owner == address(0)) {\n            revert IERC721Errors.ERC721InvalidOwner(address(0));\n        }\n        ERC721Storage storage s = LibERC721.load();\n        return s.balances[_owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return LibERC721.requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        LibERC721.requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return LibERC721.load().baseURI;\n    }\n\n    /**\n     * @dev Set the base URI for all token IDs. Can only be called by a\n     */\n    function setBaseURI(string calldata uri) public onlyIssuer {\n        ERC721Storage storage s = LibERC721.load();\n        if(!_endsWith(uri, \"/\")) {\n            s.baseURI = string.concat(uri, \"/\");\n        } else {\n            s.baseURI = uri;\n        }\n        emit BaseURIChanged(uri);\n    }\n\n    /**\n     * @dev determine if the asset can be minted\n     * @param to the address to mint to\n     * data is not used in minting so it is ignored\n     */\n    function canMint(address to) public view override returns (bool) {\n        require(to != address(0), \"NTERC721Asset: mint to the zero address\");\n        _verifyAvatarMinting(to);\n        return true;\n    }\n\n    /**\n     * @dev Mints NFT to the specified address. This can only be called by the issuer\n     * @param to the address to mint tokens to\n     */\n    function mint(address to) public nonReentrant onlyIssuer {\n        require(canMint(to), \"NTERC721Asset: cannot mint to address\");\n        ERC721Storage storage s = LibERC721.load();\n        \n        ++s.tokenIdCounter;\n        uint256 id = s.tokenIdCounter;\n        _safeMint(to, id);\n    }\n\n     /**\n     * @dev Revokes NFT from the specified address. This can only be called by the issuer\n     * @param holder the address to revoke NFT from\n     */\n    function revoke(address holder, uint256 tokenId) public nonReentrant onlyIssuer {\n        require(holder != address(0), \"NTERC721Asset: token does not exist\");\n        require(tokenId != 0, \"NTERC721Asset: token id cannot be zero\");\n        address _owner = LibERC721.requireOwned(tokenId);\n        require(_owner == holder, \"NTERC721Asset: not the owner of token id provided\");\n        \n        _burn(tokenId);\n        \n        if (avatarRegistry.isRegistered(holder)) {\n            // Notify the avatar that the token has been revoked and remove it from wearables\n            IAvatar(holder).onERC721Revoked(tokenId);\n        }\n    }\n\n    function approve(address, uint256) public pure returns (bool) {\n        revert(\"NTERC721: token is non-transferable\");\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        LibERC721.requireOwned(tokenId);\n\n        return LibERC721._getApproved(tokenId);\n    }\n\n    function isApprovedForAll(address _owner, address operator) public view virtual returns (bool) {\n        return LibERC721.load().operatorApprovals[_owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address, bool) public virtual {\n        revert(\"NTERC721: token is non-transferable\");\n    }\n\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address, address, uint256) public pure returns (bool) {\n        revert(\"NTERC721: token is non-transferable\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address, address, uint256, bytes memory) public virtual {\n        revert(\"NTERC721: token is non-transferable\");\n    }\n     \n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert IERC721Errors.ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = LibERC721._update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert IERC721Errors.ERC721InvalidSender(address(0));\n        }\n        emit IERC721Asset.ERC721Minted(to, tokenId);\n    }\n\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = LibERC721._update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert IERC721Errors.ERC721NonexistentToken(tokenId);\n        }\n    }\n\n     /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    //internal helper to verify that the string ends with a suffix value\n    function _endsWith(string memory str, string memory suffix) internal pure returns (bool) {\n        return bytes(str).length >= bytes(suffix).length && bytes(str)[bytes(str).length - bytes(suffix).length] == bytes(suffix)[0];\n    }\n\n}"
    },
    "contracts/asset/instance/IAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {AssetCheckArgs} from '../IAssetCondition.sol';\n\n/**\n * @dev Basic initialization arguments for an asset\n */\nstruct AssetInitArgs {\n    //name of the asset\n    string name; \n\n    //its symbol\n    string symbol;\n\n    //the address allowed to mint/burn the asset\n    address issuer; \n\n    //the address of the asset on the origin chain\n    address originAddress;\n\n    //the chain id of the origin chain\n    uint256 originChainId;\n\n    //extra init data interpreted by the concrete asset implementation\n    bytes initData;\n}\n\n/**\n    * @title IAsset\n    * @dev IAsset is the base interface for all assets. It provides the basic\n    * functionality for asset management, including the ability to add and remove\n    * conditions, as well as the ability to verify that an asset can be viewed or \n    * used.\n */\ninterface IAsset is IRemovableEntity {\n\n    event AssetConditionSet(address condition);\n    event AssetConditionRemoved();\n\n    /**\n     * @dev Initializes the asset with the given arguments. This method is called\n     * only once when the asset is cloned.\n     */\n    function init(AssetInitArgs calldata args) external;\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the issuer (company) allowed to mint/burn the asset.\n     */\n    function issuer() external view returns (address);\n\n    /**\n     * @dev Returns the address of the asset on the origin chain.\n     */\n    function originAddress() external view returns (address);\n\n    /**\n     * @dev Returns the chain id of the origin chain.\n     */\n    function originChainId() external view returns (uint256);\n\n    /**\n     * @dev Returns the balance of assets for the given holder\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Approves spending asset for given spender\n     */\n    function approve(address, uint256) external returns (bool); \n\n    /**\n        * @dev Transfers asset from sender to given recipient\n     */\n    function transferFrom(address, address, uint256) external returns (bool);\n\n    /**\n     * @dev sets a condition on the asset for viewing/using\n     */\n    function setCondition(address condition) external;\n\n    /**\n     * @dev removes the condition on the asset for viewing/using\n     */\n    function removeCondition() external;\n\n    /**\n     * @dev Checks if the asset can be viewed based on the world/company/experience/avatar\n     */\n    function canViewAsset(AssetCheckArgs memory args) external view returns (bool);\n\n    /**\n     * @dev Checks if the asset can be used based on the world/company/experience/avatar\n     */\n    function canUseAsset(AssetCheckArgs memory args) external view returns (bool);\n\n}"
    },
    "contracts/asset/MultiAssetRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IMultiAssetRegistry} from './IMultiAssetRegistry.sol';\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\nimport {IAssetRegistry} from './registry/IAssetRegistry.sol';\n\nstruct MultiAssetRegistryConstructorArgs {\n    //role assigner and registry admin\n    address mainAdmin;\n\n    //register admins\n    address[] admins;\n\n    //initial set of registries to check\n    IAssetRegistry[] registries;\n}\n\n/*\n * @inheritdoc IMultiAssetRegistry\n */\ncontract MultiAssetRegistry is IMultiAssetRegistry, AccessControl {\n\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n    IAssetRegistry[] public registries;\n\n    modifier onlyAdmin {\n        require(hasRole(ADMIN_ROLE, msg.sender), 'MultiAssetRegistry: caller is not an admin');\n        _;\n    }\n\n    constructor(MultiAssetRegistryConstructorArgs memory args) {\n        require(args.mainAdmin != address(0), 'MultiAssetRegistry: mainAdmin is the zero address');\n        require(args.registries.length > 0, 'MultiAssetRegistry: no registries');\n        _grantRole(DEFAULT_ADMIN_ROLE, args.mainAdmin);\n        _grantRole(ADMIN_ROLE, args.mainAdmin);\n        for (uint256 i = 0; i < args.admins.length; i++) {\n            require(args.admins[i] != address(0), 'MultiAssetRegistry: admin is the zero address');\n            _grantRole(ADMIN_ROLE, args.admins[i]);\n        }\n        for (uint256 i = 0; i < args.registries.length; i++) {\n            require(args.registries[i] != IAssetRegistry(address(0)), 'MultiAssetRegistry: registry is the zero address');\n            registries.push(args.registries[i]);\n        }\n    }\n\n    /**\n     * @inheritdoc IMultiAssetRegistry\n     */\n    function isRegistered(address asset) external view override returns (bool) {\n        uint256 len = registries.length;\n        for (uint256 i = 0; i < len; i++) {\n            if (registries[i].isRegistered(asset)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @inheritdoc IMultiAssetRegistry\n     */\n    function registerRegistry(IAssetRegistry registry) external onlyAdmin override {\n        require(registry != IAssetRegistry(address(0)), 'MultiAssetRegistry: registry is the zero address');\n        registries.push(registry);\n    }\n}"
    },
    "contracts/asset/registry/BaseAssetRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRemovableRegistry} from '../../base-types/registry/BaseRemovableRegistry.sol';\nimport {BaseVectoredRegistry} from '../../base-types/registry/BaseVectoredRegistry.sol';\nimport {LibRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {ICompanyRegistry} from '../../company/registry/ICompanyRegistry.sol';\nimport {ICompany} from '../../company/instance/ICompany.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IWorldRegistry} from '../../world/registry/IWorldRegistry.sol';\nimport {IWorld} from '../../world/instance/IWorld.sol';\nimport {LibRegistration, RegistrationWithTermsAndVector} from '../../libraries/LibRegistration.sol';\nimport {IAssetRegistry, CreateAssetArgs} from './IAssetRegistry.sol';\nimport {LibAssetRegistry} from './LibAssetRegistry.sol';\nimport {IAsset, AssetInitArgs} from '../instance/IAsset.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\n\n\n/**\n * @title BaseAssetRegistry\n    * @dev BaseAssetRegistry is the base contract for all asset registries. It provides the basic\n    * functionality for asset management, including the ability to register and remove assets.\n */\nabstract contract BaseAssetRegistry is BaseRemovableRegistry, IAssetRegistry {\n\n     modifier onlyAdminOrIssuer(address asset)  {\n        require(isAdmin(msg.sender) || IAsset(asset).issuer() == msg.sender, \"BaseAssetRegistry: unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Determines if an asset from an original chain has been registered\n     */\n    function assetExists(address original, uint256 chainId) public view returns (bool) {\n        return LibAssetRegistry.assetExists(original, chainId);\n    }\n\n   \n\n    /**\n     * @dev Registers a new asset with the registry. Only callable by the registry admin\n     * after verifying ownership by the issuing company.\n     */\n    function registerAsset(CreateAssetArgs calldata args) public onlyAdmin nonReentrant returns (address asset)  {\n        FactoryStorage storage fs = LibFactory.load();\n        require(!assetExists(args.originAddress, args.originChainId), \"BaseAssetRegistry: asset already exists\");\n        require(fs.proxyImplementation != address(0), \"BaseAssetRegistry: proxy implementation not set\");\n        require(fs.entityImplementation != address(0), \"BaseAssetRegistry: entity implementation not set\");\n        \n        //clone the PROXY of the asset\n        address proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"BaseAssetRegistry: proxy cloning failed\");\n\n        //set the concrete asset logic on the proxy\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        //initialize the storage for the new proxy/asset\n        AssetInitArgs memory initArgs = AssetInitArgs({\n            name: args.name,\n            symbol: args.symbol,\n            issuer: args.issuer,\n            originAddress: args.originAddress,\n            originChainId: args.originChainId,\n            initData: args.initData\n        });\n\n        IAsset(proxy).init(initArgs);\n       \n        //assets don't have a registration fee but they can be deactivated. So we \n        //create a registration term with a grace period of 30 days. The grace\n        //period is the time allowed for the asset to be reactivated before it can \n        //be removed from the registry.\n        RegistrationTerms memory terms = RegistrationTerms({\n            fee: 0,\n            coveragePeriodDays: 0,\n            gracePeriodDays: 30\n        });\n\n        //asset names are not guaranteed to be globally unique so we ignore the name\n        LibRegistration.registerRemovableEntityIgnoreName(proxy, args.issuer, terms);\n        emit RegistryAddedEntity(proxy, args.issuer);\n\n        return proxy;\n    }\n\n    /**\n     * @dev Deactivates an asset in the registry. Only callable by the registry admin\n     */\n    function deactivateAsset(address asset, string calldata reason) public onlyAdminOrIssuer(asset) nonReentrant {\n        LibEntityRemoval.deactivateEntity(IRemovableEntity(asset), reason);\n    }\n\n    /**\n     * @dev Reactivates an asset in the registry. Only callable by the registry admin\n     */\n    function reactivateAsset(address asset) public onlyAdminOrIssuer(asset) nonReentrant {\n        LibEntityRemoval.reactivateEntity(IRemovableEntity(asset));\n    }\n\n    /**\n     * @dev Removes an asset from the registry. Only callable by the registry admin AFTER\n        * the grace period has expired.\n     */\n    function removeAsset(address asset, string calldata reason) public onlyAdminOrIssuer(asset) nonReentrant {\n        LibEntityRemoval.removeEntity(IRemovableEntity(asset), reason);\n    }\n\n}"
    },
    "contracts/asset/registry/ERC20Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseAssetRegistry} from './BaseAssetRegistry.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\n\n/**\n * @title ERC20Registry\n * @dev ERC20Registry is the registry for all ERC20 asset types. It provides the basic\n * functionality for ERC20 asset management, including the ability to register and remove ERC20 assets.\n */\ncontract ERC20Registry is BaseAssetRegistry {\n\n    function version() external pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n}"
    },
    "contracts/asset/registry/ERC20RegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\n/**\n * @title ERC20RegistryProxy\n * @dev ERC20RegistryProxy is the proxy contract for the ERC20Registry. It allows the registry logic \n * to be upgraded without changing the address of the registry or its storage.\n */\ncontract ERC20RegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/asset/registry/ERC721Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseAssetRegistry} from './BaseAssetRegistry.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\n\n\n/**\n * @title ERC721Registry\n * @dev ERC721Registry is the registry contract for ERC721 assets. It provides the basic\n * functionality for ERC721 asset management, including the ability to register and remove assets.\n */\ncontract ERC721Registry is BaseAssetRegistry {\n\n    function version() external pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n}"
    },
    "contracts/asset/registry/ERC721RegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\n/**\n * @title ERC721RegistryProxy\n * @dev ERC721RegistryProxy is the proxy contract for the ERC721Registry. It allows the registry logic \n * to be upgraded without changing the address of the registry or its storage.\n */\ncontract ERC721RegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/asset/registry/IAssetRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\n\n/**\n * @dev Common asset creation arguments. Used by the registry to create new assets.\n */\nstruct CreateAssetArgs {\n    //the address allowed to mint/burn the asset\n    address issuer;\n\n    //the address of the asset on the origin chain\n    address originAddress;\n\n    //the chain id of the origin chain\n    uint256 originChainId;\n\n    //name of the asset\n    string name;\n\n    //its symbol\n    string symbol;\n\n    //extra init data interpreted by the concrete asset implementation\n    bytes initData;\n}\n\ninterface IAssetRegistry is IRemovableRegistry {\n    \n    /**\n     * @dev Determines if the asset from the original chain has been registered\n     */\n    function assetExists(address original, uint256 chainId) external view returns (bool);\n\n\n    /**\n     * @dev Registers a new asset with the registry. Only callable by the registry admin\n     * after verifying ownership by the issuing company.\n     */\n    function registerAsset(CreateAssetArgs calldata args) external returns (address asset);\n\n    /**\n     * @dev Deactivates an asset. Only callable by the registry admin\n     */\n    function deactivateAsset(address asset, string calldata reason) external;\n\n    /**\n     * @dev Reactivates an asset. Only callable by the registry admin\n     */\n    function reactivateAsset(address asset) external;\n\n    /**\n     * @dev Removes an asset from the registry. Only callable by the registry admin\n     * after the registration grace period has expired\n     */\n    function removeAsset(address asset, string calldata reason) external;\n}"
    },
    "contracts/asset/registry/LibAssetRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../../libraries/LibStorageSlots.sol';\n\nstruct AssetRegistryStorage {\n    mapping(bytes32 => address) assetsByOriginChain;\n}\n\n/**\n    * @title LibAssetRegistry\n    \n    * @dev The asset registry library provides functions to get storage for any asset registry type.\n */\nlibrary LibAssetRegistry {\n\n    function load() internal pure returns (AssetRegistryStorage storage store) {\n        bytes32 slot = LibStorageSlots.ASSET_REGISTRY;\n        assembly {\n            store.slot := slot\n        }\n    }\n\n    /**\n     * @dev Checks if an asset has been registered based on its origin chain info.\n     * @param original The original asset address.\n     * @param chainId The chain ID.\n     * @return True if the asset has been registered, false otherwise.\n     */\n    function assetExists(address original, uint256 chainId) internal view returns (bool) {\n        return load().assetsByOriginChain[keccak256(abi.encode(original, chainId))] != address(0);\n    }\n\n    /**\n     * @dev Marks an asset as registered based on its origin chain info.\n     * @param original The original asset address.\n     * @param chainId The chain ID.\n     * @param asset The asset address.\n     */\n    function markAssetExists(address original, uint256 chainId, address asset) internal {\n        load().assetsByOriginChain[keccak256(abi.encode(original, chainId))] = asset;\n    }\n}"
    },
    "contracts/avatar/instance/Avatar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseEntity} from '../../base-types/entity/BaseEntity.sol';\nimport {IExperienceRegistry} from '../../experience/registry/IExperienceRegistry.sol';\nimport {LibEntity, EntityStorage} from '../../libraries/LibEntity.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IAvatar, AvatarInitArgs, AvatarJumpRequest, DelegatedJumpRequest} from './IAvatar.sol';\nimport {LibAvatar, Wearable, AvatarStorage} from '../../libraries/LibAvatar.sol';\nimport {ICompanyRegistry} from '../../company/registry/ICompanyRegistry.sol';\nimport {ICompany} from '../../company/instance/ICompany.sol';\nimport {IAssetRegistry} from '../../asset/registry/IAssetRegistry.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IExperience} from '../../experience/instance/IExperience.sol';\nimport {IAsset} from '../../asset/instance/IAsset.sol';\nimport {LibLinkedList, LinkedList} from '../../libraries/LibLinkedList.sol';\nimport {AssetCheckArgs} from '../../asset/IAssetCondition.sol';\nimport {IPortalRegistry} from '../../portal/IPortalRegistry.sol';\nimport {PortalInfo} from '../../libraries/LibPortal.sol';\nimport {IAvatarRegistry} from '../registry/IAvatarRegistry.sol';\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\n\n/**\n * @dev avatar initialization arguments. This is the extra bytes of an avatar creation request.\n */\nstruct AvatarInitData {\n    bool canReceiveTokensOutsideExperience;\n    bytes appearanceDetails;\n}\n\n/**\n * @dev Avatar constructor arguments. These are mapped to immutable regitry addresses so that any\n * clone of the avatar can access the same registry contracts.\n */\nstruct AvatarConstructorArgs {\n    address avatarRegistry;\n    address companyRegistry;\n    address experienceRegistry;\n    address portalRegistry;\n    address erc721Registry;\n}\n\n/**\n * @title Avatar\n * @dev Avatar provides the basic functionality for avatar management, including the \n * ability to add and remove wearables, as well as the ability to jump between experiences.\n * Avatar contracts hold assets and can be used to represent a user in a virtual world.\n */\ncontract Avatar is BaseEntity, IAvatar {\n\n    using LibLinkedList for LinkedList;\n    using MessageHashUtils for bytes;\n    \n    IAvatarRegistry public immutable avatarRegistry;\n    IExperienceRegistry public immutable experienceRegistry;\n    ICompanyRegistry public immutable companyRegistry;\n    IAssetRegistry public immutable erc721Registry;\n    IPortalRegistry public immutable portalRegistry;\n\n    modifier onlyActiveCompany {\n        //make sure caller is an active registered company contract\n        require(companyRegistry.isRegistered(msg.sender), 'Avatar: Company not registered');\n        require(ICompany(msg.sender).isEntityActive(), 'Avatar: Company not active');\n        _;\n    }\n\n    //Called once when deploying the avatar logic\n    constructor(AvatarConstructorArgs memory args) {\n        require(args.avatarRegistry != address(0), 'Company: Invalid avatar registry');\n        require(args.experienceRegistry != address(0), 'Company: Invalid experience registry');\n        require(args.companyRegistry != address(0), 'Company: Invalid company registry');\n        require(args.erc721Registry != address(0), 'Company: Invalid ERC721 registry');\n        require(args.portalRegistry != address(0), 'Company: Invalid portal registry');\n\n        avatarRegistry = IAvatarRegistry(args.avatarRegistry);\n        experienceRegistry = IExperienceRegistry(args.experienceRegistry);\n        companyRegistry = ICompanyRegistry(args.companyRegistry);\n        erc721Registry = IAssetRegistry(args.erc721Registry);\n        portalRegistry = IPortalRegistry(args.portalRegistry);\n    }\n\n\n    receive() external payable {}\n\n    function withdraw(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance, 'Company: Insufficient balance');\n        payable(msg.sender).transfer(amount);\n    }\n\n    function upgrade(bytes calldata initData) public override onlyOwner nonReentrant {\n        avatarRegistry.upgradeEntity(initData);\n    }\n\n    function postUpgradeInit(bytes calldata) public override onlyRegistry {\n        //no-op\n    }\n\n    function version() public pure override virtual returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    /**\n        * @dev Initialize the avatar. This is called by the avatar registry when creating a new avatar.\n        * It is invoked through its proxy so that any storage updates are done in the proxy's address space.\n     */\n    function init(AvatarInitArgs memory args) public onlyRegistry {\n        require(LibAccess.owner() == address(0), 'Avatar: Already initialized');\n        require(args.owner != address(0), 'Avatar: Invalid owner');\n        require(args.startingExperience != address(0), 'Avatar: Invalid starting experience');\n        require(experienceRegistry.isRegistered(args.startingExperience), 'Avatar: Starting experience not registered');\n        require(bytes(args.name).length > 0, 'Avatar: Name required');\n\n        address[] memory admins = new address[](0);\n        LibAccess.initAccess(args.owner, admins);\n        LibEntity.load().name = args.name;\n\n        AvatarInitData memory data = abi.decode(args.initData, (AvatarInitData));\n\n        //avatar-specific storage\n        AvatarStorage storage s = LibAvatar.load();\n\n        //whether the avatar can receive tokens outside of an experience (i.e. NFT airdrops)\n        s.canReceiveTokensOutsideExperience = data.canReceiveTokensOutsideExperience;\n\n        //the starting experience (e.g. a World lobby)\n        s.currentExperience = args.startingExperience;\n\n        //the appearance details of the avatar, specific to the avatar implementation\n        s.appearanceDetails = data.appearanceDetails;\n\n        //The max number of wearables an avatar can wear\n        s.list.maxSize = 200;\n    }\n\n    \n    /**\n     * @dev Get the registry that owns this contract.\n     */\n    function owningRegistry() internal view override returns (address) {\n        return address(avatarRegistry);\n    }\n    \n     /**\n     * @dev get the Avatar's unique username\n     */\n    function username() public view returns (string memory) {\n        return LibEntity.load().name;\n    }\n\n    /**\n     * @dev get the Avatar's current experience location\n     */\n    function location() public view returns (address) {\n        return LibAvatar.load().currentExperience;\n    }\n\n    /**\n     * @dev get the Avatar's appearance details. These will be specific to the avatar\n     * implementation off chain should be used by clients to render the avatar correctly.\n     */\n    function appearanceDetails() public view returns (bytes memory) {\n        return LibAvatar.load().appearanceDetails;\n    }\n\n    /**\n     * @dev Check whether an avatar can receive tokens when not in an experience that \n     * matches their current location. This prevents spamming of tokens to the avatar.\n     */\n    function canReceiveTokensOutsideOfExperience() public view returns (bool) {\n        return LibAvatar.load().canReceiveTokensOutsideExperience;\n    }\n\n    /**\n     * @dev Get the next signing nonce for a company signature.\n     */\n    function companySigningNonce(address signer) public view returns (uint256) {\n        return LibAvatar.load().companyNonces[signer];\n    }\n\n    /**\n     * @dev Get the next signing nonce for an avatar owner signature.\n     */\n    function avatarOwnerSigningNonce() public view returns (uint256) {\n        return LibAvatar.load().ownerNonce;\n    }\n\n    /**\n     * @dev Get the list of wearables the avatar is currently wearing.\n     */\n    function getWearables() public view returns (Wearable[] memory) {\n        AvatarStorage storage s = LibAvatar.load();\n        return s.list.getAllItems();\n    }\n\n    /**\n     * @dev Check if the avatar is wearing a specific wearable asset.\n     */\n    function isWearing(Wearable calldata wearable) public view returns (bool) {\n        AvatarStorage storage s = LibAvatar.load();\n        return s.list.contains(wearable);\n    }\n\n    /**\n     * @dev Check if the avatar can wear the given asset \n     */\n    function canAddWearable(Wearable calldata wearable) public view returns (bool) {\n        require(wearable.asset != address(0), \"Avatar: wearable asset cannot be zero address\");\n        require(wearable.tokenId > 0, \"Avatar: wearable tokenId cannot be zero\");\n        require(erc721Registry.isRegistered(wearable.asset), \"Avatar: wearable asset not registered\");\n        require(IAsset(wearable.asset).isEntityActive(), \"Avatar: wearable asset not active\");\n        \n        address loc = location();\n        require(loc != address(0), \"Avatar: location cannot be zero address\");\n        IExperience exp = IExperience(loc);\n        //make sure the avatar can use the asset in the current experience\n        require(IAsset(wearable.asset).canUseAsset(AssetCheckArgs({\n            asset: wearable.asset, \n            world: exp.world(), \n            company: exp.company(), \n            experience: address(loc),\n            avatar: address(this)\n        })),\"Avatar: wearable asset cannot be used by avatar\");\n        IERC721 wAsset = IERC721(wearable.asset);\n        require(wAsset.ownerOf(wearable.tokenId) == address(this), \"Avatar: wearable token not owned by avatar\");\n        return true;\n    }\n\n    /**\n     * @dev Add a wearable asset to the avatar. This must be called by the avatar owner. \n     * This will revert if there are already 200 wearables configured.\n     */\n    function addWearable(Wearable calldata wearable) public nonReentrant onlyOwner  {\n        canAddWearable(wearable);\n\n        AvatarStorage storage s = LibAvatar.load();\n        s.list.insert(wearable);\n        emit IAvatar.WearableAdded(wearable.asset, wearable.tokenId);\n    }\n\n    /**\n     * @dev Remove a wearable asset from the avatar. This must be called by the avatar owner.\n     */\n    function removeWearable(Wearable calldata wearable) public onlyOwner {\n        require(wearable.asset != address(0), \"Avatar: wearable asset cannot be zero address\");\n        require(wearable.tokenId > 0, \"Avatar: wearable tokenId cannot be zero\");\n        AvatarStorage storage s = LibAvatar.load();\n        s.list.remove(wearable);\n        emit IAvatar.WearableRemoved(wearable.asset, wearable.tokenId);\n    }\n    \n\n    /**\n     * @dev Set whether the avatar can receive tokens when not in an experience that matches \n     * their current location.\n     */\n    function setCanReceiveTokensOutsideOfExperience(bool canReceive) public onlyOwner {\n        LibAvatar.load().canReceiveTokensOutsideExperience = canReceive;\n    }\n\n    /**\n     * @dev Set the appearance details of the avatar. This must be called by the avatar owner.\n     */\n    function setAppearanceDetails(bytes calldata details) public onlyOwner {\n        LibAvatar.load().appearanceDetails = details;\n        emit AppearanceChanged(details);\n    }\n\n    /**\n     * @dev Move the avatar to a new experience. This must be called by the avatar owner.\n     * If fees are required for the jump, they must be attached to the transaction or come\n     * from the avatar contract balance.\n     */\n    function jump(AvatarJumpRequest memory request) public payable nonReentrant onlyOwner {\n        require(request.portalId > 0, \"Avatar: portalId cannot be zero\");\n        PortalInfo memory portal = _verifyCompanySignature(request);\n\n        require(request.agreedFee == portal.fee, \"Avatar: agreed fee does not match portal fee\");\n        \n        if(portal.fee > 0) {\n            uint256 bal = address(this).balance + msg.value;\n            require(bal >= portal.fee, \"Avatar: insufficient funds for jump fee\");\n        }\n        AvatarStorage storage s = LibAvatar.load();\n        bytes memory connectionDetails = portalRegistry.jumpRequest{value: portal.fee}(request.portalId);\n        //have to set location AFTER jump success\n        s.currentExperience = address(portal.destination);\n        \n        emit IAvatar.JumpSuccess(address(portal.destination), portal.fee, connectionDetails);\n    }\n\n    /**\n     * @dev Company can pay for the avatar jump txn. This must be \n     * called by a registered company contract. The avatar owner must sign off on\n     * the request using the owner nonce tracked by this contract. If fees are required\n     * for the jump, they must be attached to the transaction or come from the avatar\n     * contract balance. The avatar owner signature approves the transfer of funds if \n     * coming from avatar contract.\n     */\n    function delegateJump(DelegatedJumpRequest memory request) public payable nonReentrant onlyActiveCompany {\n        _verifyAvatarSignature(request);\n        PortalInfo memory portal = portalRegistry.getPortalInfoById(request.portalId);\n        require(portal.destination.company() == msg.sender, \"Avatar: company does not own destination experience\");\n        \n        require(request.agreedFee == portal.fee, \"Avatar: agreed fee does not match portal fee\");\n\n        if(portal.fee > 0) {\n            uint256 bal = address(this).balance + msg.value;\n            require(bal >= portal.fee, \"Avatar: insufficient funds for jump fee\");\n        }\n        AvatarStorage storage s = LibAvatar.load();\n        \n        bytes memory connectionDetails = portalRegistry.jumpRequest{value: portal.fee}(request.portalId);\n        //have to set location AFTER jump success\n        s.currentExperience = address(portal.destination);\n        emit IAvatar.JumpSuccess(address(portal.destination), portal.fee, connectionDetails);\n    }\n\n\n    /**\n     * @dev Receive ERC721 tokens sent to the avatar. This must be called by a registered\n     * erc721 asset contract. If the avatar does not allow mints outside of its current\n     * experience, the issuer for the calling asset must match the current experience's company. \n     */\n    function onERC721Received(\n        address ,\n        address ,\n        uint256 tokenId,\n        bytes calldata \n    ) public override nonReentrant returns (bytes4) {\n        AvatarStorage storage s = LibAvatar.load();\n        //only registered assets can be received by avatars\n        require(erc721Registry.isRegistered(msg.sender), \"Avatar: ERC721 token not from registered asset\");\n        IERC721 asset = IERC721(msg.sender);\n        //if can't receive tokens outside of experience, check if company matches\n        if(!s.canReceiveTokensOutsideExperience) {\n            address company = IAsset(msg.sender).issuer();\n            IExperience loc = IExperience(s.currentExperience);\n            require(company == loc.company(), \"Avatar: cannot receive tokens outside of experience\");\n        }\n        //make sure avatar owns the token before accepting it\n        require(asset.ownerOf(tokenId) == address(this), \"Avatar: ERC721 token not owned by avatar\");\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev Revoke ERC721 tokens sent to the avatar. This must be called by a registered\n     * erc721 asset contract.\n     */\n    function onERC721Revoked(uint256 tokenId) public override nonReentrant {\n        AvatarStorage storage s = LibAvatar.load();\n        require(erc721Registry.isRegistered(msg.sender), \"Avatar: only registered assets can call this function\");\n        IERC721 asset = IERC721(msg.sender);\n        try asset.ownerOf(tokenId) returns (address) {\n            revert('Avatar: ERC721 token still owned by avatar');\n        } catch {\n            s.list.remove(Wearable(address(asset), tokenId));       \n        }\n    \n    }\n    \n    function _verifyCompanySignature(AvatarJumpRequest memory request) internal returns (PortalInfo memory portal) {\n        \n        //get the portal info for the destination experience\n        portal = portalRegistry.getPortalInfoById(request.portalId);\n        require(address(portal.destination) != address(0), \"Avatar: destination portal not found: \");\n\n        //get the destination experience's owning company\n        ICompany company = ICompany(portal.destination.company());\n        AvatarStorage storage s = LibAvatar.load();\n\n        //increment company signing nonce to avoid replays\n        uint256 nonce = s.companyNonces[address(company)];\n        ++s.companyNonces[address(company)];\n\n        //companies sign off and agree to the avatar jumping into the experience for the \n        //given fee. This signature happens off chain between avatar client and company \n        //infrastructure.\n        bytes32 hash = keccak256(abi.encode(request.portalId, request.agreedFee, nonce));\n\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        //make sure signer is a signer for the destination experience's company\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        address r = ECDSA.recover(sigHash, request.destinationCompanySignature);\n        require(company.isSigner(r), \"Avatar: company signer is not authorized\");\n    }\n\n    //verify the avatar owner signature for a jump request\n    function _verifyAvatarSignature(DelegatedJumpRequest memory request) internal {\n        AvatarStorage storage s = LibAvatar.load();\n\n        //make sure cannot replay avatar signature\n        uint256 nonce = s.ownerNonce;\n        ++s.ownerNonce;\n\n        //avatar is agreeing to jump into the given destination portal for the given\n        //fee. This signature happens off chain between avatar client and company\n        bytes32 hash = keccak256(abi.encode(request.portalId, request.agreedFee, nonce));\n\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        address r = ECDSA.recover(sigHash, request.avatarOwnerSignature);\n        //make sure signer is the avatar owner\n        require(r == LibAccess.owner(), \"Avatar: avatar signer is not owner\");\n    }\n}"
    },
    "contracts/avatar/instance/AvatarProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../base-types/entity/EntityProxy.sol';\n\n/**\n * @title AvatarProxy\n * @dev A proxy contract for Avatar that allows to delegate calls to the Avatar contract while\n * preserving avatar address and storage.\n */\ncontract AvatarProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/avatar/instance/IAvatar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IAccessControl} from \"../../interfaces/IAccessControl.sol\";\nimport {IRegisteredEntity} from \"../../interfaces/entity/IRegisteredEntity.sol\";\nimport {Wearable} from '../../libraries/LibAvatar.sol';\n\n/**\n * @dev Arguments for an avatar jump.\n */\nstruct AvatarJumpRequest {\n    //the destination portal id\n    uint256 portalId;\n\n    //the fee for the jump, agreed between avatar owner and destination experience's company\n    uint256 agreedFee;\n\n    //the signature of the destination company agreeing to the jump terms\n    bytes destinationCompanySignature;\n}\n\n/**\n * @dev Arguments for a delegated jump (i.e. company paying for txn)\n */\nstruct DelegatedJumpRequest {\n\n    //the destination portal id\n    uint256 portalId;\n\n    //the fee for the jump, agreed between avatar owner and destination experience's company\n    uint256 agreedFee;\n\n    //the signature of the avatar owner agreeing to the jump terms\n    bytes avatarOwnerSignature;\n}\n\nstruct AvatarInitArgs {\n    //the name of the avatar\n    string name;\n\n    //the owner of the avatar\n    address owner;\n\n    //the starting experience for the avatar\n    address startingExperience;\n\n    //initialization data\n    bytes initData;\n}\n\n/**\n * @title IAvatar\n * @dev The Avatar interface.\n */\ninterface IAvatar is IERC721Receiver, IAccessControl, IRegisteredEntity {\n\n\n    event WearableAdded(address indexed wearable, uint256 tokenId);\n    event WearableRemoved(address indexed wearable, uint256 tokenId);\n    event LocationChanged(address indexed location);\n    event AppearanceChanged(bytes indexed appearanceDetails);\n    event JumpSuccess(address indexed experience, uint256 indexed fee, bytes connectionDetails);\n\n    /**\n     * @dev Initialize the Avatar with the given parameters. This function should only be called once\n     * after cloning a new avatar.\n     */\n    function init(AvatarInitArgs memory args) external;\n    \n    /**\n     * @dev get the Avatar's unique username\n     */\n    function username() external view returns (string memory);\n\n    /**\n     * @dev get the Avatar's current experience location\n     */\n    function location() external view returns (address);\n\n    /**\n     * @dev get the Avatar's appearance details. These will be specific to the avatar\n     * implementation off chain should be used by clients to render the avatar correctly.\n     */\n    function appearanceDetails() external view returns (bytes memory);\n\n    /**\n     * @dev Check whether an avatar can receive tokens when not in an experience that \n     * matches their current location. This prevents spamming of tokens to the avatar.\n     */\n    function canReceiveTokensOutsideOfExperience() external view returns (bool);\n\n    /**\n     * @dev Get the next signing nonce for a company signature.\n     */\n    function companySigningNonce(address signer) external view returns (uint256);\n\n    /**\n     * @dev Get the next signing nonce for an avatar owner signature.\n     */\n    function avatarOwnerSigningNonce() external view returns (uint256);\n    \n    /**\n     * @dev Determine if the given wearable can be used by the avatar.\n     */\n    function canAddWearable(Wearable calldata wearable) external view returns (bool);\n\n    /**\n     * @dev Add a new wearable to the avatar. This must be called by the avatar owner.\n     */\n    function addWearable(Wearable calldata wearable) external;\n    \n    /**\n     * @dev Remove a wearable from the avatar. This must be called by the avatar owner.\n     */\n    function removeWearable(Wearable calldata wearable) external;\n\n    /**\n     * @dev Get the wearables currently worn by the avatar.\n     */\n    function getWearables() external view returns (Wearable[] memory);\n\n    /**\n     * @dev Check if the avatar is wearing a specific wearable.\n     */\n    function isWearing(Wearable calldata wearable) external view returns (bool);\n    \n\n    /**\n     * @dev Set whether the avatar can receive tokens when not in an experience that matches \n     * their current location.\n     */\n    function setCanReceiveTokensOutsideOfExperience(bool canReceive) external;\n\n    /**\n     * @dev Set the appearance details of the avatar. This must be called by the avatar owner.\n     */\n    function setAppearanceDetails(bytes memory) external;\n\n    /**\n     * @dev Move the avatar to a new experience. This must be called by the avatar owner.\n     * If fees are required for the jump, they must be attached to the transaction or come\n     * from the avatar contract balance.\n     */\n    function jump(AvatarJumpRequest memory request) external payable;\n\n    /**\n     * @dev Company can pay for the avatar jump txn. This must be \n     * called by a registered company contract. The avatar owner must sign off on\n     * the request using the owner nonce tracked by this contract. If fees are required\n     * for the jump, they must be attached to the transaction or come from the avatar\n     * contract balance. The avatar owner signature approves the transfer of funds if \n     * coming from avatar contract.\n     */\n    function delegateJump(DelegatedJumpRequest memory request) external payable;\n\n\n    /**\n     * @dev Withdraw funds from the avatar contract. This must be called by the avatar owner.\n     */\n    function withdraw(uint256 amount) external;\n\n    \n    /**\n     * @dev called when IERC721 asset is revoked.\n     */\n     function onERC721Revoked(uint tokenId) external;\n}"
    },
    "contracts/avatar/registry/AvatarRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {LibRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {VectorAddress, LibVectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IWorldRegistry} from '../../world/registry/IWorldRegistry.sol';\nimport {IWorld} from '../../world/instance/IWorld.sol';\nimport {LibRegistration, RegistrationWithTermsAndVector} from '../../libraries/LibRegistration.sol';\nimport {IAvatarRegistry, CreateAvatarArgs} from './IAvatarRegistry.sol';\nimport {IAvatar, AvatarInitArgs} from '../instance/IAvatar.sol';\nimport {IExperienceRegistry} from '../../experience/registry/IExperienceRegistry.sol';\nimport {IExperience} from '../../experience/instance/IExperience.sol';\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\n\n/**\n * @dev Arguments for the AvatarRegistry constructor\n */\nstruct AvatarRegistryConstructorArgs {\n    address worldRegistry;\n}   \n\n/**\n * @title AvatarRegistry\n * @dev A registry for Avatar entities\n */\ncontract AvatarRegistry is BaseRegistry, IAvatarRegistry {\n\n    using LibVectorAddress for VectorAddress;\n\n    IWorldRegistry public immutable worldRegistry;\n\n    modifier onlyActiveWorld {\n        require(worldRegistry.isRegistered(msg.sender), \"CompanyRegistry: world not registered\");\n        require(IWorld(msg.sender).isEntityActive(), \"CompanyRegistry: world not active\");\n        _;\n    }\n\n    modifier onlySigner {\n        require(LibAccess.isSigner(msg.sender), \"RegistrarRegistry: caller is not a signer\");\n        _;\n    }\n\n    constructor(AvatarRegistryConstructorArgs memory args) {\n        require(args.worldRegistry != address(0), \"CompanyRegistry: invalid world registry\"); \n        worldRegistry = IWorldRegistry(args.worldRegistry);\n    }\n\n    function version() external pure override returns(Version memory) {\n        return Version(1,0);\n    }\n\n    function canUpOrDowngrade() internal view override {\n        //no-op since avatars are not removable\n    }\n\n    /**\n     * @dev Create a new Avatar entity\n     */\n    function createAvatar(CreateAvatarArgs calldata args) external onlyActiveWorld nonReentrant returns (address proxy) {\n        FactoryStorage storage fs = LibFactory.load();\n        require(fs.entityImplementation != address(0), \"AvatarRegistration: entity implementation not set\");\n        require(fs.proxyImplementation != address(0), \"AvatarRegistration: proxy implementation not set\");\n        \n        //clone avatar proxy for new address space\n        proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"AvatarRegistration: proxy cloning failed\");\n\n        //set implementation on the new proxy\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        AvatarInitArgs memory aArgs = AvatarInitArgs({\n            name: args.name,\n            owner: args.owner,\n            startingExperience: args.startingExperience,\n            initData: args.initData\n        });\n\n        //initialize new avatar proxy storage\n        IAvatar(proxy).init(aArgs);\n        \n        //store the new avatar proxy\n        _registerNonRemovableEntity(proxy, args.name);\n        \n        emit RegistryAddedEntity(proxy, args.owner);\n    }\n    \n}"
    },
    "contracts/avatar/registry/AvatarRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\n/**\n * @title AvatarRegistryProxy\n * @dev A proxy contract for AvatarRegistry so it can be upgraded and retain address and storage\n */\ncontract AvatarRegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/avatar/registry/IAvatarRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IRegistry} from '../../interfaces/registry/IRegistry.sol';\n\nstruct CreateAvatarArgs {\n    bool sendTokensToOwner;\n    address startingExperience;\n    address owner;\n    string name;\n    bytes initData;\n}\n\ninterface IAvatarRegistry is IRegistry {\n\n    function createAvatar(CreateAvatarArgs calldata args) external returns (address);\n}"
    },
    "contracts/base-types/BaseAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAccessControl} from '../interfaces/IAccessControl.sol';\nimport {LibAccess} from '../libraries/LibAccess.sol';\n\n/**\n * @title BaseAccess\n * @dev Base contract for all contracts that require access control.\n */\nabstract contract BaseAccess is IAccessControl {\n\n    modifier onlyAdmin {\n        require(LibAccess.isAdmin(msg.sender), 'BaseAccess: restricted to admins');\n        _;\n    }\n\n    modifier onlyOwner {\n        require(LibAccess.owner() == msg.sender, 'BaseAccess: restricted to owner');\n        _;\n    }\n\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return LibAccess.hasRole(role, account);\n    }\n\n    function grantRole(bytes32 role, address account) public onlyAdmin {\n        LibAccess.grantRole(role, account);\n    }\n\n    function revokeRole(bytes32 role, address account) public onlyAdmin {\n        LibAccess.revokeRole(role, account);\n    }\n\n    function addSigners(address[] calldata signers) public onlyAdmin {\n        LibAccess.addSigners(signers);\n    }\n\n    function removeSigners(address[] calldata signers) public onlyAdmin {\n        LibAccess.removeSigners(signers);\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return LibAccess.isSigner(account);\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return LibAccess.isAdmin(account);\n    }\n\n    function owner() public view returns (address) {\n        return LibAccess.owner();\n    }\n\n    function changeOwner(address newOwner) public onlyOwner {\n        LibAccess.setOwner(newOwner);\n    }\n\n    /*\n    function initAccess(address o, address[] calldata admins) internal {\n        LibAccess.initAccess(o, admins);\n    }\n    */\n}"
    },
    "contracts/base-types/BaseProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibAccess} from '../libraries/LibAccess.sol';\nimport {LibStorageSlots} from '../libraries/LibStorageSlots.sol';\nimport {Version} from '../libraries/LibVersion.sol';\n\n//interface to get version from implementation contract\ninterface IProvidesVersion {\n    function version() external view returns (Version memory);\n}\n\n/**\n * storage for proxy\n */\nstruct ProxyStorage {\n    address implementation;\n    Version version;\n}\n\n/**\n * @dev constructor args for base proxy\n */\nstruct BaseProxyConstructorArgs {\n    //initial implementation\n    address impl;\n\n    //owner for this contract\n    address owner;\n\n    //admins to assign to the contract\n    address[] admins;\n}\n\n/**\n * @title BaseProxy\n * @dev Base proxy for all non-entity proxy contracts.\n */\nabstract contract BaseProxy {\n\n    modifier onlyOwner() {\n        require(LibAccess.owner() == msg.sender, \"EntityProxy: restricted to owner\");\n        _;\n    }\n\n    constructor(BaseProxyConstructorArgs memory args) {\n        address impl = args.impl;\n        require(impl != address(0), \"EntityProxy: implementation is zero address\");\n        ProxyStorage storage ps = load();\n\n        //set the implementation logic to use\n        ps.implementation = impl;\n\n        //set the intiaial version of the proxy's logic\n        ps.version = IProvidesVersion(impl).version();\n\n        //initialize access controls\n        LibAccess.initAccess(args.owner, args.admins);\n    }\n\n    receive() external payable {}\n\n    function withdraw(uint256 amount) external onlyOwner {\n        require(amount <= address(this).balance, \"EntityProxy: insufficient balance\");\n        payable(msg.sender).transfer(amount);\n    }\n\n    //storage loader\n    function load() internal pure returns (ProxyStorage storage ps) {\n        bytes32 slot = LibStorageSlots.ENTITY_PROXY_STORAGE;\n        assembly {\n            ps.slot := slot\n        }\n    }\n\n    /**\n     * @dev set the implementation contract to use for the proxy. Only the owner can change\n     * the logic contract which ultimately changes the behavior of the contract. The storage\n     * will remain in-tact but the logic will change. Note that all storage must be compatible\n     * with newer and older versions of the logic contract. Older versions meaning if there is a \n     * rollback, the storage must remaining compatible with the older logic contract as well as any\n     * new version.\n     */\n    function setImplementation(address _implementation) external onlyOwner {\n        Version memory version = IProvidesVersion(_implementation).version();\n        ProxyStorage storage ps = load();\n        ps.implementation = _implementation;\n        ps.version = version;\n    }\n\n    /**\n     * @dev get the implementation contract for the proxy\n     */\n    function getImplementation() external view returns (address) {\n        ProxyStorage storage ps = load();\n        return ps.implementation;\n    }\n\n    /**\n     * @dev get the version of the implementation contract\n     */\n    function getVersion() external view returns (Version memory) {\n        ProxyStorage storage ps = load();\n        return ps.version;\n    }\n\n    /**\n     * @dev fallback function to delegate execution to the implementation contract\n     */\n    fallback() external payable {\n        ProxyStorage storage ps = load();\n        address _impl = ps.implementation;\n        require(_impl != address(0), \"EntityProxy: implementation not set\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n                case 0 { revert(0, returndatasize()) }\n                default { return(0, returndatasize()) }\n        }\n    }\n\n}"
    },
    "contracts/base-types/entity/BaseEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport {BaseAccess} from '../BaseAccess.sol';\nimport {IRegisteredEntity} from '../../interfaces/entity/IRegisteredEntity.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\n\n/**\n * @title BaseEntity\n * @dev Base contract for all (non-registry) entity types\n */\nabstract contract BaseEntity is ReentrancyGuard, BaseAccess, IRegisteredEntity {\n\n    modifier onlyRegistry {\n        require(msg.sender == owningRegistry(), 'RemovableEntity: only owning registry');\n        _;\n    }\n\n    modifier onlySigner {\n        require(isSigner(msg.sender), 'Entity: only signers');\n        _;\n    }\n    \n    /**\n        * @dev Returns the address of the registry that owns this entity\n     */\n    function owningRegistry() internal view virtual returns (address);\n\n    \n    /**\n     * @dev Returns the name of the entity\n     */\n    function name() external view returns (string memory) {\n        return LibEntity.load().name;\n    }\n    \n}"
    },
    "contracts/base-types/entity/BaseRemovableEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseEntity} from './BaseEntity.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {LibRemovableEntity} from '../../libraries/LibRemovableEntity.sol';\n\n/**\n    * @title BaseRemovableEntity\n    * @dev Base contract for all removable entity types\n */\nabstract contract BaseRemovableEntity is BaseEntity, IRemovableEntity {\n\n    \n    /**\n     * @dev Get the authority that sets the permission to remove the entity\n     */\n    function termsOwner() public view returns (address) {\n        return LibRemovableEntity.load().termsOwner;\n    }\n\n    /**\n     * @dev Deactivate the entity. This is only callable by the owning registry, which handles\n     * authorization checks.\n     */\n    function deactivate(string calldata reason) public virtual onlyRegistry {\n        LibRemovableEntity.load().active = false;\n        emit EntityDeactivated(msg.sender, reason);\n    }\n\n    /**\n     * @dev Reactivate the entity. This is only callable by the owning registry, which handles\n     * authorization checks.\n     */\n    function reactivate() public virtual onlyRegistry {\n        LibRemovableEntity.load().active = true;\n        emit EntityReactivated(msg.sender);\n    }\n\n    /**\n     * @dev Remove the entity. This is only callable by the owning registry, which handles\n     * authorization checks.\n     */\n    function remove(string calldata reason) public virtual onlyRegistry {\n        require(!LibRemovableEntity.load().active, 'RemovableEntity: must deactivate first');\n        LibRemovableEntity.load().removed = true;\n        emit EntityRemoved(msg.sender, reason);\n    }\n\n    /**\n     * @dev Check whether the entity is active\n     \n     */\n    function isEntityActive() public view returns (bool) {\n        return LibRemovableEntity.load().active;\n    }\n\n    /**\n     * @dev Check whether the entity is removed\n     */\n    function isRemoved() public view returns (bool) {\n        return LibRemovableEntity.load().removed;\n    }\n}"
    },
    "contracts/base-types/entity/EntityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../../libraries/LibStorageSlots.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IEntityProxy} from './IEntityProxy.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\n\n//used to check entity version\ninterface IProvidesVersion {\n    function version() external view returns (Version memory);\n}\n\n/**\n * Storage for entity proxy\n */\nstruct ProxyStorage {\n    address implementation;\n    Version version;\n}\n\n/**\n    * @title EntityProxy\n    * @dev Base contract for all entity proxy types. Proxies are cloned as part of the registration\n    * process. They are used to forward calls to the entity implementation contract.\n */\nabstract contract EntityProxy is IEntityProxy {\n\n    // The registry that owns this entity\n    address public immutable parentRegistry;\n    \n    modifier onlyRegistry {\n        require(msg.sender == parentRegistry, 'EntityProxy: only owning registry');\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == LibAccess.owner(), 'EntityProxy: restricted to owner');\n        _;\n    }\n\n\n    constructor(address registry) {\n        require(registry != address(0), \"EntityProxy: registry is zero address\");\n        parentRegistry  = registry;\n    }\n\n\n    receive() external payable {}\n\n    function withdraw(uint256 amount) external onlyOwner {\n        require(amount <= address(this).balance, \"EntityProxy: insufficient balance\");\n        payable(msg.sender).transfer(amount);\n    }\n\n    function load() internal pure returns (ProxyStorage storage ps) {\n        bytes32 slot = LibStorageSlots.ENTITY_PROXY_STORAGE;\n        assembly {\n            ps.slot := slot\n        }\n    }\n\n    /**\n     * @dev Set the implementation contract for the proxy. This is only callable by the registry\n     * that clones the proxy. This is called just after cloning or during an entity upgrade.\n     */\n    function setImplementation(address _implementation) external onlyRegistry {\n        Version memory version = IProvidesVersion(_implementation).version();\n        ProxyStorage storage ps = load();\n        ps.implementation = _implementation;\n        ps.version = version;\n    }\n\n    /**\n     * @dev Get the implementation contract for the proxy\n     */\n    function getImplementation() external view returns (address) {\n        ProxyStorage storage ps = load();\n        return ps.implementation;\n    }\n\n    /**\n     * @dev Get the version of the implementation contract for the proxy\n     */\n    function getVersion() external view returns (Version memory) {\n        ProxyStorage storage ps = load();\n        return ps.version;\n    }\n\n    /**\n     * @dev Fallback function that forwards all calls to the implementation contract\n     */\n    fallback() external payable {\n        ProxyStorage storage ps = load();\n        address _impl = ps.implementation;\n        require(_impl != address(0), \"EntityProxy: implementation not set\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n                case 0 { revert(0, returndatasize()) }\n                default { return(0, returndatasize()) }\n        }\n    }\n\n}"
    },
    "contracts/base-types/entity/IEntityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {Version} from '../../libraries/LibVersion.sol';\n\n/**\n    * @title IEntityProxy\n    * @dev Interface for entity proxy contracts\n */\ninterface IEntityProxy {\n    function setImplementation(address _implementation) external;\n\n    function getImplementation() external view returns (address);\n\n    function getVersion() external view returns (Version memory);\n}"
    },
    "contracts/base-types/entity/IVectoredEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\n\ninterface IVectoredEntity {\n\n    function vectorAddress() external view returns (VectorAddress memory);\n}"
    },
    "contracts/base-types/registry/BaseRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport {IRegistry} from '../../interfaces/registry/IRegistry.sol';\nimport {BaseAccess} from '../BaseAccess.sol';\nimport {LibRegistration} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {Version, LibVersion} from '../../libraries/LibVersion.sol';\nimport {IRegisteredEntity} from '../../interfaces/entity/IRegisteredEntity.sol';\nimport {IEntityProxy} from '../entity/IEntityProxy.sol';\n\n/**\n * @title BaseRegistry\n * @dev Base contract for all registries.\n */\nabstract contract BaseRegistry is ReentrancyGuard, BaseAccess, IRegistry {\n\n    using LibVersion for Version;\n    \n    modifier onlyUpgradeable {\n        require(isRegistered(msg.sender), 'Registry: entity is not registered');\n        canUpOrDowngrade();\n        _;\n    }\n\n\n    function canUpOrDowngrade() internal view virtual;\n\n    /**\n     * @dev Set the entity implementation contract for the registry. All registries clone their entity\n     * proxies and assign an entity implementation to that proxy.\n     */\n    function setEntityImplementation(address _entityImplementation) public onlyAdmin {\n        LibFactory.setEntityImplementation(_entityImplementation);\n    }\n\n    /**\n     * @dev Get the entity implementation contract for the registry.\n     */\n    function getEntityImplementation() public view returns (address) {\n        return LibFactory.getEntityImplementation();\n    }\n\n    /**\n     * @dev Set the proxy implementation contract for the registry. All registries clone their entity\n     * proxies. This is the base contract that is cloned.\n     */\n    function setProxyImplementation(address _proxyImplementation) public onlyAdmin {\n        LibFactory.setProxyImplementation(_proxyImplementation);\n    }\n\n    /**\n     * @dev Get the proxy implementation contract for the registry.\n     */\n    function getProxyImplementation() public view returns (address) {\n        return LibFactory.getProxyImplementation();\n    }\n\n    /**\n     * @dev Get the version for the entity logic contract. This can be used to detect if an \n     * upgrade is available.\n     */\n    function getEntityVersion() public view returns (Version memory) {\n        return LibFactory.getEntityVersion();\n    }\n\n    /**\n     * @dev Entity owners can request to upgrade the underlying logic of their entity contract. This is \n     * done through the registry so that arbitrary logic cannot be attached to entity proxies to circumvent\n     * protocol behaviors.\n     */\n    function upgradeEntity(bytes calldata initData) public virtual onlyUpgradeable nonReentrant {\n        IEntityProxy proxy = IEntityProxy(msg.sender); \n        Version memory v = proxy.getVersion();\n\n        //make sure it's a higher version\n        FactoryStorage storage fs = LibFactory.load();\n        require(v.lessThan(fs.entityVersion), 'Registry: entity has latest version');\n\n        //set the implementation on the entity proxy (caller)\n        IEntityProxy(msg.sender).setImplementation(fs.entityImplementation);\n        \n        IRegisteredEntity(msg.sender).postUpgradeInit(initData);\n\n        emit RegistryUpgradedEntity(msg.sender, fs.entityImplementation);\n    }\n\n    /**\n     * @dev Entity owners can request to downgrade the underlying logic of their entity contract. This is\n     * done through the registry so that arbitrary logic cannot be attached to entity proxies to circumvent\n     * protocol behaviors. This is useful for emergency situations where a bug is found in the latest logic.\n     */\n    function downgradeEntity(bytes calldata initData) public virtual onlyUpgradeable nonReentrant {\n        IEntityProxy proxy = IEntityProxy(msg.sender); \n        Version memory v = proxy.getVersion();\n\n        //make sure it's a lower version\n        FactoryStorage storage fs = LibFactory.load();\n        require(v.greaterThan(fs.entityVersion), 'Registry: entity version is less than current already');\n\n        //set the implementation on the entity proxy (caller)\n        IEntityProxy(msg.sender).setImplementation(fs.entityImplementation);\n        IRegisteredEntity(msg.sender).postUpgradeInit(initData);\n\n        emit RegistryDowngradedEntity(msg.sender, fs.entityImplementation);\n    }\n\n    /**\n     * @dev Check if an entity is registered in this registry.\n     */\n    function isRegistered(address addr) public view returns (bool) {\n        return LibRegistration.isRegistered(addr);\n    }\n\n    /**\n     * @dev Get an entity by name.\n     */\n    function getEntityByName(string calldata name) public view returns (address) {\n        return LibRegistration.getEntityByName(name);\n    }\n\n    /**\n     * @dev Register an entity in the registry.\n     */\n    function _registerNonRemovableEntity(address entity, string calldata name) internal {\n        LibRegistration.registerNonRemovableEntity(entity, name);\n    }\n}"
    },
    "contracts/base-types/registry/BaseRemovableRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from './BaseRegistry.sol';\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {ChangeEntityTermsArgs} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {LibRegistration} from '../../libraries/LibRegistration.sol';\nimport {ITermsOwner} from '../../interfaces/registry/ITermsOwner.sol';\n\n/**\n * @title BaseRemovableRegistry\n * @dev Base contract for all registries that support entity removal.\n */\nabstract contract BaseRemovableRegistry is BaseRegistry, IRemovableRegistry {\n\n\n    modifier onlyEntityOwner(address entity) {\n        IRemovableEntity e = IRemovableEntity(entity);\n        //get the authority for the entity and make sure that's who the caller is\n        require(e.termsOwner() == msg.sender, \"BaseRemovableRegistry: caller is not the entity's terms owner\");\n        ITermsOwner to = ITermsOwner(msg.sender);\n        \n        //make sure authority is also active\n        require(to.isStillActive(), \"BaseRemovableRegistry: caller is not active\");\n        _;\n    }\n\n    modifier onlyActiveEntity() {\n        //make sure the removable entity has not been deactivated\n        IRemovableEntity e = IRemovableEntity(msg.sender);\n        require(e.isEntityActive(), \"BaseRemovableRegistry: entity is not active\");\n        _;\n    }\n\n    /**\n     * @dev Called by the entity's authority to deactivate the entity for the given reason.\n     */\n    function deactivateEntity(IRemovableEntity entity, string calldata reason) external onlyEntityOwner(address(entity)) override virtual {\n        LibEntityRemoval.deactivateEntity(entity, reason);\n    }\n\n    /**\n     * @dev Called by the entity's terms owner to reactivate the entity.\n     */\n    function reactivateEntity(IRemovableEntity entity) external onlyEntityOwner(address(entity)) override virtual {\n        LibEntityRemoval.reactivateEntity(entity);\n    }\n\n    /**\n     * @dev Removes an entity from the registry. Can only be called by the terms owner and only after deactivating\n     * the entity and waiting for the grace period to expire. A grace period must be set to given ample time\n     * for the entity to respond to deactivation.\n     */\n    function removeEntity(IRemovableEntity entity, string calldata reason) external onlyEntityOwner(address(entity)) override virtual {\n        LibEntityRemoval.removeEntity(entity, reason);\n    }\n\n    /**\n     * @dev Returns the terms for the given entity address\n     */\n    function getEntityTerms(address addr) public view returns (RegistrationTerms memory) {\n        return LibEntityRemoval.getEntityTerms(addr);\n    }\n\n    /**\n     * @dev Returns whether an entity can be deactivated. Entities can only be deactivated\n     * if they are either expired or within the grace period\n     */\n    function canBeDeactivated(address addr) public view returns (bool) {\n        return LibEntityRemoval.canBeDeactivated(addr);\n    }\n\n    /**\n     * @dev Returns whether an entity can be removed. Entities can only be removed if they are\n     * outside the grace period\n     */\n    function canBeRemoved(address addr) public view returns (bool) {\n        return LibEntityRemoval.canBeRemoved(addr);\n    }\n\n    /**\n     * @dev Enforces deactivation of an entity. Can be called by anyone but will only\n     * succeed if the entity is inside the grace period\n     */\n    function enforceDeactivation(IRemovableEntity addr) public {\n        LibEntityRemoval.enforceDeactivation(addr);\n    }\n\n    /**\n     * @dev Enforces removal of an entity. Can be called by anyone but will only\n     * succeed if it is outside the grace period\n     */\n    function enforceRemoval(IRemovableEntity e) public virtual {\n        LibEntityRemoval.enforceRemoval(e);\n    }\n\n    /**\n     * @dev Returns the last renewal timestamp in seconds for the given address.\n     */\n    function getLastRenewal(address addr) public view returns (uint256) {\n        return LibEntityRemoval.getLastRenewal(addr);\n    }\n\n    /**\n     * @dev Returns the expiration timestamp in seconds for the given address.\n     */\n    function getExpiration(address addr) public view returns (uint256) {\n        return LibEntityRemoval.getExpiration(addr);\n    }\n\n    /**\n     * @dev Check whether an address is expired.\n     */\n    function isExpired(address addr) public view returns (bool) {\n        return LibEntityRemoval.isExpired(addr);\n    }\n\n    /**\n     * @dev Check whether an address is in the grace period.\n     */\n    function isInGracePeriod(address addr) public view returns (bool) {\n        return LibEntityRemoval.isInGracePeriod(addr);\n    }\n\n    /**\n     * @dev Renew an entity by paying the renewal fee.\n     */\n    function renewEntity(address addr) public payable {\n        LibEntityRemoval.renewEntity(addr);\n    }\n\n    /**\n     * @dev Change the terms for an entity. Can only be called by the entity's terms owner.\n     */\n    function changeEntityTerms(ChangeEntityTermsArgs calldata args) public onlyEntityOwner(args.entity) override virtual {\n        LibRegistration.changeEntityTerms(args);\n    }\n\n    /**\n     * @dev Upgrade the entity to the latest version of the registry. This overrides base registry version\n     * to ensure entity is actually still active.\n     */\n    function canUpOrDowngrade() internal view override {\n        IRemovableEntity e = IRemovableEntity(msg.sender);\n        require(e.isEntityActive(), \"BaseRemovableRegistry: entity is not active\");\n    }\n\n    /**\n     * @dev Register an entity in the registry.\n     */\n    function _registerRemovableEntity(address entity, address termsOwner, RegistrationTerms memory terms, string calldata name) internal {\n        LibRegistration.registerRemovableEntity(entity, termsOwner, terms, name);\n    }\n}"
    },
    "contracts/base-types/registry/BaseVectoredRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IVectoredRegistry} from '../../interfaces/registry/IVectoredRegistry.sol';\nimport {BaseRemovableRegistry} from './BaseRemovableRegistry.sol';\nimport {LibRegistration} from '../../libraries/LibRegistration.sol';\nimport {IVectoredEntity} from '../entity/IVectoredEntity.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\n\n/**\n * @title BaseVectoredRegistry\n * @dev Base contract for all registries that support vector-based entity retrieval.\n */\nabstract contract BaseVectoredRegistry is BaseRemovableRegistry, IVectoredRegistry {\n\n    /**\n     * @dev Get the entity address for the given vector.\n     */\n    function getEntityByVector(VectorAddress calldata vector) external view returns (address) {\n        return LibRegistration.getEntityByVector(vector);\n    }\n\n    /**\n     * @dev Removes an entity from the registry. Can only be called by the terms owner and only after deactivating\n     * the entity and waiting for the grace period to expire. A grace period must be set to given ample time\n     * for the entity to respond to deactivation.\n     */\n    function removeEntity(IRemovableEntity entity, string calldata reason) external onlyEntityOwner(address(entity)) override virtual {\n        VectorAddress memory v = IVectoredEntity(address(entity)).vectorAddress();\n        LibEntityRemoval.removeEntityWithVector(entity, v, reason);\n    }\n\n    /**\n     * @dev Enforces removal of an entity. Can be called by anyone but will only\n     * succeed if it is outside the grace period\n     */\n    function enforceRemoval(IRemovableEntity e) public override virtual {\n        VectorAddress memory v = IVectoredEntity(address(e)).vectorAddress();\n        LibEntityRemoval.enforceRemovalWithVector(e, v);\n    }\n}"
    },
    "contracts/company/instance/Company.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRemovableEntity} from '../../base-types/entity/BaseRemovableEntity.sol';\nimport {VectorAddress, LibVectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {LibRemovableEntity, RemovableEntityStorage} from '../../libraries/LibRemovableEntity.sol';\nimport {ICompany, CompanyInitArgs, AddExperienceArgs, DelegatedAvatarJumpRequest} from './ICompany.sol';\nimport {IExperienceRegistry} from '../../experience/registry/IExperienceRegistry.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {CompanyStorage, LibCompany} from './LibCompany.sol';\nimport {IWorld, NewExperienceArgs} from '../../world/instance/IWorld.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IAssetRegistry} from '../../asset/registry/IAssetRegistry.sol';\nimport {IERC20Asset} from '../../asset/instance/erc20/IERC20Asset.sol';\nimport {IERC721Asset} from '../../asset/instance/erc721/IERC721Asset.sol';\nimport {IAvatarRegistry} from '../../avatar/registry/IAvatarRegistry.sol';\nimport {IAvatar, DelegatedJumpRequest} from '../../avatar/instance/IAvatar.sol';\nimport {IExperience} from '../../experience/instance/IExperience.sol';\nimport {IAsset} from '../../asset/instance/IAsset.sol';\nimport {ICompanyRegistry} from '../registry/ICompanyRegistry.sol';\n\nstruct CompanyConstructorArgs {\n    address companyRegistry;\n    address experienceRegistry;\n    address erc20Registry;\n    address erc721Registry;\n    address avatarRegistry;\n}\n\n/** \n * @title Company contract\n * @dev A company can issue assets and add experiences to worlds. This is the company logic \n * implementation. All companies are fronted by an EntityProxy. The company constructor \n * sets up immutable references to various registries for logic implementation.\n */\ncontract Company is BaseRemovableEntity, ICompany {\n\n    using LibVectorAddress for VectorAddress;\n    \n    ICompanyRegistry public immutable companyRegistry;\n    IExperienceRegistry public immutable experienceRegistry;\n    IAssetRegistry public immutable erc20Registry;\n    IAssetRegistry public immutable erc721Registry;\n    IAvatarRegistry public immutable avatarRegistry;\n\n\n    modifier onlyIfActive {\n        require(LibRemovableEntity.load().active, 'Company: Company is not active');\n        require(IWorld(LibRemovableEntity.load().termsOwner).isEntityActive(), 'Company: World is not active');\n        _;\n    }\n\n    /**\n     * \n     */\n    constructor(CompanyConstructorArgs memory args) {\n        require(args.companyRegistry != address(0), 'Company: Invalid company registry');\n        require(args.experienceRegistry != address(0), 'Company: Invalid experience registry');\n        require(args.erc20Registry != address(0), 'Company: Invalid erc20 registry');\n        require(args.erc721Registry != address(0), 'Company: Invalid erc721 registry');\n        require(args.avatarRegistry != address(0), 'Company: Invalid avatar registry');\n\n        companyRegistry = ICompanyRegistry(args.companyRegistry);\n        experienceRegistry = IExperienceRegistry(args.experienceRegistry);\n        erc20Registry = IAssetRegistry(args.erc20Registry);\n        erc721Registry = IAssetRegistry(args.erc721Registry);\n        avatarRegistry = IAvatarRegistry(args.avatarRegistry);\n    }\n\n    receive() external payable {}\n\n    function withdraw(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance, 'Company: Insufficient balance');\n        payable(msg.sender).transfer(amount);\n    }\n\n    function upgrade(bytes calldata initData) public onlyOwner nonReentrant {\n        companyRegistry.upgradeEntity(initData);\n    }\n\n    function version() external pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    \n    /**\n     * @dev Initializes the company with the given information. This is called by the company registry\n     * after cloning the company's proxy and assigning this logic to it.\n     */\n    function init(CompanyInitArgs memory args) public onlyRegistry {\n        require(args.owner != address(0), 'Company: Invalid owner');\n        require(args.world != address(0), 'Company: Invalid world');\n        require(bytes(args.name).length > 0, 'Company: Invalid name');\n\n        //true, false means we need a p value but not a p_sub value   \n        args.vector.validate(true, false);\n        \n        //set the company name\n        LibEntity.load().name = args.name;\n\n        //initialize general removable entity storage\n        RemovableEntityStorage storage rs = LibRemovableEntity.load();\n        rs.active = true;\n        rs.termsOwner = args.world;\n        rs.vector = args.vector;\n\n        //intialize access controls\n        address[] memory admins = new address[](0);\n        LibAccess.initAccess(args.owner, admins);\n    }\n\n    function postUpgradeInit(bytes calldata) public override onlyRegistry {\n        //no-op\n    }\n\n    /**\n     * @dev Returns the address of the company registry\n     */\n    function owningRegistry() internal view override returns (address) {\n        return address(companyRegistry);\n    }\n    \n    /**\n        * @dev Returns the address of the world in which the company operates.\n     */\n    function world() public view returns (address) {\n        return LibRemovableEntity.load().termsOwner;\n    }\n\n    /**\n     * @dev Returns the vector address of the company. The vector address is assigned by\n     * the operating World.\n     */\n    function vectorAddress() public view returns (VectorAddress memory) {\n        return LibRemovableEntity.load().vector;\n    }\n\n    /**\n     * @dev Checks if this company can mint the given ERC20 asset. Only active companies can mint assets.\n     */\n    function canMintERC20(address asset, address to, uint256 amount) public view onlyIfActive returns (bool) {\n        //check if asset is allowed\n        //make sure asset is registered\n        require(erc20Registry.isRegistered(asset), \"Company: asset not registered\");\n\n        //make sure asset is active\n        IERC20Asset mintable = IERC20Asset(asset);\n        require(mintable.isEntityActive(), \"Company: asset not active\");\n\n        //can only mint if company owns the asset\n        require(mintable.issuer() == address(this), \"Company: not issuer of asset\");\n        \n        //and the asset allows to mint\n        require(mintable.canMint(to, amount), \"Company: cannot mint to address\");\n\n        //all checks passed\n        return true;\n    }\n\n    /**\n     * @dev Checks if this company can mint the given ERC721 asset. Only active companies can mint assets.\n     */\n    function canMintERC721(address asset, address to) public view onlyIfActive returns (bool) {\n        //check if asset is allowed\n        //make sure asset is registered\n        require(erc721Registry.isRegistered(asset), \"Company: asset not registered\");\n\n        //make sure asset is active\n        IERC721Asset mintable = IERC721Asset(asset);\n        require(mintable.isEntityActive(), \"Company: asset not active\");\n\n        //can only mint if company owns the asset\n        require(mintable.issuer() == address(this), \"Company: not issuer of asset\");\n        \n        //and the asset allows to mint\n        require(mintable.canMint(to), \"Company: cannot mint to address\");\n\n        //all checks passed\n        return true;\n    }\n\n    /**\n     * @dev Mints the given ERC20 asset to the given address. This can only be called by a company\n     * signer and only if the company is active.\n     */\n    function mintERC20(address asset, address to, uint256 amount) public nonReentrant onlySigner {\n        require(canMintERC20(asset, to, amount), \"Company: cannot mint asset\");\n        IERC20Asset(asset).mint(to, amount);\n    }\n\n    /**\n     * @dev Mints the given ERC721 asset to the given address. This can only be called by a company\n     * signer and only if the company is active.\n     */\n    function mintERC721(address asset, address to) public nonReentrant onlySigner {\n        require(canMintERC721(asset, to), \"Company: cannot mint asset\");\n        IERC721Asset(asset).mint(to);\n    }\n\n    /**\n     * @dev Revokes the given ERC20 asset from the given address. This can only be called by a company\n     * signer and only if the company is active.\n     */\n    function revokeERC20(address asset, address holder, uint256 amount) public nonReentrant onlySigner onlyIfActive {\n       //make sure the asset is registered. It doesn't have to be active to be revoked\n        require(erc20Registry.isRegistered(asset), \"Company: asset not registered\");\n        IERC20Asset mintable = IERC20Asset(asset);\n\n        mintable.revoke(holder, amount);\n    }\n\n    function upgradeERC20(address asset, bytes calldata initData) public nonReentrant onlyAdmin onlyIfActive {\n        require(erc20Registry.isRegistered(asset), \"Company: asset not registered\");\n        IERC20Asset a = IERC20Asset(asset);\n        require(a.issuer() == address(this), \"Company: not issuer of asset\");\n        a.upgrade(initData);\n    }\n\n    /**\n     * @dev Revokes the given ERC721 asset from the given address. This can only be called by a company\n     * signer and only if the company is active.\n     */\n    function revokeERC721(address asset, address holder, uint256 tokenId) public nonReentrant onlySigner onlyIfActive {\n       //make sure the asset is registered. It doesn't have to be active to be revoked\n        require(erc721Registry.isRegistered(asset), \"Company: asset not registered\");\n        IERC721Asset mintable = IERC721Asset(asset);\n\n        mintable.revoke(holder, tokenId);\n    }\n\n    function upgradeERC721(address asset, bytes calldata initData) public nonReentrant onlyAdmin onlyIfActive {\n        require(erc721Registry.isRegistered(asset), \"Company: asset not registered\");\n        IERC721Asset a = IERC721Asset(asset);\n        require(a.issuer() == address(this), \"Company: not issuer of asset\");\n        a.upgrade(initData);\n    }\n\n    /**\n        * @dev Sets the base URI for an ERC721 asset minted by this company. This can only be called by admins\n     */\n    function setERC721BaseURI(address asset, string calldata uri) public nonReentrant onlyAdmin {\n        require(erc721Registry.isRegistered(asset), \"Company: asset not registered\");\n        IERC721Asset e = IERC721Asset(asset);\n        require(e.isEntityActive(), \"Company: asset not active\");\n        e.setBaseURI(uri);\n    }\n\n    /**\n     * @dev Adds an experience to the parent world. This also creates a portal into the \n     * experience and registers it in the PortalRegistry.\n     */\n    function addExperience(AddExperienceArgs memory args) public nonReentrant onlyAdmin returns (address experience, uint256 portalId) {\n        \n        //use the company's vector as a starting point\n        VectorAddress memory sub = vectorAddress();\n\n        CompanyStorage storage cs = LibCompany.load();\n\n        //increment the sub-plane counter for this company\n        ++cs.nextPSubValue;\n\n        //assign it to the copied vector\n        sub.p_sub = cs.nextPSubValue;\n\n        //create the experience through our parent world. This is mostly so simplify off-chain\n        //data indexing for all parties. Otherwise, world owners would have to monitor every\n        //company contract they regsitered for experience updates.\n        NewExperienceArgs memory expArgs = NewExperienceArgs({\n            vector: sub,\n            name: args.name,\n            initData: args.initData\n        });\n        IWorld w = IWorld(world());\n        (experience, portalId) = w.addExperience(expArgs);\n        emit CompanyAddedExperience(experience, portalId);\n    }\n\n    /**\n     * @dev Deactivates an experience. This can only be called by company admin\n     */\n    function deactivateExperience(address experience, string calldata reason) public nonReentrant onlyAdmin {\n        //ask the world to deactivate\n        IWorld(world()).deactivateExperience(experience, reason);\n        emit CompanyDeactivatedExperience(experience, reason);\n    }\n\n    /**\n     * @dev Reactivates an experience. This can only be called by company admin\n     */\n    function reactivateExperience(address experience) public nonReentrant onlyAdmin {\n        IWorld(world()).reactivateExperience(experience);\n        emit CompanyReactivatedExperience(experience);\n    }\n\n    /**\n     * @dev Removes an experience from the world. This also removes the portal into the \n     * experience and unregisters it from the PortalRegistry. This can only be called\n     * by company admin\n     */\n    function removeExperience(address experience, string calldata reason) public nonReentrant onlyAdmin {\n        uint256 portalId = IWorld(world()).removeExperience(experience, reason);\n        emit CompanyRemovedExperience(experience, reason, portalId);\n    }\n\n    function upgradeExperience(address exp, bytes calldata initData) public nonReentrant onlyAdmin onlyIfActive {\n        require(experienceRegistry.isRegistered(exp), 'Company: Experience not registered');\n        IExperience e = IExperience(exp);\n        require(e.company() == address(this), 'Company: Experience does not belong to company');\n        e.upgrade(initData);\n    }\n\n    /**\n     * @dev Adds an experience condition to an experience. Going through the company\n     * contract provides the necessary authorization checks and that only the experience\n     * owner can add conditions.\n     */\n    function addExperienceCondition(address experience, address condition) public nonReentrant onlyAdmin {\n        require(IExperience(experience).company() == address(this), 'Company: Experience does not belong to company');\n        IExperience(experience).addPortalCondition(condition);\n    }\n\n\n    /**\n     * @dev Removes an experience condition from an experience\n     */\n    function removeExperienceCondition(address experience) public nonReentrant onlyAdmin {\n        require(IExperience(experience).company() == address(this), 'Company: Experience does not belong to company');\n        IExperience(experience).removePortalCondition();\n    }\n\n    /**\n     * @dev Changes the fee associated with a portal to an experience owned by the company.\n     * Going through the company provides appropriate authorization checks.\n     */\n    function changeExperiencePortalFee(address experience, uint256 fee) public nonReentrant onlyAdmin {\n        IExperience(experience).changePortalFee(fee);\n    }\n\n    /**\n     * @dev Adds an asset condition to an asset. Going through the company\n     * contract provides the necessary authorization checks and that only the asset\n     * issuer can add conditions.\n     */\n    function addAssetCondition(address asset, address condition) public nonReentrant onlyAdmin {\n        IAsset(asset).setCondition(condition);\n    }\n\n    /**\n     * @dev Removes an asset condition from an asset\n     */\n    function removeAssetCondition(address asset) public nonReentrant onlyAdmin {\n        IAsset(asset).removeCondition();\n    }\n\n    /**\n     * @dev Delegates a jump for an avatar to the company. This allows the company to\n     * pay the transaction fee but charge the avatar owner for the jump. This is useful\n     * for companies that want to offer free jumps to avatars but charge them for the\n     * experience.\n     */\n    function delegateJumpForAvatar(DelegatedAvatarJumpRequest calldata request) public nonReentrant onlySigner {\n        IAvatar avatar = IAvatar(request.avatar);\n        //go through avatar contract to make the jump so that it pays the fee\n        avatar.delegateJump(DelegatedJumpRequest({\n            portalId: request.portalId,\n            agreedFee: request.agreedFee,\n            avatarOwnerSignature: request.avatarOwnerSignature\n        }));\n        emit ICompany.CompanyJumpedForAvatar(request.avatar, request.portalId, request.agreedFee);\n    }\n}"
    },
    "contracts/company/instance/CompanyProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../base-types/entity/EntityProxy.sol';\n\n//proxy contract for company logic\ncontract CompanyProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/company/instance/ICompany.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IAccessControl} from '../../interfaces/IAccessControl.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {IVectoredEntity} from '../../base-types/entity/IVectoredEntity.sol';\n\n/**\n * @dev Arguments for companies to add an experience to a world.\n */\nstruct AddExperienceArgs {\n    //unique name of the experience\n    string name;\n\n    //initialization data\n    bytes initData;\n}\n\n/**\n * @dev Arguments for delegating an avatar jump to a company.\n */\nstruct DelegatedAvatarJumpRequest {\n    //avatar making jump\n    address avatar;\n\n    //the portal id of the jump (relative to the destination)\n    uint256 portalId;\n\n    //the fee required to make the jump\n    uint256 agreedFee;\n\n    //signature of the avatar owner agreeing to the jump and fees\n    bytes avatarOwnerSignature;\n}\n\nstruct CompanyInitArgs {\n    //name of the company\n    string name;\n\n    //owner of the company\n    address owner;\n\n    //world in which the company operates\n    address world;\n\n    //vector address assigned to the company\n    VectorAddress vector;\n\n    //initialization data\n    bytes initData;\n\n}\n\n/**\n * @title ICompany\n * @dev Interface for a company that can add experiences to a world and mint assets.\n * Companies register through Worlds in order to offer experiences to avatars and \n * create assets within worlds.\n */\ninterface ICompany is IAccessControl, IVectoredEntity, IRemovableEntity {\n\n    event CompanyAddedExperience(address indexed experience, uint256 indexed portalId);\n    event CompanyDeactivatedExperience(address indexed experience, string reason);\n    event CompanyReactivatedExperience(address indexed experience);\n    event CompanyRemovedExperience(address indexed experience, string reason, uint256 indexed portalId);\n    event CompanyAddedExperienceCondition(address indexed experience, address indexed condition);\n    event CompanyRemovedExperienceCondition(address indexed experience);\n    event CompanyChangedExperiencePortalFee(address indexed experience, uint256 indexed fee);\n    event CompanyAddedAssetCondition(address indexed asset, address indexed condition);\n    event CompanyRemovedAssetCondition(address indexed asset);\n    event CompanyAddedAssetHook(address indexed asset, address indexed hook);\n    event CompanyRemovedAssetHook(address indexed asset);\n    event CompanyAddedExperienceHook(address indexed experience, address indexed hook);\n    event CompanyRemovedExperienceHook(address indexed experience);\n    event CompanyJumpedForAvatar(address indexed avatar, uint256 indexed portalId, uint256 indexed fee);\n    event CompanyUpgradedExperience(address indexed experience, address indexed nextVersion);\n    event CompanyUpgradedAsset(address indexed asset, address indexed nextVersion);\n\n    event CompanyUpgraded(address indexed oldVersion, address indexed nextVersion);\n    event CompanyHookSet(address indexed hook);\n    event CompanyHookRemoved();\n    event AssetMinted(address indexed asset, address indexed to, uint256 indexed amountOrTokenId);\n    event AssetRevoked(address indexed asset, address indexed holder, uint256 indexed amountOrTokenId);\n    event CompanyDeactivated();\n    event CompanyReactivated();\n\n\n    function init(CompanyInitArgs memory args) external;\n\n    /**\n        * @dev Returns the address of the world in which the company operates.\n     */\n    function world() external view returns (address);\n\n    /**\n     * @dev Returns whether this company can mint the given asset to the given address.\n     * The data parameter is dependent on the type of asset.\n     */\n    function canMintERC20(address asset, address to, uint256 amount) external view returns (bool);\n    \n    /**\n     * @dev Returns whether this company can mint the given ERC721 to the given address.\n     */\n    function canMintERC721(address asset, address to) external view returns (bool);\n\n    /**\n     * @dev Sets a new BaseURI for an ERC721 asset. This should only be called by admins\n     */\n    function setERC721BaseURI(address asset, string calldata baseURI) external;\n\n    /**\n     * @dev Adds an experience to the world. This also creates a portal into the \n     * experience and registers it in the PortalRegistry. It is assumed that the \n     * initialization data for the experience will include the expected fee\n     * for the portal.\n     */\n    function addExperience(AddExperienceArgs memory args) external returns (address, uint256);\n\n    /**\n     * @dev Deactivates an experience. This will prevent avatars from entering the experience\n     * but will not remove the experience from the world. This can only be called by the\n     * company admin.\n     */\n    function deactivateExperience(address experience, string calldata reason) external;\n\n    /**\n     * @dev Reactivates an experience that was previously deactivated. This can only be called\n     * by the company admin.\n     */\n    function reactivateExperience(address experience) external;\n\n    /**\n     * @dev Removes an experience from the world. This also removes the portal into the \n     * experience and unregisters it from the PortalRegistry. This can only be called\n     * by company admin\n     */\n    function removeExperience(address experience, string calldata reason) external;\n\n    /**\n     * @dev Request that the given company-owned experience upgrade itself\n     */\n    function upgradeExperience(address exp, bytes calldata initData) external;\n\n    /**\n     * @dev Mints the given asset to the given address with the given amount.\n     */\n    function mintERC20(address asset, address to, uint256 amount) external;\n\n    /**\n     * @dev Mints an ERC721 to the given address. The token ID associated with the \n     * minted asset is an incremental counter for the asset. This is intentionally\n     * decoupled from its originating asset on another chain to preserve privacy.\n     */\n    function mintERC721(address asset, address to) external;\n\n    /**\n     * @dev Revokes the given amount of the given asset from the given address. The data\n     * parameter is dependent on the type of asset. This is likely called when an avatar\n     * owner transfers the original asset on another chain (i.e. all assets in the \n     * interoperability layer are synthetic assets that represent assets on other chains).\n     */\n    function revokeERC20(address asset, address holder, uint256 amount) external;\n\n    /**\n     * @dev Revokes the given ERC721 token from the given address. This is likely called\n     * when an avatar owner transfers the original asset on another chain (i.e. all assets\n     * in the interoperability layer are synthetic assets that represent assets on other chains).\n     */\n    function revokeERC721(address asset, address holder, uint256 tokenId) external;\n\n    /**\n     * @dev Upgrades the given ERC20 asset to a new version. This is useful for companies\n     * that want to upgrade the logic of their assets. This can only be called by the company\n     * admin.\n     */\n    function upgradeERC20(address asset, bytes calldata initData) external;\n\n    /**\n     * @dev Upgrades the given ERC721 asset to a new version. This is useful for companies\n     * that want to upgrade the logic of their assets. This can only be called by the company\n     * admin.\n     */\n    function upgradeERC721(address asset, bytes calldata initData) external;\n\n    /**\n     * @dev Withdraws the given amount of funds from the company. Only the owner can withdraw funds.\n     */\n    function withdraw(uint256 amount) external;\n\n    /**\n     * @dev Adds an experience condition to an experience. Going through the company\n     * contract provides the necessary authorization checks and that only the experience\n     * owner can add conditions.\n     */\n    function addExperienceCondition(address experience, address condition) external;\n\n    /**\n     * @dev Removes an experience condition from an experience\n     */\n    function removeExperienceCondition(address experience) external;\n\n    /**\n     * @dev Changes the fee associated with a portal to an experience owned by the company.\n     * Going through the company provides appropriate authorization checks.\n     */\n    function changeExperiencePortalFee(address experience, uint256 fee) external;\n\n    /**\n     * @dev Adds an asset condition to an asset. Going through the company\n     * contract provides the necessary authorization checks and that only the asset\n     * issuer can add conditions.\n     */\n    function addAssetCondition(address asset, address condition) external;\n\n    /**\n     * @dev Removes an asset condition from an asset\n     */\n    function removeAssetCondition(address asset) external;\n\n    /**\n     * @dev Delegates a jump for an avatar to the company. This allows the company to\n     * pay the transaction fee but charge the avatar owner for the jump. This is useful\n     * for companies that want to offer free jumps to avatars but charge them for the\n     * experience.\n     */\n    function delegateJumpForAvatar(DelegatedAvatarJumpRequest calldata request) external;\n    \n}"
    },
    "contracts/company/instance/LibCompany.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../../libraries/LibStorageSlots.sol';\n\nstruct CompanyStorage {\n    uint256 nextPSubValue;\n}\n\nlibrary LibCompany {\n    function load() internal pure returns (CompanyStorage storage ws) {\n        bytes32 slot = LibStorageSlots.COMPANY_STORAGE;\n        assembly {\n            ws.slot := slot\n        }\n    }\n}"
    },
    "contracts/company/registry/CompanyRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseRemovableRegistry} from '../../base-types/registry/BaseRemovableRegistry.sol';\nimport {BaseVectoredRegistry} from '../../base-types/registry/BaseVectoredRegistry.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {LibRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {ICompanyRegistry, CreateCompanyArgs} from './ICompanyRegistry.sol';\nimport {ICompany, CompanyInitArgs} from '../instance/ICompany.sol';\nimport {IWorldRegistry} from '../../world/registry/IWorldRegistry.sol';\nimport {IWorld} from '../../world/instance/IWorld.sol';\nimport {LibRegistration, RegistrationWithTermsAndVector} from '../../libraries/LibRegistration.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\n\nstruct CompanyRegistryConstructorArgs {\n    address worldRegistry;\n}   \n\n/**\n * @title CompanyRegistry\n * @dev A registry for Company entities\n */\ncontract CompanyRegistry is BaseVectoredRegistry, ICompanyRegistry {\n\n    IWorldRegistry public immutable worldRegistry;\n\n    modifier onlyActiveWorld {\n        require(worldRegistry.isRegistered(msg.sender), \"CompanyRegistry: world not registered\");\n        require(IWorld(msg.sender).isEntityActive(), \"CompanyRegistry: world not active\");\n        _;\n    }\n\n    modifier onlySigner {\n        require(LibAccess.isSigner(msg.sender), \"RegistrarRegistry: caller is not a signer\");\n        _;\n    }\n\n    constructor(CompanyRegistryConstructorArgs memory args) {\n        require(args.worldRegistry != address(0), \"CompanyRegistry: invalid world registry\"); \n        worldRegistry = IWorldRegistry(args.worldRegistry);\n    }\n\n    function version() external pure override returns(Version memory) {\n        return Version(1, 0);\n    }\n\n    /**\n     * @dev create a company and register it in this registry.\n     */\n    function createCompany(CreateCompanyArgs calldata args) external nonReentrant onlyActiveWorld returns (address) {\n        \n        FactoryStorage storage fs = LibFactory.load();\n        \n        //make sure we have the necessary implementations set\n        require(fs.proxyImplementation != address(0), \"CompanyRegistration: proxy implementation not set\");\n        require(fs.entityImplementation != address(0), \"CompanyRegistration: entity implementation not set\" );\n\n        //verify that the company owner has agreed to the registration terms\n        TermsSignatureVerification memory verification = TermsSignatureVerification({\n            terms: args.terms,\n            termsOwner: msg.sender,\n            owner: args.owner,\n            expiration: args.expiration,\n            ownerTermsSignature: args.ownerTermsSignature\n        });\n        LibRegistration.verifyNewEntityTermsSignature(verification);\n        \n        //clone the proxy and set the entity implementation on the proxy\n        address proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"CompanyRegistration: proxy cloning failed\");\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        //initialize the storage for the new proxy\n        CompanyInitArgs memory cArgs = CompanyInitArgs({\n            name: args.name,\n            owner: args.owner,\n            world: msg.sender,\n            vector: args.vector,\n            initData: args.initData\n        });\n        ICompany(proxy).init(cArgs);\n\n        //register the new proxy with registration terms\n        RegistrationWithTermsAndVector memory regArgs = RegistrationWithTermsAndVector({\n            entity: proxy,\n            terms: args.terms,\n            name: args.name,\n            termsOwner: msg.sender,\n            vector: args.vector\n        });\n\n        LibRegistration.registerRemovableVectoredEntity(regArgs);\n        \n        emit RegistryAddedEntity(proxy, args.owner);\n\n        return proxy;\n    }\n}"
    },
    "contracts/company/registry/CompanyRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\ncontract CompanyRegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/company/registry/ICompanyRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {IVectoredRegistry} from '../../interfaces/registry/IVectoredRegistry.sol';\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\n\nstruct CreateCompanyArgs {\n\n    //whether to send tokens to the owner or company contract\n    bool sendTokensToOwner;\n\n    //the company owner\n    address owner;\n\n    //the globally unique company name\n    string name;\n\n    //terms the company is registered with\n    RegistrationTerms terms;\n\n    //its derived vector address (based on World vector)\n    VectorAddress vector;\n\n    //initialization data\n    bytes initData;\n\n    //signature of the owner agreeing to the terms\n    bytes ownerTermsSignature;\n\n    //expiration of the signature\n    uint256 expiration;\n}\n\ninterface ICompanyRegistry is IRemovableRegistry, IVectoredRegistry {\n    function createCompany(CreateCompanyArgs calldata args) external returns (address);\n}"
    },
    "contracts/experience/instance/Experience.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRemovableEntity} from '../../base-types/entity/BaseRemovableEntity.sol';\nimport {VectorAddress, LibVectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {LibRemovableEntity, RemovableEntityStorage} from '../../libraries/LibRemovableEntity.sol';\nimport {IExperienceRegistry} from '../../experience/registry/IExperienceRegistry.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IExperience, ExperienceInitArgs, ExperienceInfo, JumpEntryRequest} from './IExperience.sol';\nimport {ICompany} from '../../company/instance/ICompany.sol';\nimport {ExperienceStorage, LibExperience} from './LibExperience.sol';\nimport {IPortalRegistry, AddPortalRequest} from '../../portal/IPortalRegistry.sol';\nimport {IPortalCondition} from '../../portal/IPortalCondition.sol';\nimport {IRemovable} from '../../interfaces/entity/IRemovable.sol';\n\nstruct ExperienceConstructorArgs {\n    address companyRegistry;\n    address experienceRegistry;\n    address portalRegistry;\n}\n\nstruct ExperienceInitData {\n    uint256 entryFee;\n    bytes connectionDetails;\n}\n\ncontract Experience is BaseRemovableEntity, IExperience {\n\n    using LibVectorAddress for VectorAddress;\n    \n    address public immutable companyRegistry;\n    IExperienceRegistry public immutable experienceRegistry;\n    IPortalRegistry public immutable portalRegistry;  \n\n    modifier onlyCompany {\n        require(LibRemovableEntity.load().termsOwner == msg.sender, 'Experience: Only company can call');\n        require(ICompany(msg.sender).isEntityActive(), 'Experience: Company is not active');\n        _;\n    }\n\n    modifier onlyPortalRegistry {\n        require(msg.sender == address(portalRegistry), 'Experience: Only portal registry can call');\n        _;\n    }\n\n    constructor(ExperienceConstructorArgs memory args) {\n        require(args.companyRegistry != address(0), 'Experience: Invalid company registry');\n        require(args.experienceRegistry != address(0), 'Experience: Invalid experience registry');\n        require(args.portalRegistry != address(0), 'Experience: Invalid portal registry');\n        companyRegistry = args.companyRegistry;\n        experienceRegistry = IExperienceRegistry(args.experienceRegistry);\n        portalRegistry = IPortalRegistry(args.portalRegistry);\n    }\n\n    receive() external payable {}\n\n    function upgrade(bytes calldata initData) public override onlyCompany {\n        experienceRegistry.upgradeEntity(initData);\n    }\n\n    function postUpgradeInit(bytes calldata initData) public override onlyRegistry {\n        //no-op\n    }\n\n    function version() public pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    \n    /**\n     * @dev initialize storage for a new experience. This can only be called by the experience registry\n     */\n    function init(ExperienceInitArgs memory args) public onlyRegistry {\n        require(bytes(args.name).length > 0, 'Experience: Invalid name');\n        require(args.company != address(0), 'Experience: Invalid company');\n        RemovableEntityStorage storage rs = LibRemovableEntity.load();\n        require(rs.termsOwner == address(0), 'Experience: Already initialized');\n\n        //true,true means both p and p_sub must be > 0\n        args.vector.validate(true, true);\n\n        LibEntity.load().name = args.name;   \n       \n        rs.active = true;\n        rs.termsOwner = args.company;\n        rs.vector = args.vector;\n        ExperienceInitData memory data = abi.decode(args.initData, (ExperienceInitData));\n        ExperienceStorage storage es = LibExperience.load();\n        es.entryFee = data.entryFee;\n        es.connectionDetails = data.connectionDetails;\n    }\n\n    /**\n     * @dev Initializes the portal for the experience. This can only be called by the experience registry\n     * and must be called AFTER initialization. This is because the portal registry will require that \n     * the caller (this experience) is registered, and registration requires certain information about \n     * the experience that is set during initialization.\n     */\n    function initPortal() public override nonReentrant onlyRegistry returns (uint256 portal) {\n        \n        ExperienceStorage storage es = LibExperience.load();\n        require(es.portalId == 0, 'Experience: Portal already initialized');\n        \n        //register new portal with the registry\n        portal = portalRegistry.addPortal(AddPortalRequest({\n            fee: es.entryFee\n        }));\n        es.portalId = portal;\n    }\n\n    /**\n     * @dev Returns the portal id attached to this experience\n     */\n    function portalId() public view override returns (uint256) {\n        return LibExperience.load().portalId;\n    }\n\n    /**\n     * @dev Deactivates the experience. This can only be called by the experience registry. This also\n     * deactivates the portal associated with the experience.\n     */\n    function deactivate(string calldata reason) public override(IRemovable, BaseRemovableEntity) onlyRegistry nonReentrant {\n        //deactivate portal THEN experience\n        portalRegistry.deactivatePortal(LibExperience.load().portalId, reason);\n        super.deactivate(reason);\n    }\n\n    /**\n     * @dev Reactivates the experience. This can only be called by the experience registry. This also\n     * reactivates the portal associated with the experience.\n     */\n    function reactivate() public override(IRemovable, BaseRemovableEntity) onlyRegistry nonReentrant {\n        //reactivate experience THEN portal\n        super.reactivate();\n        portalRegistry.reactivatePortal(LibExperience.load().portalId);\n        \n    }\n\n    /**\n     * @dev Removes the experience. This can only be called by the experience registry. This also\n     * removes the portal associated with the experience.\n     */\n    function remove(string calldata reason) public override(IRemovable, BaseRemovableEntity) onlyRegistry nonReentrant {\n        //remove portal THEN experience\n        portalRegistry.removePortal(LibExperience.load().portalId, reason);\n        super.remove(reason);\n    }\n\n    /**\n     * @dev Returns information about this experience\n     */\n    function getExperienceInfo(address experience) external view override returns (ExperienceInfo memory) {\n        return ExperienceInfo({\n            company: company(),\n            world: ICompany(company()).world(),\n            portalId: portalRegistry.getIdForExperience(experience)\n        });\n    }\n\n    /**\n     * @dev Returns the owning registry for this entity\n     */\n    function owningRegistry() internal view override returns (address) {\n        return address(experienceRegistry);\n    }\n\n    /**\n     * @dev Returns the company that controls this experience\n     */\n    function company() public view returns (address) {\n        return LibRemovableEntity.load().termsOwner;\n    }\n\n    /**\n     * @dev Returns the world that this experience is in\n     */\n    function world() public view returns (address) {\n        return ICompany(LibRemovableEntity.load().termsOwner).world();\n    }\n\n    /**\n     * @dev Returns the spatial vector address for this experience, which is derived\n     * from its parent company and world.\n     */\n    function vectorAddress() public view returns (VectorAddress memory) {\n        return LibRemovableEntity.load().vector;\n    }\n\n\n    /**\n     * @dev Returns the entry fee for this experience\n     */\n    function entryFee() public view returns (uint256) {\n        return LibExperience.load().entryFee;\n    }\n\n    /**\n     * @dev Adds a portal condition to the experience. This can only be called by the parent company contract\n     */\n    function addPortalCondition(address condition) public onlyCompany nonReentrant {\n        require(condition != address(0), 'Experience: Invalid condition');\n        portalRegistry.addCondition(IPortalCondition(condition));\n    }\n\n    /**\n     * @dev Removes the portal condition from the experience. This can only be called by the parent company contract\n     */\n    function removePortalCondition() public onlyCompany nonReentrant {\n        portalRegistry.removeCondition();\n    }\n\n    /**\n     * @dev Changes the portal fee for this experience. This can only be called by the parent company contract\n     */\n    function changePortalFee(uint256 fee) public onlyCompany nonReentrant {\n        portalRegistry.changePortalFee(fee);\n    }\n\n    /**\n     * @dev Returns information on how to connect to the experience. This is dependent on\n     * the client and company implementation and will likely need to be decoded by the\n     * company's infrastructure or API when a client attempts to jump into the experience.\n     */\n    function connectionDetails() public view returns (bytes memory)  {\n        return LibExperience.load().connectionDetails;\n    }\n\n    /**\n     * @dev Sets the connection details for the experience. This can only be called by the parent company contract\n     */\n    function setConnectionDetails(bytes memory details) public onlyCompany {\n        LibExperience.load().connectionDetails = details;\n    }\n\n    /**\n     * @dev Called when an avatar jumps into this experience. This can only be called by the \n     * portal registry so that any portal condition is evaluated before entering the experience.\n     */\n    function entering(JumpEntryRequest memory) public payable onlyPortalRegistry nonReentrant returns (bytes memory) {\n        ExperienceStorage storage s = LibExperience.load();\n        require(ICompany(LibRemovableEntity.load().termsOwner).isEntityActive(), 'Experience: Company is not active');\n        \n        if(s.entryFee > 0) {\n            require(msg.value == s.entryFee, \"Experience: incorrect entry fee\");\n            payable(address(LibRemovableEntity.load().termsOwner)).transfer(msg.value);\n        }\n        return s.connectionDetails;\n    }\n\n    /**\n     * @dev Withdraws funds from the experience. This can only be called by the parent company contract \n     * but should never be necessary since all funds for experience jumps are transferred to the company. \n     * This is really only necessary to recover funds mistakenely sent to this contract.\n     */\n    function withdraw(uint256 amount) public onlyCompany {\n        require(amount <= address(this).balance, 'Experience: Insufficient balance');\n        payable(msg.sender).transfer(amount);\n    }\n\n}"
    },
    "contracts/experience/instance/ExperienceProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../base-types/entity/EntityProxy.sol';\n\ncontract ExperienceProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/experience/instance/IExperience.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {IVectoredEntity} from '../../base-types/entity/IVectoredEntity.sol';\n\n/**\n * @dev Entry request when an avatar jumps into an experience\n */\nstruct JumpEntryRequest {\n    address sourceWorld;\n    address sourceCompany;\n    address avatar;\n}\n\nstruct ExperienceInitArgs {\n    string name;\n    address company;\n    VectorAddress vector;\n    bytes initData;\n}\n\n\nstruct ExperienceInfo {\n    address company;\n    address world;\n    uint256 portalId;\n}\n\n/**\n * @dev Interface for an experience. An experience is something a Company offers within a \n * World. Avatars portal into experiences to interact with them. Portaling into an Experience\n * may incur a fee paid by the Avatar. An Experience may have hooks that are called when an\n * Avatar enters the experience that can further evaluate the request outside of Portal conditions.\n */\ninterface IExperience is IVectoredEntity, IRemovableEntity {\n\n    event ConnectionDetailsChanged(bytes newDetails);\n    event JumpEntry(address indexed sourceWorld, address indexed sourceCompany, address indexed avatar, uint256 attachedFees);\n    event HookAdded(address indexed hook);\n    event HookRemoved(address indexed hook);\n    event ExperienceUpgraded(address indexed oldVersion, address indexed newVersion);\n    event PortalFeeChanged(uint256 newFee);\n    event ExperienceDeactivated();\n    \n\n    /**\n     * @dev Initializes the experience with the given arguments. This is called after cloning the experience\n     * proxy and assigning this contract as its logic. It can only be called once and by its registry.\n     */\n    function init(ExperienceInitArgs memory args) external;\n\n    /**\n     * @dev Initializes the portal for this experience. This is called after initialization and\n     * registration in the experience registry. It can only be called once and by its registry.\n     */\n    function initPortal() external returns (uint256 id);\n    \n    /**\n     * @dev Returns the company that controls this experience\n     */\n    function company() external view returns (address);\n\n    /**\n     * @dev Returns the world that this experience is in\n     */\n    function world() external view returns (address);\n\n    /**\n     * @dev Returns the portal id attached to this experience\n     */\n    function portalId() external view returns (uint256);\n\n    /**\n     * @dev Returns the entry fee for this experience\n     */\n    function entryFee() external view returns (uint256);\n\n    /**\n     * @dev Adds a portal condition to the experience. This can only be called by the parent company contract\n     */\n    function addPortalCondition(address condition) external;\n\n    /**\n     * @dev Removes the portal condition from the experience. This can only be called by the parent company contract\n     */\n    function removePortalCondition() external;\n\n    /**\n     * @dev Changes the portal fee for this experience. This can only be called by the parent company contract\n     */\n    function changePortalFee(uint256 fee) external;\n\n    /**\n     * @dev Returns information on how to connect to the experience. This is dependent on\n     * the client and company implementation and will likely need to be decoded by the\n     * company's infrastructure or API when a client attempts to jump into the experience.\n     */\n    function connectionDetails() external view returns (bytes memory);\n\n    /**\n     * @dev Sets the connection details for the experience. This can only be called by the parent company contract\n     */\n    function setConnectionDetails(bytes memory details) external;\n\n    /**\n     * @dev Called when an avatar jumps into this experience. This can only be called by the \n     * portal registry so that any portal condition is evaluated before entering the experience.\n     */\n    function entering(JumpEntryRequest memory request) external payable returns (bytes memory);\n\n    /**\n     * @dev Returns the experience info for the given experience address.\n     */\n    function getExperienceInfo(address exp) external view returns (ExperienceInfo memory);\n    \n}"
    },
    "contracts/experience/instance/LibExperience.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../../libraries/LibStorageSlots.sol';\n\nstruct ExperienceStorage {\n    //entry fee for the experience\n    uint256 entryFee;\n\n    //portal generated for the experience\n    uint256 portalId;\n\n    //connection details for the experience\n    bytes connectionDetails;\n}\n\nlibrary LibExperience {\n    function load() internal pure returns (ExperienceStorage storage ws) {\n        bytes32 slot = LibStorageSlots.EXPERIENCE_STORAGE;\n        assembly {\n            ws.slot := slot\n        }\n    }\n}"
    },
    "contracts/experience/registry/ExperienceRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseRemovableRegistry} from '../../base-types/registry/BaseRemovableRegistry.sol';\nimport {BaseVectoredRegistry} from '../../base-types/registry/BaseVectoredRegistry.sol';\nimport {LibRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {IExperienceRegistry, CreateExperienceArgs} from './IExperienceRegistry.sol';\nimport {IExperience, ExperienceInitArgs} from '../instance/IExperience.sol';\nimport {ICompanyRegistry} from '../../company/registry/ICompanyRegistry.sol';\nimport {ICompany} from '../../company/instance/ICompany.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IWorldRegistry} from '../../world/registry/IWorldRegistry.sol';\nimport {IWorld} from '../../world/instance/IWorld.sol';\nimport {LibRegistration, RegistrationWithTermsAndVector} from '../../libraries/LibRegistration.sol';\nimport {IPortalRegistry, AddPortalRequest} from '../../portal/IPortalRegistry.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\n\nstruct ExperienceRegistryConstructorArgs {\n    address companyRegistry;\n    address worldRegistry;\n}\n\n/**\n * @title ExperienceRegistry\n * @dev A registry for experiences. Experiences are created and controlled through company contracts.\n */\ncontract ExperienceRegistry is BaseVectoredRegistry, IExperienceRegistry {\n\n    ICompanyRegistry public immutable companyRegistry;\n    IWorldRegistry public immutable worldRegistry;\n\n    modifier onlyWorldCompanyChain(address company) {\n        //make sure caller is a registered and active world\n        require(worldRegistry.isRegistered(msg.sender), \"ExperienceRegistry: caller is not a registered world\");\n        require(IWorld(msg.sender).isEntityActive(), \"ExperienceRegistry: caller world is not active\");\n\n        //make sure company belongs to world\n        address cWorld = ICompany(company).world();\n        require(cWorld == msg.sender, \"ExperienceRegistry: company does not belong to calling world\");\n        //make sure company is active\n        require(ICompany(company).isEntityActive(), \"ExperienceRegistry: company is not active\");        \n        _;\n    }\n\n    constructor(ExperienceRegistryConstructorArgs memory args)  {\n        require(args.companyRegistry != address(0), 'ExperienceRegistry: Invalid company registry');\n        require(args.worldRegistry != address(0), 'ExperienceRegistry: Invalid world registry');\n        companyRegistry = ICompanyRegistry(args.companyRegistry);\n        worldRegistry = IWorldRegistry(args.worldRegistry);\n    }\n\n    function version() external pure override returns(Version memory) {\n        return Version(1, 0);\n    }\n\n\n    /**\n     * @dev Creates a new experience. This can only be called by a world who also owns the company requested as the \n     * experience owner. Note that only a company can intiate the experience creation through its parent\n     *  World contract; meaning, a World cannot act alone to create a new experience on behalf of a company.\n     */\n    function createExperience(CreateExperienceArgs calldata args) external onlyWorldCompanyChain(args.company) nonReentrant returns (address proxy, uint256 portalId) {\n        \n        FactoryStorage storage fs = LibFactory.load();\n        //make sure proxy and entity implementations are set\n        require(fs.proxyImplementation != address(0), \"ExperienceRegistry: proxy implementation not set\");\n        require(fs.entityImplementation != address(0), \"ExperienceRegistry: entity implementation not set\");\n        \n        //clone the experience proxy and set to current implementation\n        proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"RegistrarRegistration: proxy cloning failed\");\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        IExperience exp = IExperience(proxy);\n\n        //initialize the proxy prior to putting into the registry since registration will\n        //require some information that is derived from post-init fields\n        ExperienceInitArgs memory eArgs = ExperienceInitArgs({\n            name: args.name,\n            company: args.company,\n            vector: args.vector,\n            initData: args.initData\n        });\n        exp.init(eArgs);\n\n        //set up simple registration terms that allow the company to remove the experience\n        //1 day after deactivation.\n        RegistrationTerms memory terms = RegistrationTerms({\n                coveragePeriodDays: 0,\n                gracePeriodDays: 1,//set to 1 day so company can remove quickly if needed\n                fee: 0\n        });\n\n        RegistrationWithTermsAndVector memory regArgs = RegistrationWithTermsAndVector({\n            entity: proxy,\n            termsOwner: args.company,\n            terms: terms,\n            name: args.name,\n            vector: args.vector\n        });\n        LibRegistration.registerRemovableVectoredEntity(regArgs);\n\n        //now that it's registered, initialize the portal for the experience. This is necessary\n        //because the portal registr requires that the experience is registered and active.\n        portalId = exp.initPortal();\n        \n        emit RegistryAddedEntity(proxy, args.company);\n    }\n\n    /**\n     * @dev Deactivates an experience. This can only be called by the world registry. The company must be \n     * the owner of the experience. Company initiates this call through a world so that events are \n     * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function deactivateExperience(address company, address exp, string calldata reason) external onlyWorldCompanyChain(company) nonReentrant {\n        //company must be registered under world and the owner of experience and active\n        _verifyExpOwnership(company, exp);\n        LibEntityRemoval.deactivateEntity(IRemovableEntity(exp), reason);\n    }\n\n    /**\n     * @dev Reactivates an experience. This can only be called by the world registry. The company must be \n     * the owner of the experience. Company initiates this call through a world so that events are \n     * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function reactivateExperience(address company, address exp) external onlyWorldCompanyChain(company) nonReentrant {\n        //company must be registered under world and the owner of experience and active\n        _verifyExpOwnership(company, exp);\n        LibEntityRemoval.reactivateEntity(IRemovableEntity(exp));\n    }\n\n    /**\n     * @dev Removes an experience from the registry. This can only be called by the world. The company must be\n        * the owner of the experience. Company initiates this call through a world so that events are\n        * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function removeExperience(address company, address exp, string calldata reason) external onlyWorldCompanyChain(company) nonReentrant returns (uint256 portalId) {\n        _verifyExpOwnership(company, exp);\n        LibEntityRemoval.removeEntity(IRemovableEntity(exp), reason);\n        portalId = IExperience(exp).portalId();\n    }\n\n    //make sure the experience's parent company is the given company\n    function _verifyExpOwnership(address company, address exp) internal view {\n        IExperience e = IExperience(exp);\n        require(e.company() == company, \"ExperienceRemovalExt: company is not the owner of the experience\");\n    }\n\n}"
    },
    "contracts/experience/registry/ExperienceRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\ncontract ExperienceRegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/experience/registry/IExperienceRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {IVectoredRegistry} from '../../interfaces/registry/IVectoredRegistry.sol';\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\n\nstruct CreateExperienceArgs {\n    address company;\n    string name;\n    VectorAddress vector;\n    bytes initData;\n}\n\n\n/**\n * @title IExperienceRegistry\n * @dev The IExperienceRegistry contract is a registry for experiences. It is used to create, deactivate, and remove experiences.\n * All experience creations are initiated by a company contract but go through the company's parent\n * world contract. This is mostly to minimize off-chain logistics of monitoring experience state for \n * both companies and worlds.\n */\ninterface IExperienceRegistry is IRemovableRegistry, IVectoredRegistry {\n\n    /**\n     * @dev Creates a new experience.\n     */\n    function createExperience(CreateExperienceArgs calldata args) external returns (address, uint256);\n\n    /**\n     * @dev Deactivates an experience. This can only be called by a world. The company must be \n     * the owner of the experience. Company initiates this call through a world so that events are \n     * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function deactivateExperience(address company, address exp, string calldata reason) external;\n\n    /**\n     * @dev Reactivates an experience. This can only be called by a world. The company must be \n     * the owner of the experience. Company initiates this call through a world so that events are \n     * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function reactivateExperience(address company, address exp) external;\n\n    /**\n     * @dev Removes an experience from the registry. This can only be called by a world. The company must be\n        * the owner of the experience. Company initiates this call through a world so that events are\n        * emitted for both the company and world for tracking purposes. The company must also belong to the world.\n     */\n    function removeExperience(address company, address exp, string calldata reason) external returns (uint256 portalId);\n\n    \n}"
    },
    "contracts/interfaces/entity/IRegisteredEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nimport {Version} from '../../libraries/LibVersion.sol';\n\n\n/**\n * @title IRegisteredEntity\n * @dev The IRegisteredEntity contract is the base interface for all registered entities (Worlds, \n * Companies, Experiences, etc.). It provides a name and version for the entity.\n */\ninterface IRegisteredEntity {\n\n    /**\n     * @dev Returns the name of the entity.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the version of the entity.\n     */\n    function version() external view returns (Version memory);\n\n    /**\n     * @dev Upgrades the entity to the latest version of the entity logic, if applicable.\n     */\n    function upgrade(bytes calldata initData) external;\n\n    /**\n     * @dev Initializes the entity after an up or downgrade.\n     */\n    function postUpgradeInit(bytes calldata initData) external;\n}"
    },
    "contracts/interfaces/entity/IRemovable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n/**\n * @title IRemovable\n * @dev The IRemovable contract is the interface for entities that can be deactivated and removed.\n */\ninterface IRemovable {\n\n    event EntityDeactivated(address indexed by, string reason);\n    event EntityReactivated(address indexed by);\n    event EntityRemoved(address indexed by, string reason);\n\n    /**\n        * @dev Returns the address of the authority that can deactivate and remove the entity and set\n        * registration terms.\n     */\n    function termsOwner() external view returns (address);\n\n    /**\n     * @dev Deactivates the entity. This can only be called by the entity's registry but \n     * is initiated by the terms owner.\n     */\n    function deactivate(string memory reason) external;\n\n    /**\n     * @dev Reactivates the entity. This can only be called by the entity's registry but \n     * is initiated by the terms owner.\n     */\n    function reactivate() external;\n\n    /**\n     * @dev Removes the entity from the registry. This can only be called by the entity's registry but \n     * is initiated by the terms owner.\n     */\n    function remove(string memory reason) external;\n\n    /**\n     * @dev Determines if the entity is still active.\n     */\n    function isEntityActive() external view returns (bool);\n\n    /**\n     * @dev Determines if the entity is removed.\n     */\n    function isRemoved() external view returns (bool);\n}"
    },
    "contracts/interfaces/entity/IRemovableEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IRegisteredEntity} from \"./IRegisteredEntity.sol\";\nimport {IRemovable} from \"./IRemovable.sol\";\n\n/**\n * @title IRemovableEntity\n * @dev The IRemovableEntity contract is the interface for entities that can be deactivated and removed.\n */\ninterface IRemovableEntity is IRemovable, IRegisteredEntity {\n    \n}"
    },
    "contracts/interfaces/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n/**\n * @title IAccessControl\n * @dev The IAccessControl is the interface for managing roles and signers.\n */\ninterface IAccessControl {\n\n    event RoleChanged(bytes32 indexed role, address indexed account, bool indexed grant);\n    event SignerChanged(address signer, bool grant);\n    event OwnerChanged(address indexed owner, address indexed newOwner);\n\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function addSigners(address[] calldata signers) external;\n    function removeSigners(address[] calldata signers) external;\n    function isSigner(address account) external view returns (bool);\n    function isAdmin(address account) external view returns (bool);\n    function owner() external view returns (address);\n    function changeOwner(address newOwner) external;\n}"
    },
    "contracts/interfaces/registry/IEntityRemoval.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IRemovableEntity} from '../entity/IRemovableEntity.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\n\n/**\n * @title IEntityRemoval\n * @dev The IEntityRemoval contract is the interface for removing entities from a registry. There are \n * two ways entities can be deactivated and/or removed. The terms owner can deactivate or reactivated\n * entities at will. The terms owner can also remove an entity but only after a grace period following\n * deactivation. \n * \n * The second way is if the registration terms expire. In this case anyone can enforce deactivation\n * and ultimate removal.\n */\ninterface IEntityRemoval {\n\n    event RegistryDeactivatedEntity(address indexed entity, string reason);\n    event RegistryReactivatedEntity(address indexed entity);\n    event RegistryRemovedEntity(address indexed entity, string reason);\n    event RegistryEnforcedDeactivation(address indexed entity);\n    event RegistryEnforcedRemoval(address indexed entity);\n    event EntityRegistrationRenewed(address indexed entity, address indexed by);\n    \n    /** \n      @dev Called by the entity's terms owner to deactivate the entity. This is usually due to non-payment of fees or \n      * mallicious activity. The entity can be reactivated by the terms owner.\n     */\n    function deactivateEntity(IRemovableEntity entity, string calldata reason) external;\n\n    /**\n     * @dev Called by the entity's terms owner to reactivate the entity.\n     */\n    function reactivateEntity(IRemovableEntity entity) external;\n\n    /**\n     * @dev Removes an entity from the registry. Can only be called by the terms owner and only after deactivating\n     * the entity and waiting for the grace period to expire. A grace period must be set to given ample time\n     * for the entity to respond to deactivation.\n     */\n    function removeEntity(IRemovableEntity entity, string calldata reason) external;\n\n    /**\n     * @dev Returns the terms for the given entity address\n     */\n    function getEntityTerms(address addr) external view returns (RegistrationTerms memory);\n\n    /**\n     * @dev Returns whether an entity can be deactivated. Entities can only be deactivated\n     * if they are either expired or within the grace period\n     */\n    function canBeDeactivated(address addr) external view returns (bool);\n\n    /**\n     * @dev Returns whether an entity can be removed. Entities can only be removed if they are\n     * outside the grace period\n     */\n    function canBeRemoved(address addr) external view returns (bool);\n\n    /**\n     * @dev Enforces deactivation of an entity. Can be called by anyone but will only\n     * succeed if the entity is inside the grace period\n     */\n    function enforceDeactivation(IRemovableEntity addr) external;\n\n    /**\n     * @dev Enforces removal of an entity. Can be called by anyone but will only\n     * succeed if it is outside the grace period\n     */\n    function enforceRemoval(IRemovableEntity e) external;\n\n    /**\n     * @dev Returns the last renewal timestamp in seconds for the given address.\n     */\n    function getLastRenewal(address addr) external view returns (uint256);\n\n    /**\n     * @dev Returns the expiration timestamp in seconds for the given address.\n     */\n    function getExpiration(address addr) external view returns (uint256);\n\n    /**\n     * @dev Check whether an address is expired.\n     */\n    function isExpired(address addr) external view returns (bool);\n\n    /**\n     * @dev Check whether an address is in the grace period.\n     */\n    function isInGracePeriod(address addr) external view returns (bool);\n\n    /**\n     * @dev Renew an entity by paying the renewal fee.\n     */\n    function renewEntity(address addr) external payable;\n}"
    },
    "contracts/interfaces/registry/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAccessControl} from '../IAccessControl.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\n\n/**\n * @title IRegistry\n * @dev The IRegistry contract is the base interface for a registry of entities. It covers the setting \n * of proxy and implementation logic that registries use to clone with each entity registered. Note \n * that each registry implementation will have its own registration scheme since different arguments\n * are required for different entities.\n */\ninterface IRegistry is IAccessControl {\n\n\n    event RegistryEntityImplementationSet(address indexed implementation);\n    event RegistryProxyImplementationSet(address indexed implementation);\n    event RegistryAddedEntity(address indexed entity, address indexed owner);\n    event RegistryUpgradedEntity(address indexed entity, address indexed newImplementation);\n    event RegistryDowngradedEntity(address indexed entity, address indexed newImplementation);\n    \n    /**\n     * @dev Returns the version of the registry.\n     */\n    function version() external pure returns(Version memory);\n\n    /**\n     * @dev Sets the entity logic implementation to use when registering new entities.\n     */\n    function setEntityImplementation(address implementation) external;\n\n    /**\n     * @dev Returns the entity logic implementation.\n     */\n    function getEntityImplementation() external view returns (address);\n\n    /**\n     * @dev Gets the version of the entity logic implementation. Can be used \n     * detect upgradeability for the entity.\n     */\n    function getEntityVersion() external view returns (Version memory);\n\n    /**\n     * @dev Sets the entity proxy contract that is cloned for each new entity registered.\n     */\n    function setProxyImplementation(address implementation) external;\n\n    /**\n     * @dev Returns the entity proxy implementation.\n     */\n    function getProxyImplementation() external view returns (address);\n\n    /**\n     * @dev Checks if an entity is registered in the registry\n     */\n    function isRegistered(address addr) external view returns (bool);\n\n    /**\n     * @dev Gets the proxy address of any entity by its globally-uniqueu registered name. This\n     * will NOT apply to asset-type entities, which are not registered by name.\n     */\n    function getEntityByName(string calldata name) external view returns (address);\n\n    /**\n     * @dev Entity owners can request to upgrade the underlying logic of their entity contract. This is \n     * done through the registry so that arbitrary logic cannot be attached to entity proxies to circumvent\n     * protocol behaviors.\n     */\n    function upgradeEntity(bytes calldata initData) external;\n\n    /**\n     * @dev Entity owners can request to downgrade the underlying logic of their entity contract. This is\n     * done through the registry so that arbitrary logic cannot be attached to entity proxies to circumvent\n     * protocol behaviors. This is useful for emergency situations where a bug is found in the latest logic.\n     */\n    function downgradeEntity(bytes calldata initData) external;\n}"
    },
    "contracts/interfaces/registry/IRemovableRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IRegistry} from './IRegistry.sol';\nimport {IEntityRemoval} from './IEntityRemoval.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\n\n\nstruct ChangeEntityTermsArgs {\n    //the entity whose terms are changing\n    address entity;\n\n    //signature of one of the entity's signers authorizing the change\n    bytes entitySignature;\n\n    //expiration for the signature\n    uint256 expiration;\n\n    //new terms\n    RegistrationTerms terms;\n}\n\n/**\n * @title IRemovableRegistry\n * @dev The IRemovableRegistry contract is the interface for registries that can remove entities.\n */\ninterface IRemovableRegistry is IRegistry, IEntityRemoval {\n\n\n    event RegistrarDeactivatedWorld(address indexed world, string reason);\n    event RegistrarReactivatedWorld(address indexed world);\n    event RegistrarRemovedWorld(address indexed world, string reason);\n    \n    /**\n     * @dev A terms owner can change an entity's terms but only if an entity signer agrees to \n     * the change.\n     */\n    function changeEntityTerms(ChangeEntityTermsArgs calldata args) external;\n}"
    },
    "contracts/interfaces/registry/ITermsOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\n/**\n    * @title ITermsOwner\n    * @dev The ITermsOwner contract is the interface for authorities that determine an \n    * entity's active state and registration terms.\n */\ninterface ITermsOwner {\n\n    /**\n     * @dev Determines if the terms owner is still active.\n     */\n    function isStillActive() external view returns (bool);\n\n    /**\n     * @dev Checks whether the given address is a signer for the terms owner.\n     */\n    function isTermsOwnerSigner(address a) external view returns (bool);\n}"
    },
    "contracts/interfaces/registry/IVectoredRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IRegistry} from './IRegistry.sol';\n\n/**\n    * @title IVectoredRegistry\n    * @dev The IVectoredRegistry contract is the interface for a registry of entities that can be\n    * accessed by a vector address.\n */\ninterface IVectoredRegistry is IRegistry {\n\n    /**\n     * @dev Find the entity address by its vector address.\n     */\n    function getEntityByVector(VectorAddress calldata vector) external view returns (address);\n}"
    },
    "contracts/libraries/LibAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibRoles} from './LibRoles.sol';\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {IAccessControl} from '../interfaces/IAccessControl.sol';\n\n \nstruct AccessStorage {\n    //the primary owner of the contract\n    address owner;\n\n    //roles mapped to addresses that have the role\n    mapping(bytes32 => mapping(address => bool)) roles;\n}\n\n/**\n * @title LibAccess\n * @dev Access control logic is not likely to change or be upgradeable. It is, however, a highly used library\n * that incurs a lot of gas costs to maintain as a separate module. Early dev version used an access module\n * and it proved to add too much overhead for just verifying access. So it was moved into this library to\n * reduce gas costs and simplify the codebase.\n */\n\nlibrary LibAccess {\n\n    function load() internal pure returns (AccessStorage storage a) {\n        bytes32 slot = LibStorageSlots.ACCESS_STORAGE;\n        assembly {\n            a.slot := slot\n        }\n    }\n\n    /**\n     * @dev Initializes the access control contract with an owner and a list of admins. Owners\n     * and admins are also given signing privileges.\n     */\n    function initAccess(address _owner, address[] calldata admins) external {\n        AccessStorage storage s = load();\n        require(s.owner == address(0), \"Already initialized\");\n        require(_owner != address(0), \"Owner cannot be zero address\");\n        s.owner = _owner;\n\n        //access primary map once time for each role type to save gas\n        mapping(address => bool) storage ownerRoles = s.roles[LibRoles.ROLE_OWNER];\n        mapping(address => bool) storage adminRoles = s.roles[LibRoles.ROLE_ADMIN];\n        mapping(address => bool) storage signerRoles = s.roles[LibRoles.ROLE_SIGNER];\n\n        //set owner privs\n        ownerRoles[_owner] = true;\n        adminRoles[_owner] = true;\n        signerRoles[_owner] = true;\n        emit IAccessControl.OwnerChanged(address(0), _owner);\n        emit IAccessControl.RoleChanged(LibRoles.ROLE_ADMIN, _owner, true);\n        emit IAccessControl.RoleChanged(LibRoles.ROLE_SIGNER, _owner, true);\n        for(uint256 i=0;i<admins.length;++i) {\n            //set admin privs\n            require(admins[i] != address(0), \"Admins cannot be zero address\");\n            adminRoles[admins[i]] = true;\n            emit IAccessControl.RoleChanged(LibRoles.ROLE_ADMIN, admins[i], true);\n            signerRoles[admins[i]] = true;\n            emit IAccessControl.RoleChanged(LibRoles.ROLE_SIGNER, admins[i], true);\n        }\n    }\n\n    /**\n     * @dev Returns the owner of the contract.\n     */\n    function owner() internal view returns (address) {\n        AccessStorage storage s = load();\n        return s.owner;\n    }\n\n    /**\n     * @dev Sets the owner of the contract. Should only be called by the current owner.\n     */\n    function setOwner(address o) external {\n        require(o != address(0), \"AccessControl: cannot set owner to zero address\");\n        AccessStorage storage s = load();\n        s.owner = o;\n        s.roles[LibRoles.ROLE_OWNER][o] = true;\n        s.roles[LibRoles.ROLE_ADMIN][o] = true;\n        emit IAccessControl.OwnerChanged(owner(), o);\n    }\n\n    /**\n     * @dev Adds a list of admins to the contract. Should only be called by an admin\n     */\n    function addSigners(address[] calldata signers) external {\n        AccessStorage storage s = load();\n        mapping(address => bool) storage signerRoles = s.roles[LibRoles.ROLE_SIGNER];\n        for(uint256 i=0;i<signers.length;++i) {\n            require(signers[i] != address(0), \"SharedLibAccess: cannot add zero address signers\");\n            signerRoles[signers[i]] = true;\n            emit IAccessControl.RoleChanged(LibRoles.ROLE_SIGNER, signers[i], true);\n        }\n    }\n\n    /**\n     * @dev Removes a list of admins from the contract. Should only be called by an admin\n     */\n    function removeSigners(address[] calldata signers) external {\n        AccessStorage storage s = load();\n        mapping(address => bool) storage signerRoles = s.roles[LibRoles.ROLE_SIGNER];\n        for(uint256 i=0;i<signers.length;++i) {\n            require(signers[i] != address(0), \"SharedLibAccess: cannot remove zero address signers\");\n            delete signerRoles[signers[i]];\n            emit IAccessControl.RoleChanged(LibRoles.ROLE_SIGNER, signers[i], false);\n        }\n    }\n\n    /**\n     * @dev Returns true if the given address is a registered signer\n     */\n    function isSigner(address a) external view returns (bool) {\n        AccessStorage storage s = load();\n        return s.roles[LibRoles.ROLE_SIGNER][a];\n    }\n\n    /**\n     * @dev Returns true if the given address is a registered admin\n     */\n    function isAdmin(address a) external view returns (bool) {\n        AccessStorage storage s = load();\n        return s.roles[LibRoles.ROLE_ADMIN][a];\n    }\n\n    /**\n     * @dev Returns true if the given address has the specified role\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool) {\n        AccessStorage storage s = load();\n        return s.roles[role][account];\n    }\n\n    /**\n     * @dev Grants a role to an address. Should only be called by an admin.\n     */\n    function grantRole(bytes32 role, address account) external {\n        require(account != address(0), \"AccessControl: cannot grant role to zero address\");\n        AccessStorage storage s = load();\n        s.roles[role][account] = true;\n        emit IAccessControl.RoleChanged(role, account, true);\n    }\n\n    /**\n     * @dev Revokes a role from an address. Should only be called by an admin.\n     */\n    function revokeRole(bytes32 role, address account) external {\n        require(account != address(0), \"AccessControl: cannot revoke role from zero address\");\n        AccessStorage storage s = load();\n        s.roles[role][account] = false;\n        emit IAccessControl.RoleChanged(role, account, false);\n    }\n}"
    },
    "contracts/libraries/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../libraries/LibStorageSlots.sol';\nimport {IAssetCondition} from '../asset/IAssetCondition.sol';\n\n/**\n * Storage structure for assets.\n */\nstruct AssetStorage {\n    \n    //the contract address on the origin chain\n    address originAddress;\n\n    //the address allowed to mint new tokens\n    address issuer;\n\n    //custom view/use conditions\n    IAssetCondition condition;\n\n    //original chain id\n    uint256 originChainId;\n\n    string symbol;\n}\n\nlibrary LibAsset {\n    function load() internal pure returns (AssetStorage storage store) {\n        bytes32 slot = LibStorageSlots.ASSET_STORAGE;\n        assembly {\n            store.slot := slot\n        }\n    }\n}"
    },
    "contracts/libraries/LibAvatar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {LinkedList} from './LibLinkedList.sol';\n\n/**\n * @dev wearable structure assumed to be an NFT asset contract with unique token id. The tokenId\n * is the XR chain id, not the original NFT token id.\n */\nstruct Wearable {\n    address asset;\n    uint256 tokenId;\n}\n\n\n//storage for avatar\nstruct AvatarStorage {\n\n    //whether the avatar owner allows NFTs to be minted from any company vs restricting \n    //minting to only companies who own the experience the Avatar is currently in.\n    bool canReceiveTokensOutsideExperience;\n\n    //address of the experience where the avatar is located\n    address currentExperience;\n\n    //nonces used by companies to sign jump requests.\n    mapping(address => uint256) companyNonces;\n\n    //owner nonce used to sign delegated jump requests (those where company pays txn fees)\n    uint256 ownerNonce;\n\n    //custom avatar client appearance data, if applicable\n    bytes appearanceDetails;\n\n    //list of wearables the avatar is wearing\n    LinkedList list;\n}\n\nlibrary LibAvatar {\n\n    function load() internal pure returns (AvatarStorage storage ds) {\n        bytes32 slot = LibStorageSlots.AVATAR_STORAGE;\n        assembly {\n            ds.slot := slot\n        }\n    }\n\n}"
    },
    "contracts/libraries/LibClone.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\n//just uses cloning technique to copy proxies\nlibrary LibClone {\n    function clone(address impl) internal returns (address proxy){\n        require(impl != address(0), \"LibClone: implementation cannot be zero address\");\n        // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n        bytes20 targetBytes = bytes20(impl);\n        assembly {\n            let c := mload(0x40)\n            mstore(c, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(c, 0x14), targetBytes)\n            mstore(add(c, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            proxy := create(0, c, 0x37)\n        }\n    }\n}"
    },
    "contracts/libraries/LibEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\n\n//all entities have at least a name\nstruct EntityStorage {\n    string name;\n}\n\nlibrary LibEntity {\n    \n    function load() internal pure returns (EntityStorage storage ds) {\n        bytes32 slot = LibStorageSlots.ENTITY_STORAGE;\n        assembly {\n            ds.slot := slot\n        }\n    }\n}"
    },
    "contracts/libraries/LibEntityRemoval.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nimport {IEntityRemoval} from \"../interfaces/registry/IEntityRemoval.sol\";\nimport {IRemovableEntity} from '../interfaces/entity/IRemovableEntity.sol';\nimport {RegistrationTerms} from './LibRegistration.sol';\nimport {LibStringCase} from './LibStringCase.sol';\nimport {VectorAddress} from './LibVectorAddress.sol';\nimport {RegistrationStorage, TermedRegistration, LibRegistration} from './LibRegistration.sol';\n\n/**\n * @title LibEntityRemoval\n * @dev Library for managing the removal of entities from the registry. Entities can be deactivated, reactivated, and removed\n * by the terms owner. Entities can also be enforced to deactivate or remove by anyone if they are outside the grace period.\n */\nlibrary LibEntityRemoval {\n\n    using LibStringCase for string;\n\n    uint256 constant DAY = 1 days;\n\n    modifier nonReentrant {\n        RegistrationStorage storage rs = LibRegistration.load();\n        require(rs.reentrancyLock == 0, \"EntityRemovalExt: reentrant call\");\n        rs.reentrancyLock = 1;\n        _;\n        rs.reentrancyLock = 0;\n    }\n\n    /** \n      @dev Intiiated by the entity's terms owner to deactivate the entity. This is usually due to non-payment of fees or \n      * mallicious activity. The entity can be reactivated by the terms owner.\n     */\n    function deactivateEntity(IRemovableEntity entity, string calldata reason) public nonReentrant {\n        \n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage reg = rs.removableRegistrations[address(entity)];\n\n        //establish the grace period starting time\n        reg.deactivationTime = block.timestamp;\n\n        //tell the entity to deactivate itself for the given reason\n        entity.deactivate(reason);\n        emit IEntityRemoval.RegistryDeactivatedEntity(address(entity), reason);\n    }\n\n    /**\n     * @dev Initiated by the entity's terms owner to reactivate the entity.\n     */\n    function reactivateEntity(IRemovableEntity entity) public nonReentrant {\n        \n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage reg = rs.removableRegistrations[address(entity)];\n\n        //clear the grace period clock\n        reg.deactivationTime = 0;\n\n        //tell the entity to reactivate itself\n        entity.reactivate();\n        emit IEntityRemoval.RegistryReactivatedEntity(address(entity));\n    }\n\n    /**\n     * @dev Removes an entity from the registry. Can only be called by the terms owner and only after deactivating\n     * the entity and waiting for the grace period to expire. A grace period must be set to given ample time\n     * for the entity to respond to deactivation.\n     */\n    function removeEntity(IRemovableEntity entity, string calldata reason) public nonReentrant {\n        _removeEntity(entity, reason);\n    }\n\n    function _removeEntity(IRemovableEntity entity, string calldata reason) private {\n        \n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage reg = rs.removableRegistrations[address(entity)];\n\n        //make sure we've established the grace period countdown (i.e. deactivated first)\n        require(reg.deactivationTime > 0, \"EntityRemovalExt: entity must be deactivated before removal\");\n        \n        //make sure we've exhausted the grace period\n        require(block.timestamp > reg.deactivationTime + (reg.terms.gracePeriodDays * DAY), \"EntityRemovalExt: deactivation grace period has not expired\");\n        \n        //tell the entity they're being removed\n        entity.remove(reason);\n\n        //delete the entries\n        delete rs.removableRegistrations[address(entity)];\n        string memory nm = entity.name().lower();\n        delete rs.registrationsByName[nm];\n        emit IEntityRemoval.RegistryRemovedEntity(address(entity), reason);\n    }\n\n    function removeEntityWithVector(IRemovableEntity entity, VectorAddress memory vector, string calldata reason) public nonReentrant {\n        _removeEntity(entity, reason);\n        LibRegistration.removeVectorRegistration(vector);\n        emit IEntityRemoval.RegistryRemovedEntity(address(entity), reason);\n    }\n\n    /**\n     * @dev Returns the terms for the given entity address\n     */\n    function getEntityTerms(address addr) public view returns (RegistrationTerms memory) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        return rs.removableRegistrations[addr].terms;\n    }\n\n    /**\n     * @dev Returns whether an entity can be deactivated. Entities can only be deactivated\n     * if they are either expired or within the grace period\n     */\n    function canBeDeactivated(address addr) public view returns (bool) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage reg = rs.removableRegistrations[addr];\n\n        //If there are no actual registration terms or coverage period, then \n        //entity cannot be forced into deactivation.\n        if(reg.terms.coveragePeriodDays == 0) {\n            return false;\n        }\n\n        //but if the terms have expired\n        uint256 expTime = reg.lastRenewed + (reg.terms.coveragePeriodDays * DAY);\n\n        //then it should be allowable to deactivate the entity\n        return block.timestamp >= expTime;\n    }\n\n    /**\n     * @dev Returns whether an entity can be removed. Entities can only be removed if they are\n     * outside the grace period\n     */\n    function canBeRemoved(address addr) public view returns (bool) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage reg = rs.removableRegistrations[addr];\n\n        //no registration coverage means cannot be removed\n        if(reg.terms.coveragePeriodDays == 0) {\n            return false;\n        }\n\n        //if the entity was never deactivated, then cannot be removed\n        if(reg.deactivationTime == 0){\n            return false;\n        }\n\n        //can only be removed if grace period has expired\n        uint256 expTime = reg.deactivationTime + (reg.terms.gracePeriodDays * DAY);\n        return block.timestamp >= expTime;\n    }\n\n    /**\n     * @dev Enforces deactivation of an entity. Can be called by anyone but will only\n     * succeed if the entity is inside the grace period\n     */\n    function enforceDeactivation(IRemovableEntity addr) public nonReentrant {\n\n        //make sure we can force deactivation\n        require(canBeDeactivated(address(addr)), \"EntityRemovalExt: Entity cannot be deactivated\");\n\n        //tell the entity to deactivate itself\n        addr.deactivate(\"Deactivation enforced due to terms expiration\");\n\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[address(addr)];\n\n        //start the grace period countdown\n        tr.deactivationTime = block.timestamp;\n        emit IEntityRemoval.RegistryEnforcedDeactivation(address(addr));\n    }\n\n    /**\n     * @dev Enforces removal of an entity. Can be called by anyone but will only\n     * succeed if it is outside the grace period\n     */\n    function enforceRemoval(IRemovableEntity e) public nonReentrant {\n        _enforceRemoval(e);\n\n    }\n\n    function _enforceRemoval(IRemovableEntity e) private {\n        address addr = address(e);\n        //make sure we can force removal\n        require(canBeRemoved(addr), \"StatusChangesExt: entity cannot be removed\");\n        RegistrationStorage storage rs = LibRegistration.load();\n\n        //tell entity that it's being removed\n        e.remove(\"Removal enforced due to terms expiration\");\n\n        //delete entries\n        delete rs.removableRegistrations[addr];\n        string memory nm = e.name().lower();\n        delete rs.registrationsByName[nm];\n        emit IEntityRemoval.RegistryEnforcedRemoval(addr);\n    }\n\n    function enforceRemovalWithVector(IRemovableEntity e, VectorAddress memory vector) public nonReentrant {\n        _enforceRemoval(e);\n        LibRegistration.removeVectorRegistration(vector);\n        emit IEntityRemoval.RegistryEnforcedRemoval(address(e));\n    }\n\n    /**\n     * @dev Returns the last renewal timestamp in seconds for the given address.\n     */\n    function getLastRenewal(address addr) public view returns (uint256) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[addr];\n        return tr.lastRenewed;\n    }\n\n    /**\n     * @dev Returns the expiration timestamp in seconds for the given address.\n     */\n    function getExpiration(address addr) public view returns (uint256) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[addr];\n\n        //no coverage means no expiration possible\n        if(tr.terms.coveragePeriodDays == 0){\n            return 0;\n        }\n        //otherwise expiration is the last renewal time plus the coverage period\n        return tr.lastRenewed + tr.terms.coveragePeriodDays * DAY;\n    }\n\n    /**\n     * @dev Check whether an address is expired.\n     */\n    function isExpired(address addr) public view returns (bool) {\n        uint256 exp = getExpiration(addr);\n\n        //is the current block time is greater than the expiration time\n        return exp > 0 && block.timestamp >= exp;\n    }\n\n    /**\n     * @dev Check whether an address is in the grace period.\n     */\n    function isInGracePeriod(address addr) public view returns (bool) {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[addr];\n        //no coverage, no grace period\n        if(tr.terms.coveragePeriodDays == 0){\n            return false;\n        }\n\n        //expiration time of the registration\n        uint256 exTime = tr.lastRenewed + tr.terms.coveragePeriodDays * DAY;\n\n        //the grace period\n        uint graceExp = exTime + tr.terms.gracePeriodDays * DAY;\n\n        //we're in the grace period if the coverage has expired but we're still within the grace period\n        bool expired = block.timestamp >= exTime;\n        return expired && block.timestamp < graceExp;\n    }\n\n    /**\n     * @dev Renew an entity by paying the renewal fee.\n     */\n    function renewEntity(address addr) public nonReentrant {\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[addr];\n\n        //no renewal allowed if no coverage period\n        require(tr.terms.coveragePeriodDays > 0, \"RenewalExt: Entity does not have renewal terms\");\n\n        //make sure sufficient fee included in registration renewal.\n        uint256 fee = tr.terms.fee;\n        require(msg.value >= fee, \"RenewalExt: Insufficient funds for new terms\");\n\n        //reset the entity's registration time\n        tr.lastRenewed = block.timestamp;\n\n        if(tr.deactivationTime > 0){\n            //if previously deactivated, reactivate the entity\n            IRemovableEntity(addr).reactivate();\n            //clear deactivation.\n            tr.deactivationTime = 0;\n        }\n        \n        uint256 refund = 0;\n        unchecked {\n            refund = msg.value - fee;\n        }\n\n        //send funds to the terms owner for the renewal.\n        payable(tr.owner).transfer(fee);\n        if(refund > 0) {\n            //return any excess funds to the sender\n            payable(msg.sender).transfer(refund);\n        }\n        \n        emit IEntityRemoval.EntityRegistrationRenewed(addr, msg.sender);\n    }\n\n}"
    },
    "contracts/libraries/LibERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\n\n//erc20-specific storage fields\nstruct ERC20Storage {\n    uint8 decimals;\n    uint256 maxSupply;\n    uint256 totalSupply;\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowances;\n}\n\nlibrary LibERC20 {\n    function load() internal pure returns (ERC20Storage storage store) {\n        bytes32 slot = LibStorageSlots.ERC20_ASSET_STORAGE;\n        assembly {\n            store.slot := slot\n        }\n    }\n}"
    },
    "contracts/libraries/LibERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n//NFT specific storage fields\nstruct ERC721Storage {\n    string baseURI;\n    uint256 tokenIdCounter;\n    mapping(uint256 => address) owners;\n    mapping(address => uint256) balances;\n    mapping(uint256 => address) tokenApprovals;\n\n    mapping(address => mapping(address => bool)) operatorApprovals;\n}\n\nlibrary LibERC721 {\n\n    function load() internal pure returns (ERC721Storage storage s) {\n        bytes32 position = LibStorageSlots.ERC721_ASSET_STORAGE;\n        assembly {\n            s.slot := position\n        }\n    }\n    \n    /**\n     * @dev require that the given token id has an owner and if so, return the owner address. Revert otherwise.\n     */\n    function requireOwned(uint256 tokenId) internal view returns (address) {\n        ERC721Storage storage store = load();\n        address owner = store.owners[tokenId];\n        if (owner == address(0)) {\n            revert IERC721Errors.ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return load().operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view returns (address) {\n        return load().owners[tokenId];\n    }\n    \n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view returns (address) {\n        return load().tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal returns (address) {\n        address from = _ownerOf(tokenId);\n        ERC721Storage storage s = load();\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                s.balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                s.balances[to] += 1;\n            }\n        }\n\n        s.owners[tokenId] = to;\n\n        emit IERC721.Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n   \n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert IERC721Errors.ERC721NonexistentToken(tokenId);\n            } else {\n                revert IERC721Errors.ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert IERC721Errors.ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit IERC721.Approval(owner, to, tokenId);\n            }\n        }\n        ERC721Storage storage s = load();\n        s.tokenApprovals[tokenId] = to;\n    }\n}"
    },
    "contracts/libraries/LibExperience.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\n\n//experience-specific storage\nstruct ExperienceStorage {\n\n    //the fee for the experience portal\n    uint256 entryFee;\n\n    //how to connect to the details, if applicable\n    bytes connectionDetails;\n}\n\nlibrary LibExperience {\n    function load() internal pure returns (ExperienceStorage storage ws) {\n        bytes32 slot = LibStorageSlots.EXPERIENCE_STORAGE;\n        assembly {\n            ws.slot := slot\n        }\n    }\n}"
    },
    "contracts/libraries/LibFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {Version} from './LibVersion.sol';\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {IRegisteredEntity} from '../interfaces/entity/IRegisteredEntity.sol';\nimport {IRegistry} from '../interfaces/registry/IRegistry.sol';\n\n// Storage related to proxy/entity cloning for registries\nstruct FactoryStorage {\n\n    //the current entity logic contract that gets assigned to the proxy\n    address entityImplementation;\n\n    //the proxy contract that gets cloned for each entity created\n    address proxyImplementation;\n\n    //the current version of the entity created by the registry.\n    Version entityVersion;\n}\n\nlibrary LibFactory {\n\n    function load() internal pure returns (FactoryStorage storage ds) {\n        bytes32 slot = LibStorageSlots.FACTORY_STORAGE;\n        assembly {\n            ds.slot := slot\n        }\n    }\n\n    /**\n     * @dev Sets the proxy implementation to clone for each entity created. This should\n     * be restricted to admins.\n     */\n    function setProxyImplementation(address _proxyImplementation) external {\n        FactoryStorage storage ds = load();\n        ds.proxyImplementation = _proxyImplementation;\n        emit IRegistry.RegistryProxyImplementationSet(_proxyImplementation);\n    }\n\n    /**\n     * @dev Gets the current proxy implementation to clone for each entity created.\n     */\n    function getProxyImplementation() external view returns (address) {\n        FactoryStorage storage ds = load();\n        return ds.proxyImplementation;\n    }\n\n    /**\n     * @dev Sets the entity implementation to clone for each entity created. This should\n     * be restricted to admins.\n     */\n    function setEntityImplementation(address _entityImplementation) external {\n        FactoryStorage storage ds = load();\n        ds.entityImplementation = _entityImplementation;\n        Version memory v = IRegisteredEntity(_entityImplementation).version();\n        ds.entityVersion = v;\n        emit IRegistry.RegistryEntityImplementationSet(_entityImplementation);\n    }\n\n    /**\n     * @dev Gets the current entity implementation to clone for each entity created.\n     */\n    function getEntityImplementation() external view returns (address) {\n        FactoryStorage storage ds = load();\n        return ds.entityImplementation;\n    }\n\n    /**\n     * @dev Gets the current entity version.\n     */\n    function getEntityVersion() external view returns (Version memory) {\n        FactoryStorage storage ds = load();\n        return ds.entityVersion;\n    }\n}"
    },
    "contracts/libraries/LibLinkedList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\nimport {Wearable} from './LibAvatar.sol';\n\n/**\n * @dev node within a linked list structure where next/prev values are hashes of \n * wearable asset/tokenId\n */\nstruct Node {\n        Wearable data;\n        bytes32 prev;\n        bytes32 next;\n}\n\n/**\n * @dev LinkedList structure to store wearable assets\n */\nstruct LinkedList {\n\n        bytes32 head;\n        bytes32 tail;\n        uint256 size;\n        uint256 maxSize;\n        //mapping of asset/tokenId hash to node\n        mapping(bytes32 => Node) nodes;\n}\n\n/**\n * @dev Library to manage linked list of wearables\n */\nlibrary LibLinkedList {\n\n    /**\n     * @dev Insert a new wearable into the linked list\n     */\n    function insert(LinkedList storage list, Wearable memory wearable) external {\n        //make sure list isn't full\n        require(list.size < list.maxSize, \"List is full\");\n\n        //hash the asset/tokenId pair\n        bytes32 wHash = keccak256(abi.encode(wearable.asset, wearable.tokenId));\n        require(list.nodes[wHash].data.asset == address(0), \"Wearable already in list\");\n\n        //create node to hold wearable and pointers\n        Node memory newNode = Node({\n            data: wearable,\n            prev: list.tail,\n            next: bytes32(0)\n        });\n\n        //if list is empty\n        if (list.size == 0) {\n            //just set head tail to new node\n            list.head = wHash;\n            list.tail = wHash;\n        } else {\n            //otherwise insert at end of list\n            list.nodes[list.tail].next = wHash;\n            list.tail = wHash;\n        }\n\n        //store node by its hash\n        list.nodes[wHash] = newNode;\n        list.size++;\n    }\n\n    /**\n     * @dev remove a wearable from the list\n     */\n    function remove(LinkedList storage list, Wearable memory wearable) external {\n        bytes32 wHash = keccak256(abi.encode(wearable.asset, wearable.tokenId));\n        if(list.nodes[wHash].data.asset == address(0)) {\n            return;\n        }\n\n        Node memory node = list.nodes[wHash];\n\n        if (node.prev != bytes32(0)) {\n            list.nodes[node.prev].next = node.next;\n        } else {\n            list.head = node.next;\n        }\n\n        if (node.next != bytes32(0)) {\n            list.nodes[node.next].prev = node.prev;\n        } else {\n            list.tail = node.prev;\n        }\n\n        delete list.nodes[wHash];\n        list.size--;\n    }\n\n    /**\n     * @dev check if the list contains a wearable\n     */\n    function contains(LinkedList storage list, Wearable memory wearable) external view returns (bool) {\n        (address data, uint256 tokenId) = (wearable.asset, wearable.tokenId);\n        require(data != address(0), \"Invalid address\");\n        require(tokenId > 0, \"Invalid token id\");\n        bytes32 wHash = keccak256(abi.encode(data, tokenId));\n        return list.nodes[wHash].data.asset != address(0);\n    }\n\n    /**\n     * @dev Get all wearables in the list. The list has a max capacity to prevent\n     * gas exhaustion for read-only calls.\n     */\n    function getAllItems(LinkedList storage list) external view returns (Wearable[] memory) {\n        Wearable[] memory items = new Wearable[](list.size);\n        bytes32 current = list.head;\n        for (uint256 i = 0; i < list.size; i++) {\n            items[i] = list.nodes[current].data;\n            current = list.nodes[current].next;\n        }\n        return items;\n    }\n}"
    },
    "contracts/libraries/LibPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {IExperience} from '../experience/instance/IExperience.sol';\nimport {IPortalCondition} from '../portal/IPortalCondition.sol';\n\n//public portal information\nstruct PortalInfo {\n\n    //destination experience for the portal\n    IExperience destination;\n\n    //any condition that has been applied to the portal\n    IPortalCondition condition;\n\n    //fee to make the jump\n    uint256 fee;\n\n    //whether the portal is active\n    bool active;\n}\n\nstruct PortalRegistryStorage {\n    //portals by portal id\n    mapping(uint256 => PortalInfo) portals;\n\n    //portal IDs by destination vector address hash\n    mapping(bytes32 => uint256)  portalIdsByVectorHash;\n\n    //portal IDs by destination experience address\n    mapping(address => uint256)  portalIdsByExperience;\n\n    //portal id counter\n    uint256 nextPortalId;\n}\n\nlibrary LibPortal {\n\n    function load() internal pure returns (PortalRegistryStorage storage store) {\n        bytes32 slot = LibStorageSlots.PORTAL_STORAGE;\n        assembly {\n            store.slot := slot\n        }\n    }\n}"
    },
    "contracts/libraries/LibRegistration.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../libraries/LibStorageSlots.sol';\nimport {IRegisteredEntity} from '../interfaces/entity/IRegisteredEntity.sol';\nimport {LibStringCase} from '../libraries/LibStringCase.sol';\nimport {VectorAddress, LibVectorAddress} from '../libraries/LibVectorAddress.sol';\nimport {ITermsOwner} from '../interfaces/registry/ITermsOwner.sol';\nimport {IAccessControl} from '../interfaces/IAccessControl.sol';\nimport {ChangeEntityTermsArgs} from '../interfaces/registry/IRemovableRegistry.sol';\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\n\n\nstruct RegistrationTerms {\n    uint16 coveragePeriodDays;\n    uint16 gracePeriodDays;\n    uint256 fee;\n}\n\n//when creating removable entities that also have vector addresses\nstruct RegistrationWithTermsAndVector {\n\n    //the entity to register\n    address entity;\n\n    //the terms owner for the entity\n    address termsOwner;\n\n    //the terms for the entity\n    RegistrationTerms terms;\n\n    string name;\n\n    //the vector address for the entity\n    VectorAddress vector;\n}\n\n//when verifying that entity agrees to registration terms\nstruct TermsSignatureVerification {\n\n    //owner of the entity\n    address owner;\n\n    //the terms authority for the entity\n    address termsOwner;\n\n    //the terms being applied to the entity\n    RegistrationTerms terms;\n\n    //signature expiration\n    uint256 expiration;\n\n    //entity owner's signature agreeing to terms\n    bytes ownerTermsSignature;\n}\n\n\n//storage metadata for each registered entity\nstruct TermedRegistration {\n\n    //the terms owner for the entity\n    address owner;\n\n    //the terms of the registration, if any\n    RegistrationTerms terms;\n\n    //the last time the terms were renewed\n    uint256 lastRenewed;\n\n    //if deactivated, the time to countdown the grace period\n    uint256 deactivationTime;\n}\n\n//entity registration storage\nstruct RegistrationStorage {\n\n    uint256 reentrancyLock;\n\n    //removable entities\n    mapping(address => TermedRegistration) removableRegistrations;\n\n    //non-removable entities, which have no terms or deactivation state\n    mapping(address => bool) staticRegistrations;\n\n    //entities registered by their case-insensitive, globally-unique name, if applicable\n    mapping(string => address) registrationsByName;\n    \n    //entities by their vector address, if applicable\n    mapping(bytes32 => address) registrationsByVector; \n}\n\nlibrary LibRegistration {\n\n    using LibStringCase for string;\n    using MessageHashUtils for bytes;\n    using LibVectorAddress for VectorAddress;\n\n    uint256 public constant DAY = 1 days;\n\n    modifier nonReentrant {\n        RegistrationStorage storage rs = LibRegistration.load();\n        require(rs.reentrancyLock == 0, \"EntityRemovalExt: reentrant call\");\n        rs.reentrancyLock = 1;\n        _;\n        rs.reentrancyLock = 0;\n    }\n\n    function load() internal pure returns (RegistrationStorage storage ds) {\n        bytes32 slot = LibStorageSlots.REGISTRATION_STORAGE;\n        assembly {\n            ds.slot := slot\n        }\n    }\n    \n    /**\n     * @dev Checks if an entity is registered.\n     */\n    function isRegistered(address addr) public view returns (bool) {\n        RegistrationStorage storage rs = load();\n        //the more common case is that entities will be removable. So we check that first.\n        bool isRemovable = address(rs.removableRegistrations[addr].owner) != address(0);\n        if(isRemovable) {\n            return true;\n        }\n        return rs.staticRegistrations[addr];\n    }\n\n    /**\n     * @dev Gets the entity registered by a name, if applicable. Some entities, like assets, do not\n     * have globally unique names so a zero-address would be returned in those cases.\n     * \n     * NOTE: A case-insensitive comparison is used to find the entity by name. This only applies to\n     * ascii based names and does not trim whitespace. Off-chain resources need to ensure that names\n     * do not have hidden characters, etc.\n     */\n    function getEntityByName(string calldata nm) public view returns (address) {\n        RegistrationStorage storage rs = load();\n        return rs.registrationsByName[nm.lower()];\n    }\n\n    /**\n     * @dev Gets the entity registered by a vector address, if applicable\n     */\n    function getEntityByVector(VectorAddress memory vector) public view returns (address) {\n        RegistrationStorage storage rs = load();\n\n        //has the vector address to use as a lookup key\n        bytes32 hashed = keccak256(bytes(vector.asLookupKey()));\n        return rs.registrationsByVector[hashed];\n    }\n\n    function removeVectorRegistration(VectorAddress memory vector) public {\n        RegistrationStorage storage rs = load();\n        bytes32 hashed = keccak256(bytes(vector.asLookupKey()));\n        delete rs.registrationsByVector[hashed];\n    }\n\n    /**\n     * @dev Registers a non-removable entity ignoring the name.\n     */\n    function registerNonRemovableEntityIgnoreName(address entity) public {\n        RegistrationStorage storage rs = load();\n        require(!rs.staticRegistrations[entity], \"LibRegistration: entity already registered\");\n        rs.staticRegistrations[entity] = true;\n    }\n\n    /**\n     * @dev Registers a non-removable entity. The name must be globally unique.\n     */\n    function registerNonRemovableEntity(address entity, string calldata name) public {\n        RegistrationStorage storage rs = load();\n        require(!rs.staticRegistrations[entity], \"LibRegistration: entity already registered\"); \n        string memory nm = name.lower();\n        require(bytes(nm).length > 0, \"LibRegistration: entity name is empty\");\n        require(rs.registrationsByName[nm] == address(0), \"LibRegistration: entity name already registered\");\n        rs.registrationsByName[nm] = entity;\n        \n        rs.staticRegistrations[entity] = true;\n    }\n\n    /**\n     * @dev Registers a removable entity. The name must be globally unique.\n     */\n    function registerRemovableEntity(address entity, address termsOwner, RegistrationTerms memory terms, string memory name) public {\n        \n        require(termsOwner != address(0), \"LibRegistration: terms owner cannot be zero address\");\n\n        RegistrationStorage storage rs = load();\n\n        //get the storage entry, or an empty one if doesn't exist yet.\n        TermedRegistration storage reg = rs.removableRegistrations[entity];\n\n        //make sure it doesn't exist yet\n        require(address(reg.owner) == address(0), \"LibRegistration: entity already registered\");\n\n        //make sure all removable entities, regardless of registration terms, are given sufficient\n        //grace period to respsond to a deactivation.\n        require(terms.gracePeriodDays > 0, \"LibRegistration: grace period must be greater than 0\");\n\n        //make sure the entity has a globally unique name (barring any hidden or whitespace characters)\n        string memory nm = name.lower();\n        require(bytes(nm).length > 0, \"LibRegistration: entity name is empty\");\n        require(rs.registrationsByName[nm] == address(0), \"LibRegistration: entity name already registered\");\n        rs.registrationsByName[nm] = entity;\n        \n        //the terms owner has authority to reset terms or remove entities\n        reg.owner = termsOwner;\n\n        //the registration terms\n        reg.terms = terms;\n\n        //sets the registration start time to establish expiration\n        reg.lastRenewed = block.timestamp;\n    }\n\n    /**\n     * @dev Registers a removable entity ignoring the name.\n     */\n    function registerRemovableEntityIgnoreName(address entity, address termsOwner, RegistrationTerms memory terms) public {\n        RegistrationStorage storage rs = load();\n        TermedRegistration storage reg = rs.removableRegistrations[entity];\n        require(address(reg.owner) == address(0), \"LibRegistration: entity already registered\");\n\n        require(termsOwner != address(0), \"LibRegistration: terms owner cannot be zero address\");\n        require(terms.gracePeriodDays > 0, \"LibRegistration: grace period must be greater than 0\");\n        reg.owner = termsOwner;\n        reg.terms = terms;\n        reg.lastRenewed = block.timestamp;\n    }\n\n    /**\n     * @dev Registers a removable entity with a vector address.\n     */\n    function registerRemovableVectoredEntity(RegistrationWithTermsAndVector memory args) public {\n        registerRemovableEntity(args.entity, args.termsOwner, args.terms, args.name);\n        if(bytes(args.vector.x).length > 0) {\n            RegistrationStorage storage rs = load();\n            string memory asKey = args.vector.asLookupKey();\n            bytes32 hashed = keccak256(bytes(asKey));\n            require(rs.registrationsByVector[hashed] == address(0), \"RegistrationModule: vector already in use\");\n            rs.registrationsByVector[hashed] = args.entity;\n        }\n    }\n\n    /**\n     * @dev Registers a removable entity with a vector address, ignoring the name.\n     */\n    function registerRemovableVectoredEntityIgnoreName(RegistrationWithTermsAndVector memory args) public  {\n        registerRemovableEntityIgnoreName(args.entity, args.termsOwner, args.terms);\n        if(bytes(args.vector.x).length > 0) {\n            RegistrationStorage storage rs = load();\n            string memory asKey = args.vector.asLookupKey();\n            bytes32 hashed = keccak256(bytes(asKey));\n            require(rs.registrationsByVector[hashed] == address(0), \"RegistrationModule: vector already in use\");\n            rs.registrationsByVector[hashed] = args.entity;\n        }\n    }\n\n    /**\n     * @dev Change the registration terms for an entity. This should be checked that the caller\n     * is the authority for the entity. This checks that the entity agreed to the terms by\n     * checking signature.\n     */\n    function changeEntityTerms(ChangeEntityTermsArgs calldata args) public nonReentrant {\n        RegistrationStorage storage rs = load();\n        TermedRegistration storage reg = rs.removableRegistrations[args.entity];\n        RegistrationTerms memory newTerms = _verifyEntitySignature(args);\n        reg.terms = newTerms;\n\n        //restart the coverage period clock with terms change\n        reg.lastRenewed = block.timestamp;\n    }\n\n    /**\n     * @dev Verify whether an entity owner agrees to new terms and fees.\n     */\n    function verifyNewEntityTermsSignature(TermsSignatureVerification memory args) public view {\n\n        //make sure signature has not expired\n        require(args.expiration > block.timestamp, \"BaseRegistrationModule: expiration must be in the future\");\n        \n        //hash terms plus the terms owner to ensure that the entity owner is agreeing to the terms AND the\n        //the authority controlling those terms.\n        bytes32 hash = keccak256(abi.encode(args.termsOwner, args.terms.fee, args.terms.coveragePeriodDays, args.terms.gracePeriodDays, args.expiration));\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        address w = ECDSA.recover(sigHash, args.ownerTermsSignature);\n\n        //note that we're checking the entity owner, not a signer. This is because this is a new \n        //entity and onlyl an owner is initially set.\n        require(w == args.owner, \"BaseRegistrationModule: entity owner signature verifying fees and terms owner is invalid\");\n    }\n\n    /**\n     * @dev Verifies that an entity owner agrees to new terms and fees.\n     */\n    function _verifyEntitySignature(ChangeEntityTermsArgs calldata args) internal view returns (RegistrationTerms memory) {\n        require(args.expiration > block.timestamp, \"BaseRegistrationModule: expiration must be in the future\");\n        RegistrationStorage storage rs = load();\n        TermedRegistration storage tr = rs.removableRegistrations[args.entity];\n        ITermsOwner owner = ITermsOwner(tr.owner);\n\n        //make sure terms owner is still active and can change terms\n        require(owner.isStillActive(), \"BaseRegistrationModule: entity terms owner is no longer active\");\n        RegistrationTerms memory newTerms = args.terms;\n\n        //hash the new terms and terms owner authority\n        bytes32 hash = keccak256(abi.encode(tr.owner, newTerms.fee, newTerms.coveragePeriodDays, newTerms.gracePeriodDays, args.expiration));\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        address w = ECDSA.recover(sigHash, args.entitySignature);\n\n        //the entity admin address must agree to changing terms\n        require(IAccessControl(args.entity).isAdmin(w), \"BaseRegistrationModule: entity signature invalid\");\n        return newTerms;\n    }\n}"
    },
    "contracts/libraries/LibRemovableEntity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from './LibStorageSlots.sol';\nimport {VectorAddress} from './LibVectorAddress.sol';\n\n//storage specific to removable entities\nstruct RemovableEntityStorage {\n\n    //whether the entity is active\n    bool active;\n\n    //whether the entity has been removed\n    bool removed;\n\n    //registration terms authority for the entity\n    address termsOwner;\n\n    //vector address, if applicable\n    VectorAddress vector;\n}\n\nlibrary LibRemovableEntity {\n\n    function load() internal pure returns (RemovableEntityStorage storage ds) {\n        bytes32 slot = LibStorageSlots.ACTIVATION_STORAGE;\n        assembly {\n            ds.slot := slot\n        }\n    }\n\n}"
    },
    "contracts/libraries/LibRoles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nlibrary LibRoles {\n\n    bytes32 constant public ROLE_OWNER = keccak256(\"ROLE_OWNER\");\n    bytes32 constant public ROLE_ADMIN = keccak256(\"ROLE_ADMIN\");\n    bytes32 constant public ROLE_SIGNER = keccak256(\"ROLE_SIGNER\");\n    bytes32 constant public ROLE_VECTOR_AUTHORITY = keccak256(\"ROLE_VECTOR_AUTHORITY\");\n}"
    },
    "contracts/libraries/LibStorageSlots.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n//organize storage slot addresses in one place to make sure they're unique\nlibrary LibStorageSlots {\n\n    //see EIP-7201 for details on slot address algorithm\n    \n    bytes32 constant ENTITY_PROXY_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.entity.proxy.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    \n    bytes32 constant ENTITY_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.entity.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant ACCESS_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.access.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant FACTORY_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.entity.factory.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant REGISTRATION_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.registration.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant ACTIVATION_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.activation.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant WORLD_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.world.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant COMPANY_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.company.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant AVATAR_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.avatar.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant EXPERIENCE_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.experience.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n\n    bytes32 constant ASSET_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.asset.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant ASSET_REGISTRY = keccak256(abi.encode(uint256(keccak256(bytes('xr.asset.registry.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant ERC20_ASSET_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.erc20.asset.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n    bytes32 constant ERC721_ASSET_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.erc721.asset.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n\n    bytes32 constant PORTAL_STORAGE = keccak256(abi.encode(uint256(keccak256(bytes('xr.portal.storage.v1'))) - 1)) & bytes32(uint256(0xff));\n}"
    },
    "contracts/libraries/LibStringCase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nlibrary LibStringCase {\n\n    /**\n     * Lower\n     * \n     * Converts all the values of a string to their corresponding lower case\n     * value.\n     * \n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to lower case\n     * @return string \n     */\n    function lower(string memory _base)\n        internal\n        pure\n        returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _lower(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Lower\n     * \n     * Convert an alphabetic character to lower case and return the original\n     * value when not alphabetic\n     * \n     * @param _b1 The byte to be converted to lower case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a upper case otherwise returns the original value\n     */\n    function _lower(bytes1 _b1)\n        private\n        pure\n        returns (bytes1) {\n\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\n            return bytes1(uint8(_b1) + 32);\n        }\n\n        return _b1;\n    }\n}"
    },
    "contracts/libraries/LibVectorAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\n/**\n * @title VectorAddress\n * @dev A struct representing a vector address. A vector address is a unique identifier \n * referencing a virtual spatial address. It is composed of a 3D vector (x, y, z) and \n * temporal value (t), a planar value (p), and a dimension within the plane (p_sub). \n * Worlds are given a base vector address by a Registrar, who obtains the address from\n * XRDNA as the address authority. Worlds then assign sub-locations within their world\n * to companies, which increments the planar value (p) within the world. Companies can\n * then assign sub-planar locations (p_sub) to experiences within their company and outer \n * world. \n * \n * This means an experience vector address can be mapped back to its company and world\n * by setting its p_sub value to 0 and p value to 0 respectively.\n */\nstruct VectorAddress {\n    string  x;\n    string  y;\n    string  z;\n    uint256  t;\n    uint256  p;\n    uint256  p_sub;\n}\n\nlibrary LibVectorAddress {\n    using MessageHashUtils for bytes;\n\n    /**\n     * @dev Returns a string representation of the vector address. This is used to hash\n     * the vector address and/or use it as a key in a map\n     */\n    function asLookupKey(VectorAddress memory self) public pure returns (string memory) {\n        return string.concat(\n            self.x, \n            self.y, \n            self.z, \n            Strings.toString(self.t), \n            Strings.toString(self.p), \n            Strings.toString(self.p_sub));\n    }\n\n    function validate(VectorAddress memory self, bool needsP, bool needsPSub) public pure  {\n        require(bytes(self.x).length > 0, \"LibVectorAddress: invalid x value\");\n        require(bytes(self.y).length > 0, \"LibVectorAddress: invalid y value\");\n        require(bytes(self.z).length > 0, \"LibVectorAddress: invalid z value\");\n        if(needsP) {\n            require(self.p > 0, \"LibVectorAddress: invalid p value\");\n        } else {\n            require(self.p == 0, \"LibVectorAddress: p value must be zero\");\n        }\n        if(needsPSub) {\n            require(self.p_sub > 0, \"LibVectorAddress: invalid p_sub value\");\n        } else {\n            require(self.p_sub == 0, \"LibVectorAddress: p_sub value must be zero\");\n        }\n    }\n\n    /**\n     * @dev Returns true if the two vector addresses are equal\n     */\n    function equals(VectorAddress memory self, VectorAddress memory other) public pure returns (bool) {\n        return keccak256(abi.encodePacked(asLookupKey(self))) == keccak256(abi.encodePacked(asLookupKey(other)));\n    }\n\n    /**\n     * @dev Returns the address of the signer of the vector address. The signer is the \n     * registrar that assigned the vector address to the world.\n     */\n    function getSigner(VectorAddress memory self, address registrar, bytes memory signature) public pure returns (address) {\n        string memory asKey = asLookupKey(self);\n\n        //it's important to include the registrar in the signature. Otherwise, \n        //a malicious actor could attempt to use a vector address not assigned to them\n        bytes memory merged = abi.encode(asKey, registrar);\n\n        \n        //NOTE: have to convert the bytes32 to bytes in order for message hash \n        //prefix to match what's being done off-chain.\n        bytes32 hash = keccak256(merged);\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        return ECDSA.recover(sigHash, signature);\n    }\n\n}"
    },
    "contracts/libraries/LibVersion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nstruct Version {\n    uint16 major;\n    uint16 minor;\n}\n\nlibrary LibVersion {\n\n    function equals(Version memory a, Version memory b) internal pure returns (bool) {\n        return a.major == b.major && a.minor == b.minor;\n    }\n\n    function greaterThan(Version memory a, Version memory b) internal pure returns (bool) {\n        if (a.major > b.major) {\n            return true;\n        } else if (a.major == b.major) {\n            return a.minor > b.minor;\n        }\n        return false;\n    }\n\n    function lessThan(Version memory a, Version memory b) internal pure returns (bool) {\n        if (a.major < b.major) {\n            return true;\n        } else if (a.major == b.major) {\n            return a.minor < b.minor;\n        }\n        return false;\n    }\n}"
    },
    "contracts/portal/IPortalCondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n\nstruct JumpEvaluationArgs {\n    address destinationExperience;\n    address sourceWorld;\n    address sourceCompany;\n    address sourceExperience;\n    address avatar;\n}\n\n/**\n * @dev Interface for portal conditions. Conditions allow additional rules to be attached\n * to a portal, which must be satisfied before a jump can be made.\n */\ninterface IPortalCondition {\n    /**\n     * @dev Returns whether the given avatar can jump to the destination experience from \n     * the source experience, company, and world.\n     */\n    function canJump(JumpEvaluationArgs memory args) external returns (bool);\n}"
    },
    "contracts/portal/IPortalRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IExperience} from '../experience/instance/IExperience.sol';\nimport {VectorAddress} from '../libraries/LibVectorAddress.sol';\nimport {IPortalCondition} from './IPortalCondition.sol';\nimport {PortalInfo} from '../libraries/LibPortal.sol';\nimport {Version} from '../libraries/LibVersion.sol';\n\nstruct AddPortalRequest {\n    uint256 fee;\n}\n\ninterface IPortalRegistry {\n\n    event JumpSuccessful(uint256 indexed portalId, address indexed avatar, address indexed destination);\n    event PortalAdded(uint256 indexed portalId, address indexed experience);\n    event PortalDeactivated(uint256 indexed portalId, address indexed experience, string reason);\n    event PortalReactivated(uint256 indexed portalId, address indexed experience);\n    event PortalRemoved(uint256 indexed portalId, address indexed experience, string reason);\n    event PortalConditionAdded(uint256 indexed portalId, address indexed condition);\n    event PortalConditionRemoved(uint256 indexed portalId);\n    event PortalRegistryUpgraded(address indexed newRegistry);\n    event PortalFeeChanged(uint256 indexed portalId, uint256 indexed newFee);\n    event PortalDestinationUpgraded(uint256 indexed portalId, address indexed oldExperience, address indexed newExperience);\n\n\n    function version() external pure returns (Version memory);\n\n    /**\n     * @dev Returns the portal info for the given portal ID\n     * @param portalId The ID of the portal\n     */\n    function getPortalInfoById(uint256 portalId) external view returns (PortalInfo memory);\n\n    /**\n     * @dev Returns the portal info for the given experience address\n     * @param experience The address of the experience contract\n     */\n    function getPortalInfoByAddress(address experience) external view returns (PortalInfo memory);\n\n    /**\n     * @dev Returns the portal info for the given vector address\n     * @param va The vector address for a destination experience\n     */\n    function getPortalInfoByVectorAddress(VectorAddress memory va) external view returns (PortalInfo memory);\n    \n    /**\n     * @dev Returns the portal ID for the given experience address\n     * @param experience The address of the experience contract\n     */\n    function getIdForExperience(address experience) external view returns (uint256);\n\n    /**\n     * @dev Returns the portal ID for the given vector address\n     * @param va The vector address for a destination experience\n     */\n    function getIdForVectorAddress(VectorAddress memory va) external view returns (uint256);\n\n    /*\n     * @dev Adds a new portal to the registry. This must be called by the experience registry\n     * when a new experience is created.\n     * @param AddPortalRequest The request to add a new portal\n     */\n    function addPortal(AddPortalRequest memory) external returns (uint256);\n\n    /**\n     * @dev Deactivates a portal. This must be called by the experience registry\n     * when an experience is deactivated.\n     * @param portalId The ID of the portal to deactivate\n     * @param reason The reason for deactivating the portal\n     */\n    function deactivatePortal(uint256 portalId, string calldata reason) external;\n\n    /**\n     * @dev Reactivates a portal. This must be called by the experience registry\n     * when an experience is reactivated.\n     * @param portalId The ID of the portal to reactivate\n     */\n    function reactivatePortal(uint256 portalId) external;\n\n    /**\n     * @dev Removes a portal from the registry. This must be called by the experience registry\n     * when an experience is removed.\n     * @param portalId The ID of the portal to remove\n     * @param reason The reason for removing the portal\n     */\n    function removePortal(uint256 portalId, string calldata reason) external;\n\n    /**\n     * @dev Initiates a jump request to the destination experience. This must be called\n     * by a registered avatar contract.\n     * @param portalId The destination portal id to jump to\n     */\n    function jumpRequest(uint256 portalId) external payable returns (bytes memory);\n    \n    /**\n     * @dev Adds a condition to an existing portal. This must be called by the destination experience\n     * contract, which is likely called by the company contract, to authenticate that the \n     * request is allowed by the company owning the experience.\n     */\n    function addCondition(IPortalCondition condition) external;\n\n    /**\n     * @dev Removes a condition from an existing portal. This must be called by the destination experience\n     * contract, which is likely called by the company contract, to authenticate that the \n     * request is allowed by the company owning the experience.\n     */\n    function removeCondition() external;\n\n    /**\n     * @dev Changes the fee for a portal. This must be called by the destination experience\n     */\n    function changePortalFee(uint256 newFee) external;\n\n}\n"
    },
    "contracts/portal/PortalRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport {BaseAccess} from '../base-types/BaseAccess.sol';\nimport {IPortalRegistry, AddPortalRequest} from './IPortalRegistry.sol';\nimport {PortalRegistryStorage, PortalInfo, LibPortal} from '../libraries/LibPortal.sol';\nimport {IPortalCondition, JumpEvaluationArgs} from './IPortalCondition.sol';\nimport {IExperience, JumpEntryRequest} from '../experience/instance/IExperience.sol';\nimport {IExperienceRegistry} from '../experience/registry/IExperienceRegistry.sol';\nimport {IAvatarRegistry} from '../avatar/registry/IAvatarRegistry.sol';\nimport {IAvatar} from '../avatar/instance/IAvatar.sol';\nimport {VectorAddress, LibVectorAddress} from '../libraries/LibVectorAddress.sol';\nimport {Version} from '../libraries/LibVersion.sol';\n\n\nstruct PortalRegistryConstructorArgs {\n    address avatarRegistry;\n    address experienceRegistry;\n}\n\ncontract PortalRegistry is ReentrancyGuard, BaseAccess, IPortalRegistry {\n\n    using LibVectorAddress for VectorAddress;\n\n    struct PortalJumpMetadata {\n        IExperience sourceExperience;\n        IExperience destinationExperience;\n        address sourceWorld;\n        address sourceCompany;\n        address destWorld;\n        address destCompany;\n        PortalInfo sourcePortal;\n        PortalInfo destPortal;\n    }\n\n    IExperienceRegistry public immutable experienceRegistry;\n    IAvatarRegistry public immutable avatarRegistry;\n\n    modifier onlyActiveExperience {\n        require(experienceRegistry.isRegistered(msg.sender), \"PortalRegistry: Only registered experiences can call this function\");\n        require(IExperience(msg.sender).isEntityActive(), \"PortalRegistry: Only active experiences can call this function\");\n        _;\n    }\n\n    modifier onlyExperience {\n        require(experienceRegistry.isRegistered(msg.sender), \"PortalRegistry: Only registered experiences can call this function\");\n        _;\n    }\n\n     modifier onlyAvatar {\n        require(avatarRegistry.isRegistered(msg.sender), \"PortalRegistry: Only registered avatars can call this function\");\n        _;\n    }\n\n    constructor(PortalRegistryConstructorArgs memory args) {\n        require(args.avatarRegistry != address(0), \"PortalRegistry: Avatar registry cannot be the zero address\" );\n        require(args.experienceRegistry != address(0), \"PortalRegistry: Experience registry cannot be the zero address\" );\n        avatarRegistry = IAvatarRegistry(args.avatarRegistry);\n        experienceRegistry = IExperienceRegistry(args.experienceRegistry);\n    }\n\n    receive() external payable {  }\n\n    function version() external pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    function getPortalInfoById(uint256 portalId) external view returns (PortalInfo memory) {\n        return LibPortal.load().portals[portalId];\n    }\n\n    /**\n     * @dev Returns the portal info for the given experience address\n     * @param experience The address of the experience contract\n     */\n    function getPortalInfoByAddress(address experience) external view returns (PortalInfo memory) {\n        PortalRegistryStorage storage store = LibPortal.load();\n        uint256 portalId = store.portalIdsByExperience[experience];\n        return store.portals[portalId];\n    }\n\n    /**\n     * @dev Returns the portal info for the given vector address\n     * @param va The vector address for a destination experience\n     */\n    function getPortalInfoByVectorAddress(VectorAddress memory va) external view returns (PortalInfo memory) {\n        PortalRegistryStorage storage store = LibPortal.load();\n        bytes32 hash = keccak256(abi.encode(va.asLookupKey()));\n        uint256 portalId = store.portalIdsByVectorHash[hash];\n        return store.portals[portalId];\n    }\n    \n    /**\n     * @dev Returns the portal ID for the given experience address\n     * @param experience The address of the experience contract\n     */\n    function getIdForExperience(address experience) external view returns (uint256) {\n        return LibPortal.load().portalIdsByExperience[experience];\n    }\n\n    /**\n     * @dev Returns the portal ID for the given vector address\n     * @param va The vector address for a destination experience\n     */\n    function getIdForVectorAddress(VectorAddress memory va) external view returns (uint256) {\n        bytes32 hash = keccak256(abi.encode(va.asLookupKey()));\n        return LibPortal.load().portalIdsByVectorHash[hash];\n    }\n\n    /*\n     * @dev Adds a new portal to the registry. This must be called by the experience registry\n     * when a new experience is created.\n     * @param AddPortalRequest The request to add a new portal\n     */\n    function addPortal(AddPortalRequest memory req) external onlyActiveExperience nonReentrant returns (uint256)  {\n        VectorAddress memory va = IExperience(msg.sender).vectorAddress();\n        bytes32 hash = keccak256(abi.encode(va.asLookupKey()));\n        PortalRegistryStorage storage store = LibPortal.load();\n        require(store.portalIdsByVectorHash[hash] == 0, \"PortalRegistry: portal already exists for this vector address\");\n        ++store.nextPortalId;\n        uint256 portalId = store.nextPortalId; \n        store.portalIdsByVectorHash[hash] = portalId;\n        store.portalIdsByExperience[msg.sender] = portalId;\n        store.portals[portalId] = PortalInfo({\n            destination: IExperience(msg.sender),\n            condition: IPortalCondition(address(0)),\n            fee: req.fee,\n            active: true\n        });\n        emit IPortalRegistry.PortalAdded(portalId, msg.sender);\n        return portalId;\n    }\n    \n    /**\n     * @dev Changes the fee for a portal. This must be called by the destination experience\n     */\n    function changePortalFee(uint256 newFee) external onlyActiveExperience {\n        PortalRegistryStorage storage store = LibPortal.load();\n        uint256 portalId = store.portalIdsByExperience[msg.sender];\n        store.portals[portalId].fee = newFee;\n        emit IPortalRegistry.PortalFeeChanged(portalId, newFee);\n    }\n\n    function deactivatePortal(uint256 portalId, string calldata reason) external onlyExperience {\n        PortalRegistryStorage storage s = LibPortal.load();\n        s.portals[portalId].active = false;\n        address exp = address(s.portals[portalId].destination);\n        require(exp == msg.sender, \"PortalRegistry: only the experience can deactivate its own portal\");\n        emit IPortalRegistry.PortalDeactivated(portalId, exp, reason);\n    }\n\n    /**\n     * @dev Reactivates a portal. This must be called by the experience registry\n     * when an experience is reactivated.\n     * @param portalId The ID of the portal to reactivate\n     */\n    function reactivatePortal(uint256 portalId) external onlyExperience {\n        PortalRegistryStorage storage s = LibPortal.load();\n        s.portals[portalId].active = true;\n        address exp = address(s.portals[portalId].destination);\n        require(exp == msg.sender, \"PortalRegistry: only the experience can reactivate its own portal\");\n        emit IPortalRegistry.PortalReactivated(portalId, exp);\n    }\n\n    /**\n     * @dev Removes a portal from the registry. This must be called by the experience registry\n     * when an experience is removed.\n     * @param portalId The ID of the portal to remove\n     * @param reason The reason for removing the portal\n     */\n    function removePortal(uint256 portalId, string calldata reason) external onlyExperience nonReentrant {\n        PortalRegistryStorage storage s = LibPortal.load();\n        PortalInfo memory pi = s.portals[portalId];\n        address exp = msg.sender;\n        require(address(pi.destination) == exp, \"PortalRegistry: only the experience can remove its own portal\");\n        delete s.portals[portalId];\n        delete s.portalIdsByExperience[exp];\n        VectorAddress memory va = IExperience(msg.sender).vectorAddress();\n        bytes32 hash = keccak256(abi.encode(va.asLookupKey()));\n        delete s.portalIdsByVectorHash[hash];\n        \n        emit IPortalRegistry.PortalRemoved(portalId, exp, reason);\n    }\n\n\n    function addCondition(IPortalCondition condition) external onlyActiveExperience {\n        PortalRegistryStorage storage s = LibPortal.load();\n        require(address(condition) != address(0), \"PortalRegistry: condition address cannot be 0\");\n        uint256 id = s.portalIdsByExperience[msg.sender];\n        require(id != 0, \"PortalRegistry: experience not found\");\n        s.portals[id].condition = condition;\n        emit IPortalRegistry.PortalConditionAdded(id, address(condition));\n    }\n\n    function removeCondition() external onlyActiveExperience {\n        PortalRegistryStorage storage s = LibPortal.load();\n        uint256 portalId = s.portalIdsByExperience[msg.sender];\n        s.portals[portalId].condition = IPortalCondition(address(0));\n        emit IPortalRegistry.PortalConditionRemoved(portalId);\n    }\n\n\n     function jumpRequest(uint256 portalId) external payable onlyAvatar nonReentrant returns (bytes memory) {\n        \n        /**\n         * This contract delegates jump request authorization to the avatar. Only the avatar\n         * owner can initiate a jump. And either the destination experience owner is paying \n         * for the transaction and/or fees or the avatar owner is. But the avatar contract must \n         * work out the details of payment and authorization.\n         */\n        PortalJumpMetadata memory meta = _getExperienceDetails(portalId);\n\n        if(meta.destPortal.fee > 0) {\n            //make sure sufficient funds were forwarded in txn\n            require(msg.value >= meta.destPortal.fee, \"PortalRegistry: Insufficient fee attached to jump request\");\n             \n            //if overpaid, refund the difference\n            uint256 refund = msg.value - meta.destPortal.fee;\n            if(refund > 0) {\n                payable(msg.sender).transfer(refund);\n            }\n        }\n        \n        /** \n         * Payment for a jump must be attached to the txn. Whether it's paid by 3rd party of\n         * avatar owner doesn't matter in this context.\n         */\n        //see if the caller has paid the fee\n        return meta.destinationExperience.entering{value: meta.destPortal.fee}(JumpEntryRequest({\n            sourceWorld: meta.sourceWorld,\n            sourceCompany: meta.sourceCompany,\n            avatar: msg.sender\n        }));\n         \n    }\n\n    function _getExperienceDetails(uint256 destPortalId) internal returns (PortalJumpMetadata memory meta) {\n        //get avatar's current location\n        IAvatar avatar = IAvatar(msg.sender);\n        address exp = avatar.location();\n        require(exp != address(0), \"PortalRegistry: avatar is not in a valid location\");\n        \n        PortalRegistryStorage storage s = LibPortal.load();\n\n        //the avatar has to be located somewhere. Even when registering through a world, the \n        //world must choose a default experience\n        require(address(exp) != address(0), \"PortalRegistry: avatar is not in a valid location\");\n        uint256 portalId = s.portalIdsByExperience[address(exp)];\n        require(portalId != 0, \"PortalRegistry: no portal found for the avatar's current location\");\n        \n        require(portalId != destPortalId, \"PortalRegistry: cannot jump to the same experience\");\n\n        PortalInfo storage sourcePortal = s.portals[portalId];\n        require(address(sourcePortal.destination) != address(0), \"PortalRegistry: could not map current location to a valid portal\");\n        \n        //get the destination experience\n        PortalInfo storage destPortal = s.portals[destPortalId];\n        require(destPortal.active, \"PortalRegistry: destination portal is not active\");\n        require(address(destPortal.destination) != address(0), \"PortalRegistry: invalid destination portal id\");\n        \n        //make sure any jump conditions are met\n        if(address(destPortal.condition) != address(0)) {\n            JumpEvaluationArgs memory args = JumpEvaluationArgs({\n                destinationExperience: address(destPortal.destination),\n                sourceWorld: sourcePortal.destination.world(),\n                sourceCompany: sourcePortal.destination.company(),\n                sourceExperience: address(sourcePortal.destination),\n                avatar: msg.sender\n            });\n            require(destPortal.condition.canJump(args), \"PortalRegistry: portal jump conditions not met\");\n        }\n\n        return PortalJumpMetadata({\n            sourcePortal: sourcePortal,\n            destPortal: destPortal,\n            sourceExperience: sourcePortal.destination,\n            destinationExperience: destPortal.destination,\n            sourceWorld: sourcePortal.destination.world(),\n            sourceCompany: sourcePortal.destination.company(),\n            destWorld: destPortal.destination.world(),\n            destCompany: destPortal.destination.company()\n        });\n    }\n\n    /**\n     * @dev Withdraws funds from the contract but should only ever be necessary to recover funds \n     * sent to this contract by mistake. All funds for experience jumps are transferred to the\n     * destination experience.\n     */\n    function withdraw(uint256 amount) external onlyOwner {\n        payable(msg.sender).transfer(amount);\n    }\n}"
    },
    "contracts/portal/PortalRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../base-types/BaseProxy.sol';\n\ncontract PortalRegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/registrar/instance/IRegistrar.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IAccessControl} from '../../interfaces/IAccessControl.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {ITermsOwner} from '../../interfaces/registry/ITermsOwner.sol';\n\nstruct NewWorldArgs {\n\n    //whether any attached tokens for registration are sent to the world owner address or\n    //to the world contract itself\n    bool sendTokensToOwner;\n\n    //owner of the world contract\n    address owner;\n\n    //world's spatial vector address assigned by registrar\n    VectorAddress baseVector;\n\n    //world's globally unique name\n    string name;\n\n    //the terms of the world's registration\n    RegistrationTerms terms;\n\n    //signature of the world owner on the terms and registrar address\n    bytes ownerTermsSignature;\n\n    //signature expiration time in seconds\n    uint256 expiration;\n\n    //signature of the vector address authority that issued the vector address to the registrar\n    bytes vectorAuthoritySignature;\n\n    //world contract init data, if any\n    bytes initData;\n}\n\n\ninterface IRegistrar is IAccessControl, IRemovableEntity, ITermsOwner  {\n\n    event RegistrarAddedWorld(address indexed world, address indexed owner);\n    event RegistrarDeactivatedWorld(address indexed world, string reason);\n    event RegistrarReactivatedWorld(address indexed world);\n    event RegistrarRemovedWorld(address indexed world, string reason);\n\n    function init(string calldata _name, address _owner, bytes calldata _initData) external;\n\n    /**\n     * @dev Registers a new world contract. Must be called by a registrar signer\n     */\n    function registerWorld(NewWorldArgs memory args) external payable returns (address world);\n\n    /**\n     * @dev Deactivates a world contract. Must be called by a registrar signer\n     */\n    function deactivateWorld(address world, string calldata reason) external;\n\n    /**\n     * @dev Reactivates a world contract. Must be called by a registrar signer\n     */\n    function reactivateWorld(address world) external;\n\n    /**\n     * @dev Removes a world contract. Must be called by a registrar signer\n     */\n    function removeWorld(address world, string calldata reason) external;\n\n    function withdraw(uint256 amount) external;\n}"
    },
    "contracts/registrar/instance/Registrar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRemovableEntity} from '../../base-types/entity/BaseRemovableEntity.sol';\nimport {IRegistrar, NewWorldArgs} from './IRegistrar.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\nimport {LibRemovableEntity, RemovableEntityStorage} from '../../libraries/LibRemovableEntity.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IWorldRegistry, CreateWorldArgs} from '../../world/registry/IWorldRegistry.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {IRegistrarRegistry} from '../registry/IRegistrarRegistry.sol';\n\nstruct RegistrarConstructorArgs {\n    address registrarRegistry;\n    address worldRegistry;\n}\n\n/**\n * @title Registrar\n * @dev Registrar is an entity that creates and manages worlds. This implementation logic is applied\n * to the registrar proxy, which is cloned for each new registrar instance.\n */\ncontract Registrar is BaseRemovableEntity, IRegistrar {\n\n    IRegistrarRegistry public immutable registrarRegistry;\n    IWorldRegistry public immutable worldRegistry;\n\n    //initialized once to establish immutable registry addresses for all uses of implementation logic.\n    constructor(RegistrarConstructorArgs memory args) {\n        require(args.registrarRegistry != address(0), 'Registrar: Invalid registrar registry');\n        require(args.worldRegistry != address(0), 'Registrar: Invalid world registry');\n        registrarRegistry = IRegistrarRegistry(args.registrarRegistry);\n        worldRegistry = IWorldRegistry(args.worldRegistry);\n    }\n\n    receive() external payable {}\n\n    function upgrade(bytes calldata initData) public override onlyOwner {\n        registrarRegistry.upgradeEntity(initData);\n    }\n\n    function postUpgradeInit(bytes calldata) external override onlyRegistry{\n        //no-op\n    }\n\n    function version() external pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    function owningRegistry() internal view override returns (address) {\n        return address(registrarRegistry);\n    }\n\n    /**\n     * @dev Initializes the registrar. Must be called by the registry during registration\n     */\n    function init(string calldata _name, address _owner, bytes calldata) external onlyRegistry {\n       require(bytes(_name).length > 0, \"Registrar: name required\");\n       LibEntity.load().name = _name;\n        RemovableEntityStorage storage rs = LibRemovableEntity.load();\n        rs.active = true;\n        //the registry itself is the terms authority for a registrar\n        rs.termsOwner = msg.sender;\n        address[] memory admins = new address[](0);\n        LibAccess.initAccess(_owner, admins);\n    }\n\n\n    /**\n     * @dev Registers a new world contract. Must be called by a registrar signer\n     */\n    function registerWorld(NewWorldArgs memory args) external payable  onlySigner nonReentrant  returns (address world){\n        world = worldRegistry.createWorld(CreateWorldArgs({\n            sendTokensToOwner: args.sendTokensToOwner,\n            owner: args.owner,\n            name: args.name,\n            terms: args.terms,\n            initData: args.initData,\n            ownerTermsSignature: args.ownerTermsSignature,\n            expiration: args.expiration,\n            vector: args.baseVector,\n            vectorAuthoritySignature: args.vectorAuthoritySignature\n        }));\n        require(world != address(0), \"Registrar: world creation failed\");\n        //transfer any attached tokens\n        if(msg.value > 0) {\n            if(args.sendTokensToOwner) {\n                payable(args.owner).transfer(msg.value);\n            } else {\n                payable(world).transfer(msg.value);\n            }\n        }\n    }\n\n    /**\n     * @dev Deactivates a world contract. Must be called by a registrar signer\n     */\n    function deactivateWorld(address world, string calldata reason) external onlySigner nonReentrant {\n        worldRegistry.deactivateEntity(IRemovableEntity(world), reason);\n    }\n\n    /**\n     * @dev Reactivates a world contract. Must be called by a registrar signer\n     */\n    function reactivateWorld(address world) external onlySigner nonReentrant {\n        worldRegistry.reactivateEntity(IRemovableEntity(world));\n    }\n\n    /**\n     * @dev Removes a world contract. Must be called by a registrar signer\n     */\n    function removeWorld(address world, string calldata reason) external onlySigner nonReentrant {\n        worldRegistry.removeEntity(IRemovableEntity(world), reason);\n    }\n\n\n    /**\n     * @dev Returns whether the registrar is still active\n     */\n    function isStillActive() external view returns (bool) {\n        return LibRemovableEntity.load().active;\n    }\n\n    /**\n     * @dev Returns whether the given address is a signer for the registrar\n     */\n    function isTermsOwnerSigner(address a) external view returns (bool) {\n        return isSigner(a);\n    }\n\n    function withdraw(uint256 amount) external override onlyOwner {\n        require(amount <= address(this).balance, \"Registrar: insufficient balance\");\n        payable(owner()).transfer(amount);\n    }\n\n    \n}"
    },
    "contracts/registrar/instance/RegistrarProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../base-types/entity/EntityProxy.sol';\n\ncontract RegistrarProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/registrar/registry/IRegistrarRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\n\n//args for creating non-removable registrar\nstruct CreateNonRemovableRegistrarArgs {\n\n    //whether to send tokens to the registrar owner wallet or registrar contract\n    bool sendTokensToOwner;\n\n    //owner of the registrar\n    address owner;\n\n    //unique name for the registrar\n    string name;\n\n    //custom init data for the registrar\n    bytes initData;\n}\n\n//args for creating a removable registrar\nstruct CreateRegistrarArgs {\n\n    //whether to send tokens to the registrar owner wallet or registrar contract\n    bool sendTokensToOwner;\n\n    //owner of the registrar\n    address owner;\n\n    //signature expiration time\n    uint256 expiration;\n\n    //registration terms\n    RegistrationTerms terms;\n\n    //unique name for the registrar\n    string name;\n\n    //custom init data for the registrar\n    bytes initData;\n\n    //signature of the terms by the owner agreeing to terms and authority\n    bytes ownerTermsSignature;\n}\n\ninterface IRegistrarRegistry is IRemovableRegistry {\n\n    /**\n     * @dev Creates a new non-removable registrar with the given arguments.\n     */\n    function createNonRemovableRegistrar(CreateNonRemovableRegistrarArgs calldata args) external payable returns (address);\n\n    /**\n     * @dev Creates a new removable registrar with the given arguments. The registrar registry is \n     * the terms authority for the registrar.\n     */\n    function createRemovableRegistrar(CreateRegistrarArgs calldata args) external payable returns (address);\n\n    /**\n     * @dev When regsitrars renew registration, any fees are passed to this contract as the registrar's\n     * terms owner. This function allows the registry owner to withdraw funds collected by the registry.\n     */\n    function withdraw(uint256 amount) external;\n}"
    },
    "contracts/registrar/registry/RegistrarRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseRemovableRegistry} from '../../base-types/registry/BaseRemovableRegistry.sol';\nimport {LibAccess } from '../../libraries/LibAccess.sol';\nimport {IRegistrarRegistry, CreateNonRemovableRegistrarArgs, CreateRegistrarArgs} from './IRegistrarRegistry.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {IRegistrar} from '../instance/IRegistrar.sol';\nimport {LibRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {ChangeEntityTermsArgs, IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\nimport {IEntityRemoval} from '../../interfaces/registry/IEntityRemoval.sol';\n\n\n/**\n * @title RegistrarRegistry\n    * @dev RegistrarRegistry is a registry that creates and manages registrars. It is the terms authority for all registrars.\n */\ncontract RegistrarRegistry is BaseRemovableRegistry, IRegistrarRegistry {\n\n    modifier onlySigner {\n        require(LibAccess.isSigner(msg.sender), \"RegistrarRegistry: caller is not a signer\");\n        _;\n    }\n\n    function version() external pure override returns(Version memory) {\n        return Version(1, 0);\n    }\n\n\n    receive() external payable {}\n    \n    /**\n     * @inheritdoc IRegistrarRegistry\n     */\n    function createNonRemovableRegistrar(CreateNonRemovableRegistrarArgs calldata args) external payable onlySigner nonReentrant returns (address) {\n        FactoryStorage storage fs = LibFactory.load();\n        \n        //make sure proxy and logic have been set\n        require(fs.proxyImplementation != address(0), \"RegistrarRegistration: proxy implementation not set\");\n        require(fs.entityImplementation != address(0), \"RegistrarRegistry: entity implementation not set\");\n        \n        //clone the registrar proxy\n        address proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"RegistrarRegistration: entity cloning failed\");\n\n        //and set the impl logic on the new proxy address\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        //initialize registrar state\n        IRegistrar(proxy).init(args.name, args.owner, args.initData);\n\n        //register non-removable\n        _registerNonRemovableEntity(proxy, args.name);\n\n        //transfer tokens if applicable\n        if(msg.value > 0) {\n            if(args.sendTokensToOwner) {\n                payable(args.owner).transfer(msg.value);\n            } else {\n                payable(proxy).transfer(msg.value);\n            }\n        }\n\n        emit RegistryAddedEntity(proxy, args.owner);\n\n        return proxy;\n    }\n\n    /**\n     * @inheritdoc IRegistrarRegistry\n     */\n    function createRemovableRegistrar(CreateRegistrarArgs calldata args) external payable onlySigner nonReentrant returns (address proxy) {\n        \n        //and that there is a grace period, if even terms have 0 coverage period. This gives Registrar\n        //opportunity to correct any issues with the terms before being removed.\n        require(args.terms.gracePeriodDays > 0, \"RegistrarRegistry: grace period must be greater than 0\");\n        \n        FactoryStorage storage fs = LibFactory.load();\n        require(fs.proxyImplementation != address(0), \"RegistrarRegistration: proxy implementation not set\");\n        require(fs.entityImplementation != address(0), \"RegistrarRegistry: entity implementation not set\");\n        \n        \n        //verify signature of terms by owner\n        TermsSignatureVerification memory verification = TermsSignatureVerification({\n            owner: args.owner,\n            termsOwner: address(this),\n            terms: args.terms,\n            expiration: args.expiration,\n            ownerTermsSignature: args.ownerTermsSignature\n        });\n        LibRegistration.verifyNewEntityTermsSignature(verification);\n\n        //clone the proxy\n        proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"RegistrarRegistration: proxy cloning failed\");\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        //initialize registrar state\n        IRegistrar(proxy).init(args.name, args.owner, args.initData);\n\n        //register entity as removable\n        _registerRemovableEntity(proxy, address(this), args.terms, args.name);\n\n        //transfer tokens if applicable\n         if(msg.value > 0) {\n            if(args.sendTokensToOwner) {\n                payable(args.owner).transfer(msg.value);\n            } else {\n                payable(proxy).transfer(msg.value);\n            }\n        }\n\n        emit RegistryAddedEntity(proxy, args.owner);\n    }\n\n    /**\n     * @dev withdraw funds from the contract\n     */\n    function withdraw(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance, \"RegistrarRegistry: amount exceeds balance\");\n        payable(owner()).transfer(amount);\n    }\n\n    /**\n     * @dev Called by the entity's authority to deactivate the entity for the given reason.\n     */\n    function deactivateEntity(IRemovableEntity entity, string calldata reason) external onlyAdmin override(BaseRemovableRegistry, IEntityRemoval)  {\n        LibEntityRemoval.deactivateEntity(entity, reason);\n    }\n\n    /**\n     * @dev Called by the entity's terms owner to reactivate the entity.\n     */\n    function reactivateEntity(IRemovableEntity entity) external onlyAdmin override(BaseRemovableRegistry, IEntityRemoval)   {\n        LibEntityRemoval.reactivateEntity(entity);\n    }\n\n    /**\n     * @dev Removes an entity from the registry. Can only be called by the terms owner and only after deactivating\n     * the entity and waiting for the grace period to expire. A grace period must be set to given ample time\n     * for the entity to respond to deactivation.\n     */\n    function removeEntity(IRemovableEntity entity, string calldata reason) external onlyAdmin override(BaseRemovableRegistry, IEntityRemoval)   {\n        LibEntityRemoval.removeEntity(entity, reason);\n    }\n\n    /**\n     * @dev Returns the terms for the given entity address\n     \n     */\n    function changeEntityTerms(ChangeEntityTermsArgs calldata args) public onlyAdmin override(BaseRemovableRegistry, IRemovableRegistry)   {\n        LibRegistration.changeEntityTerms(args);\n    }\n}\n\n"
    },
    "contracts/registrar/registry/RegistrarRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\n\ncontract RegistrarRegistryProxy is BaseProxy {\n    constructor(BaseProxyConstructorArgs memory args) BaseProxy(args) {}\n}"
    },
    "contracts/test/IAvatarV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {IAvatar} from '../avatar/instance/IAvatar.sol';\n\ninterface IAvatarV2 is IAvatar {\n\n    function setValue(uint256 _value) external;\n\n    function getValue() external view returns (uint256);\n\n}"
    },
    "contracts/test/TestAvatarV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {Avatar, AvatarConstructorArgs} from '../avatar/instance/Avatar.sol';\nimport {Version} from '../libraries/LibVersion.sol';\n\nstruct V2Storage {\n    uint256 v2Value;\n}\n\n\ncontract TestAvatarV2 is Avatar {\n\n    constructor(AvatarConstructorArgs memory args) Avatar(args) {}\n\n    function load() internal pure returns (V2Storage storage ds) {\n        bytes32 slot = keccak256(\"V2_STORAGE_SIMPLIFIED\");\n        assembly {\n            ds.slot := slot\n        }\n    }\n\n    function version() public pure override returns (Version memory) {\n        return Version(1, 1);\n    }\n\n    function setValue(uint256 _value) external onlyAdmin {\n        V2Storage storage ds = load();\n        ds.v2Value = _value;\n    }\n\n    function getValue() external view returns (uint256) {\n        V2Storage storage ds = load();\n        return ds.v2Value;\n    }\n\n}"
    },
    "contracts/test/TestCondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\nimport {IPortalCondition, JumpEvaluationArgs} from '../portal/IPortalCondition.sol';\ncontract TestCondition is IPortalCondition {\n\n    mapping(address => bool) public allowed;\n\n    function canJump(JumpEvaluationArgs memory args) external view returns (bool) {\n        return allowed[args.avatar];\n    }\n\n    function setCanJump(address avatar, bool _canJump) public {\n        allowed[avatar] = _canJump;\n    }\n}"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract TestERC20 is ERC20 {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _mint(msg.sender, 1000000 * 10 ** decimals());\n    }\n}"
    },
    "contracts/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\ncontract TestERC721 is ERC721 {\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\n        _mint(msg.sender, 1);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n}"
    },
    "contracts/world/instance/IWorld.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IAccessControl} from '../../interfaces/IAccessControl.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {ITermsOwner} from '../../interfaces/registry/ITermsOwner.sol';\nimport {IVectoredEntity} from '../../base-types/entity/IVectoredEntity.sol';\n\n\nstruct NewCompanyArgs {\n\n    //whether any attached tokens for registration are sent to the company owner address or\n    //to the company contract itself\n    bool sendTokensToOwner;\n\n    //owner of the company contract\n    address owner;\n\n    //company's globally unique name\n    string name;\n\n    //the terms of the company's registration\n    RegistrationTerms terms;\n\n    //signature of the company owner on the terms and registrar address\n    bytes ownerTermsSignature;\n\n    //signature expiration time in seconds\n    uint256 expiration;\n\n    //company contract init data, if any\n    bytes initData;\n}\n\n\nstruct NewAvatarArgs {\n\n    //whether any attached tokens for registration are sent to the avatar owner address or\n    //to the avatar contract itself\n    bool sendTokensToOwner;\n\n    //owner of the avatar contract\n    address owner;\n    \n    //address of the experience where the avatar starts\n    address startingExperience;\n\n    //avatar's globally unique name\n    string name;\n\n    //avatar contract init data, if any\n    bytes initData;\n}\n\n\nstruct NewExperienceArgs {\n\n    //the experience's vector address\n    VectorAddress vector;\n\n    //experience's globally unique name\n    string name;\n\n    //company contract init data, if any\n    bytes initData;\n}\n\nstruct WorldInitArgs {\n    address owner; \n    address termsOwner;\n    VectorAddress vector;\n    string name;\n    bytes initData;\n}\n\n/**\n * @title IWorld\n    * @dev IWorld is the interface for a world contract. A world registers companies and avatars as well as\n    * add experiences for companies. It is the registration terms authority for all companies.\n */\ninterface IWorld is IAccessControl, IVectoredEntity, IRemovableEntity, ITermsOwner  {\n\n    event WorldAddedCompany(address indexed company, address indexed owner, VectorAddress vector);\n    event WorldAddedAvatar(address indexed avatar, address indexed owner);\n\n    event WorldAddedCompany(address indexed company, address indexed owner);\n    event WorldDeactivatedCompany(address indexed company, string reason);\n    event WorldReactivatedCompany(address indexed company);\n    event WorldRemovedCompany(address indexed company, string reason);\n\n    event WorldAddedExperience(address indexed experience, address indexed company, uint256 portalId);\n    event WorldDeactivatedExperience(address indexed experience, address indexed company, string reason);\n    event WorldReactivatedExperience(address indexed experience, address indexed company);\n    event WorldRemovedExperience(address indexed experience, address indexed company, string reason, uint256 portalId);\n\n    function init(WorldInitArgs memory args) external;\n    function vectorAddress() external view returns (VectorAddress memory);\n    function withdraw(uint256 amount) external;\n\n    /**\n     * @dev Registers a new company contract. Must be called by a world signer\n     */\n    function registerCompany(NewCompanyArgs memory args) external payable returns (address company);\n\n    /**\n     * @dev Deactivates a company contract. Must be called by a world signer\n     */\n    function deactivateCompany(address company, string calldata reason) external;\n\n    /**\n     * @dev Reactivates a company contract. Must be called by a world signer\n     */\n    function reactivateCompany(address company) external;\n\n    /**\n     * @dev Removes a company contract. Must be called by a world signer\n     */\n    function removeCompany(address company, string calldata reason) external;\n\n    /**\n     * @dev Registers a new avatar contract. Must be called by a world signer\n     */\n    function registerAvatar(NewAvatarArgs memory args) external payable returns (address avatar);\n\n    /**\n     * @dev Add an experience to the world. This is called by the company offering the experience\n     */\n    function addExperience(NewExperienceArgs memory args) external returns (address experience, uint256 portalId);\n\n    /**\n     * @dev Deactivates a company contract. Must be called by owning company\n     */\n    function deactivateExperience(address experience, string calldata reason) external;\n\n    /**\n     * @dev Reactivates an experience contract. Must be called by owning company\n     */\n    function reactivateExperience(address experience) external;\n\n    /**\n     * @dev Removes a experience contract. Must be called by owning company\n     */\n    function removeExperience(address experience, string calldata reason) external returns (uint256 portalId);\n}"
    },
    "contracts/world/instance/LibWorld.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {LibStorageSlots} from '../../libraries/LibStorageSlots.sol';\n\nstruct WorldStorage {\n    uint256 nextPValue;\n}\n\nlibrary LibWorld {\n    function load() internal pure returns (WorldStorage storage ws) {\n        bytes32 slot = LibStorageSlots.WORLD_STORAGE;\n        assembly {\n            ws.slot := slot\n        }\n    }\n}"
    },
    "contracts/world/instance/World.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRemovableEntity} from '../../base-types/entity/BaseRemovableEntity.sol';\nimport {IWorld, WorldInitArgs, NewCompanyArgs, NewAvatarArgs, NewExperienceArgs} from './IWorld.sol';\nimport {LibEntity} from '../../libraries/LibEntity.sol';\nimport {LibRemovableEntity, RemovableEntityStorage} from '../../libraries/LibRemovableEntity.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport {VectorAddress, LibVectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IRegistrar} from '../../registrar/instance/IRegistrar.sol';\nimport {ICompanyRegistry, CreateCompanyArgs} from '../../company/registry/ICompanyRegistry.sol';\nimport {ICompany} from '../../company/instance/ICompany.sol';\nimport {WorldStorage, LibWorld} from './LibWorld.sol';\nimport {LibEntityRemoval} from '../../libraries/LibEntityRemoval.sol';\nimport {IRemovableEntity} from '../../interfaces/entity/IRemovableEntity.sol';\nimport {IAvatarRegistry, CreateAvatarArgs} from '../../avatar/registry/IAvatarRegistry.sol';\nimport {IExperienceRegistry, CreateExperienceArgs} from '../../experience/registry/IExperienceRegistry.sol';\nimport {IExperience} from '../../experience/instance/IExperience.sol';\nimport {IWorldRegistry} from '../registry/IWorldRegistry.sol';\n\nstruct WorldConstructorArgs {\n    address registrarRegistry;\n    address worldRegistry;\n    address avatarRegistry;\n    address companyRegistry;\n    address experienceRegistry;\n}\n\n\ncontract World is BaseRemovableEntity, IWorld {\n\n    using LibVectorAddress for VectorAddress;\n\n    IWorldRegistry public immutable worldRegistry;\n    IAvatarRegistry public immutable avatarRegistry;\n    ICompanyRegistry public immutable companyRegistry;\n    IExperienceRegistry public immutable experienceRegistry;\n\n    modifier onlyActiveCompany {\n        require(companyRegistry.isRegistered(msg.sender), 'World: Company not registered');\n        require(ICompany(msg.sender).isEntityActive(), 'World: Company not active');\n        _;\n    }\n\n    constructor(WorldConstructorArgs memory args) {\n        require(args.worldRegistry != address(0), 'World: Invalid world registry');\n        require(args.avatarRegistry != address(0), 'World: Invalid avatar registry');\n        require(args.companyRegistry != address(0), 'World: Invalid company registry');\n        require(args.experienceRegistry != address(0), 'World: Invalid experience registry');\n        worldRegistry = IWorldRegistry(args.worldRegistry);\n        avatarRegistry = IAvatarRegistry(args.avatarRegistry);\n        companyRegistry = ICompanyRegistry(args.companyRegistry);\n        experienceRegistry = IExperienceRegistry(args.experienceRegistry);\n    }\n\n    receive() external payable {}\n\n    function upgrade(bytes calldata initData) public override onlyOwner {\n        worldRegistry.upgradeEntity(initData);\n    }\n\n    function postUpgradeInit(bytes calldata) external override onlyRegistry {\n        //no-op\n    }\n    \n    function version() public pure override returns (Version memory) {\n        return Version(1, 0);\n    }\n\n    function owningRegistry() internal view override returns (address) {\n        return address(worldRegistry);\n    }\n\n    function init(WorldInitArgs memory args) public onlyRegistry {\n        require(bytes(args.name).length > 0, 'World: Name required');\n        require(args.owner != address(0), 'World: Owner required');\n        require(args.termsOwner != address(0), 'World: Terms owner required');\n\n        //false, false means p and p_sub must be 0\n        args.vector.validate(false, false);\n\n        LibEntity.load().name = args.name;\n        RemovableEntityStorage storage rs = LibRemovableEntity.load();\n        rs.active = true;\n        rs.termsOwner = args.termsOwner;\n        rs.vector = args.vector;\n        address[] memory admins = new address[](0);\n        LibAccess.initAccess(args.owner, admins);\n    }\n\n    /**\n     * @dev Returns the base vector for the world\n     */\n    function vectorAddress() public view returns (VectorAddress memory) {\n        return LibRemovableEntity.load().vector;\n    }\n   \n    /**\n     * @dev Returns whether the world is still active\n     */\n    function isStillActive() public view returns (bool) {\n        return LibRemovableEntity.load().active;\n    }\n\n    /**\n     * @dev Returns whether the given address is a signer for the world. The world is terms\n     * owner for companies.\n     */\n    function isTermsOwnerSigner(address a) public view returns (bool) {\n        return isSigner(a);\n    }\n\n    /**\n     * @dev Allows withdraw of registration renewal fees\n     */\n    function withdraw(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance, \"Registrar: insufficient balance\");\n        payable(LibAccess.owner()).transfer(amount);\n    }\n\n    /**\n     * @dev Registers a new company contract. Must be called by a world signer\n     */\n    function registerCompany(NewCompanyArgs memory args) public payable onlySigner nonReentrant returns (address company) {\n       \n        //get the base vector for this world\n        VectorAddress memory base = vectorAddress();\n        WorldStorage storage ws = LibWorld.load();\n\n        //establish the next P value for the new company\n        ++ws.nextPValue;\n\n        //ane apply it to the copied vector address\n        base.p = ws.nextPValue;\n\n        //create the company in the registry\n        company = companyRegistry.createCompany(CreateCompanyArgs({\n            sendTokensToOwner: args.sendTokensToOwner,\n            owner: args.owner,\n            name: args.name,\n            terms: args.terms,\n            initData: args.initData,\n            ownerTermsSignature: args.ownerTermsSignature,\n            expiration: args.expiration,\n            vector: base\n        }));\n        require(company != address(0), 'World: Company creation failed');\n\n        //transfer any tokens if applicable\n        if(msg.value > 0) {\n            if(args.sendTokensToOwner) {\n                payable(args.owner).transfer(msg.value);\n            } else {\n                payable(company).transfer(msg.value);\n            }\n        }\n\n        emit WorldAddedCompany(company, args.owner, base);\n    }\n\n    /**\n     * @dev Deactivates a company contract. Must be called by a world signer\n     */\n    function deactivateCompany(address company, string calldata reason) public onlySigner nonReentrant {\n        companyRegistry.deactivateEntity(IRemovableEntity(company), reason);\n        emit WorldDeactivatedCompany(company, reason);\n    }\n\n    /**\n     * @dev Reactivates a company contract. Must be called by a world signer\n     */\n    function reactivateCompany(address company) public onlySigner nonReentrant {\n        companyRegistry.reactivateEntity(IRemovableEntity(company));\n        emit WorldReactivatedCompany(company);\n    }\n\n    /**\n     * @dev Removes a company contract. Must be called by a world signer\n     */\n    function removeCompany(address company, string calldata reason) public onlySigner nonReentrant {\n        companyRegistry.removeEntity(IRemovableEntity(company), reason);\n        emit WorldRemovedCompany(company, reason);\n    }\n\n    /**\n     * @dev Registers a new avatar contract. Must be called by a world signer\n     */\n    function registerAvatar(NewAvatarArgs memory args) public payable onlySigner nonReentrant returns (address avatar) {\n        //have avatar registry create avatar\n        avatar = avatarRegistry.createAvatar(CreateAvatarArgs({\n            sendTokensToOwner: args.sendTokensToOwner,\n            owner: args.owner,\n            name: args.name,\n            startingExperience: args.startingExperience,\n            initData: args.initData\n        }));\n        require(avatar != address(0), 'World: Avatar creation failed');\n        //transfer tokens if applicable\n        if(msg.value > 0) {\n            if(args.sendTokensToOwner) {\n                payable(args.owner).transfer(msg.value);\n            } else {\n                payable(avatar).transfer(msg.value);\n            }\n        }\n\n        emit WorldAddedAvatar(avatar, args.owner);\n    }\n\n    /**\n     * @dev Add an experience to the world. This is called by the company offering the experience\n     */\n    function addExperience(NewExperienceArgs memory args) public onlyActiveCompany nonReentrant returns (address experience, uint256 portalId) {\n        CreateExperienceArgs memory expArgs = CreateExperienceArgs({\n            company: msg.sender,\n            vector: args.vector,\n            name: args.name,\n            initData: args.initData\n        });\n        (experience, portalId) = experienceRegistry.createExperience(expArgs);\n        emit IWorld.WorldAddedExperience(experience, msg.sender, portalId);\n    }\n\n    /**\n     * @dev Deactivates a company contract. Must be called by owning company\n     */\n    function deactivateExperience(address experience, string calldata reason) public onlyActiveCompany nonReentrant {\n        experienceRegistry.deactivateExperience(msg.sender, experience, reason);\n        emit IWorld.WorldDeactivatedExperience(experience, msg.sender, reason);\n    }\n\n    /**\n     * @dev Reactivates an experience contract. Must be called by owning company\n     */\n    function reactivateExperience(address experience) public onlyActiveCompany nonReentrant {\n        experienceRegistry.reactivateExperience(msg.sender, experience);\n        emit IWorld.WorldReactivatedExperience(experience, msg.sender);\n    }\n\n    /**\n     * @dev Removes a experience contract. Must be called by owning company\n     */\n    function removeExperience(address experience, string calldata reason) public onlyActiveCompany nonReentrant returns (uint256 portalId) {\n        portalId = experienceRegistry.removeExperience(msg.sender, experience, reason);\n        emit IWorld.WorldRemovedExperience(experience, msg.sender, reason, portalId);\n    }\n}"
    },
    "contracts/world/instance/WorldProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {EntityProxy} from '../../base-types/entity/EntityProxy.sol';\n\ncontract WorldProxy is EntityProxy {\n    constructor(address reg) EntityProxy(reg) {}\n}"
    },
    "contracts/world/registry/IWorldRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {RegistrationTerms} from '../../libraries/LibRegistration.sol';\nimport {IRemovableRegistry} from '../../interfaces/registry/IRemovableRegistry.sol';\nimport {IVectoredRegistry} from '../../interfaces/registry/IVectoredRegistry.sol';\nimport {VectorAddress} from '../../libraries/LibVectorAddress.sol';\n\n\n/**\n * @dev args for creating a new world\n */\nstruct CreateWorldArgs {\n    //whether to send tokens to world owner or contract\n    bool sendTokensToOwner;\n\n    //owner of the world contract\n    address owner;\n\n    //expiration for terms signature of owner\n    uint256 expiration;\n\n    //terms\n    RegistrationTerms terms;\n\n    //base vector address for the world\n    VectorAddress vector;\n\n    //name of the world\n    string name;\n\n    //init data for world contract\n    bytes initData;\n\n    //world owner signature of terms\n    bytes ownerTermsSignature;\n\n    //new vector addresses require signature of vector signing authority\n    bytes vectorAuthoritySignature;\n}\n\n\n/**\n * @dev Worlds can switch registrars. This requires a signature from the current registrar, if \n * still active, as well as signature of world owner on the new terms.\n */\nstruct ChangeRegistrarArgs {\n\n    //world contract\n    address entity;\n    \n    //old register signature, if still active\n    bytes oldRegistrarSignature;\n\n    //signature of world signer/owner\n    bytes entitySignature;\n\n    //expiration for entity signature\n    uint256 expiration;\n\n    //new terms\n    RegistrationTerms newTerms;\n}\n\n\n/**\n * @title IWorldRegistry\n * @dev IWorldRegistry is the interface for a world registry contract. A world registry creates and manages\n * world contracts.\n */\ninterface IWorldRegistry is IRemovableRegistry, IVectoredRegistry {\n\n    event RegistrarChangedForWorld(address indexed world, address indexed oldRegistrar, address indexed newRegistrar);\n    \n    /**\n     * @dev Creates a new world contract\n     */\n    function createWorld(CreateWorldArgs calldata args) external returns (address);\n\n    /**\n     * @dev Checks if the given address is a vector address signing authority\n     */\n    function isVectorAddressAuthority(address a) external view returns (bool);\n\n    /**\n     * @dev Adds a new vector address authority\n     */\n    function addVectorAddressAuthority(address a) external;\n\n    /**\n     * @dev Removes a vector address authority\n     */\n    function removeVectorAddressAuthority(address a) external;\n\n    /**\n     * @dev Changes the registrar for a world contract\n     */\n    function changeRegistrarWithTerms(ChangeRegistrarArgs calldata args) external;\n}"
    },
    "contracts/world/registry/WorldRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseRegistry} from '../../base-types/registry/BaseRegistry.sol';\nimport {BaseRemovableRegistry} from '../../base-types/registry/BaseRemovableRegistry.sol';\nimport {BaseVectoredRegistry} from '../../base-types/registry/BaseVectoredRegistry.sol';\nimport {IWorldRegistry, ChangeRegistrarArgs, CreateWorldArgs} from './IWorldRegistry.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {LibRoles} from '../../libraries/LibRoles.sol';\nimport {LibRegistration, RegistrationStorage, TermedRegistration, TermsSignatureVerification} from '../../libraries/LibRegistration.sol';\nimport {FactoryStorage, LibFactory} from '../../libraries/LibFactory.sol';\nimport {LibClone} from '../../libraries/LibClone.sol';\nimport {IWorld, WorldInitArgs} from '../instance/IWorld.sol';\nimport {VectorAddress, LibVectorAddress} from '../../libraries/LibVectorAddress.sol';\nimport {IRegistrarRegistry} from '../../registrar/registry/IRegistrarRegistry.sol';\nimport {IRegistrar} from '../../registrar/instance/IRegistrar.sol';\nimport {LibRegistration, RegistrationWithTermsAndVector} from '../../libraries/LibRegistration.sol';\nimport {ITermsOwner} from '../../interfaces/registry/ITermsOwner.sol';\nimport {Version} from '../../libraries/LibVersion.sol';\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {IEntityProxy} from '../../base-types/entity/IEntityProxy.sol';\n\nstruct WorldRegistryConstructorArgs {\n    address registrarRegistry;\n}\n\n/**\n * @title WorldRegistry\n * @dev A registry for creating and managing worlds\n */\ncontract WorldRegistry is BaseVectoredRegistry, IWorldRegistry {\n\n    using MessageHashUtils for bytes;\n    using LibVectorAddress for VectorAddress;\n\n    IRegistrarRegistry public immutable registrarRegistry;\n\n\n    modifier onlySigner {\n        require(LibAccess.isSigner(msg.sender), \"RegistrarRegistry: caller is not a signer\");\n        _;\n    }\n\n    modifier onlyActiveRegistrar {\n        require(registrarRegistry.isRegistered(msg.sender), \"RegistrarRegistry: registrar not registered\");\n        require(IRegistrar(msg.sender).isEntityActive(), \"RegistrarRegistry: registrar not active\");\n        _;\n    }\n\n    //called when logic contract is deployed to set immutable registry value\n    constructor(WorldRegistryConstructorArgs memory args)  {  \n        require(args.registrarRegistry != address(0), \"RegistrarRegistry: invalid registrar registry\");\n        registrarRegistry = IRegistrarRegistry(args.registrarRegistry); \n    }\n\n\n    function version() external pure override returns(Version memory) {\n        return Version(1, 0);\n    }\n\n    /**\n     * @inheritdoc IWorldRegistry\n     */\n    function isVectorAddressAuthority(address a) public view returns (bool) {\n        return LibAccess.hasRole(LibRoles.ROLE_VECTOR_AUTHORITY, a);\n    }\n\n    /**\n     * @inheritdoc IWorldRegistry\n     */\n    function addVectorAddressAuthority(address a) public onlyAdmin {\n        LibAccess.grantRole(LibRoles.ROLE_VECTOR_AUTHORITY, a);\n    }\n\n    /**\n     * @inheritdoc IWorldRegistry\n     */\n    function removeVectorAddressAuthority(address a) public onlyAdmin {\n        LibAccess.revokeRole(LibRoles.ROLE_VECTOR_AUTHORITY, a);\n    }\n\n    /**\n     * @inheritdoc IWorldRegistry\n     */\n    function createWorld(CreateWorldArgs calldata args) public override onlyActiveRegistrar nonReentrant returns (address) {\n         \n        //make sure proxy and logic has been set\n        FactoryStorage storage fs = LibFactory.load();\n        require(fs.entityImplementation != address(0), \"RegistrarRegistry: entity implementation not set\");\n        require(fs.proxyImplementation != address(0), \"RegistrarRegistry: proxy implementation not set\");\n\n        address signer = args.vector.getSigner(msg.sender, args.vectorAuthoritySignature);\n        require(isVectorAddressAuthority(signer), \"WorldRegistry: vector signer is not a valid vector address authority\");\n\n        //verify terms sigs\n        TermsSignatureVerification memory verification = TermsSignatureVerification({\n            owner: args.owner,\n            termsOwner: msg.sender,\n            terms: args.terms,\n            expiration: args.expiration,\n            ownerTermsSignature: args.ownerTermsSignature\n        });\n        LibRegistration.verifyNewEntityTermsSignature(verification);\n\n        //clone the proxy\n        address proxy = LibClone.clone(fs.proxyImplementation);\n        require(proxy != address(0), \"RegistrarRegistration: entity cloning failed\");\n\n        //set logic\n        IEntityProxy(proxy).setImplementation(fs.entityImplementation);\n\n        //initialize state\n        WorldInitArgs memory wArgs = WorldInitArgs({\n            name: args.name,\n            owner: args.owner,\n            termsOwner: msg.sender,\n            vector: args.vector,\n            initData: args.initData\n        });\n        IWorld(proxy).init(wArgs);\n\n        //register in storage\n        RegistrationWithTermsAndVector memory regArgs = RegistrationWithTermsAndVector({\n            entity: proxy,\n            termsOwner: msg.sender,\n            terms: args.terms,\n            name: args.name,\n            vector: args.vector\n        });\n        LibRegistration.registerRemovableVectoredEntity(regArgs);\n         \n\n        emit RegistryAddedEntity(proxy, args.owner);\n\n        return proxy;\n    }\n\n    /**\n     * @inheritdoc IWorldRegistry\n     */\n    function changeRegistrarWithTerms(ChangeRegistrarArgs calldata args) external override onlyActiveRegistrar nonReentrant {\n\n        //verify signatures for migrating to new registrar\n        _verifyMigrationSigs(args);\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[args.entity];\n        address old = tr.owner;\n\n        //new registrar calls this contract so they're the new terms owner\n        tr.owner = msg.sender;\n\n        //set new terms\n        tr.terms = args.newTerms;\n\n        //reset terms start time\n        tr.lastRenewed = block.timestamp;\n\n        if(tr.deactivationTime > 0) {\n            //tell world to reactivate\n            IWorld(args.entity).reactivate();\n            tr.deactivationTime = 0;\n        }\n        \n        emit RegistrarChangedForWorld(args.entity, old, msg.sender);\n    }\n\n    /**\n     * @dev Verify signatures when migrating to a new registrar\n     */\n    function _verifyMigrationSigs(ChangeRegistrarArgs calldata args) internal view {\n        //make sure migration sig has not expired\n        require(args.expiration > block.timestamp, \"Registrar: migration signature expired\");\n        RegistrationStorage storage rs = LibRegistration.load();\n        TermedRegistration storage tr = rs.removableRegistrations[args.entity];\n        ITermsOwner to = ITermsOwner(tr.owner);\n\n        bytes32 hash = keccak256(abi.encode(msg.sender, args.expiration, args.newTerms.fee, args.newTerms.coveragePeriodDays, args.newTerms.gracePeriodDays));\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), hash) // set the bytes data\n        }\n        //make sure signer is a signer for the destination experience's company\n        bytes32 sigHash = b.toEthSignedMessageHash();\n        address w = ECDSA.recover(sigHash, args.entitySignature);\n        require(IWorld(args.entity).isAdmin(w), \"Registrar: entity signature invalid\");\n        \n        if(args.oldRegistrarSignature.length == 0) {\n            require(!to.isStillActive(), \"Registrar: current registrar is active but no signature provided\");\n        } else {\n            bytes32 oldHash = keccak256(abi.encode(args.entity, msg.sender, args.expiration));\n            bytes memory oldB = new bytes(32);\n            assembly {\n                mstore(add(oldB, 32), oldHash) // set the bytes data\n            }\n            bytes32 oldSigHash = oldB.toEthSignedMessageHash();\n            address r = ECDSA.recover(oldSigHash, args.oldRegistrarSignature);\n            require(to.isTermsOwnerSigner(r), \"Registrar: current registrar signature invalid\");\n        }\n    }\n}"
    },
    "contracts/world/registry/WorldRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\nimport {BaseProxy, BaseProxyConstructorArgs} from '../../base-types/BaseProxy.sol';\nimport {LibAccess} from '../../libraries/LibAccess.sol';\nimport {LibRoles} from '../../libraries/LibRoles.sol';\n\nstruct WorldRegistryProxyConstructorArgs {\n    address owner;\n    address impl;\n    address vectorAuthority;\n    address[] admins;\n}\n\ncontract WorldRegistryProxy is BaseProxy {\n    constructor(WorldRegistryProxyConstructorArgs memory args) BaseProxy(BaseProxyConstructorArgs({\n        owner: args.owner,\n        impl: args.impl,\n        admins: args.admins\n    })) {\n        require(args.vectorAuthority != address(0), \"WorldRegistryProxy: vector authority is zero address\");\n        LibAccess.grantRole(LibRoles.ROLE_VECTOR_AUTHORITY, args.vectorAuthority);\n    }\n}"
    }
  }
}