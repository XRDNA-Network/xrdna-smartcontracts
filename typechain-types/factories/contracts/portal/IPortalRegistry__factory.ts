/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPortalRegistry,
  IPortalRegistryInterface,
} from "../../../contracts/portal/IPortalRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "avatar",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "JumpSuccessful",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "experience",
        type: "address",
      },
    ],
    name: "PortalAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "condition",
        type: "address",
      },
    ],
    name: "PortalConditionAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
    ],
    name: "PortalConditionRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldExperience",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newExperience",
        type: "address",
      },
    ],
    name: "PortalDestinationUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "PortalFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newRegistry",
        type: "address",
      },
    ],
    name: "PortalRegistryUpgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IPortalCondition",
        name: "condition",
        type: "address",
      },
    ],
    name: "addCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IExperience",
            name: "destination",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
        ],
        internalType: "struct AddPortalRequest",
        name: "",
        type: "tuple",
      },
    ],
    name: "addPortal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "changePortalFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "experience",
        type: "address",
      },
    ],
    name: "getIdForExperience",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "x",
            type: "string",
          },
          {
            internalType: "string",
            name: "y",
            type: "string",
          },
          {
            internalType: "string",
            name: "z",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "t",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "p",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "p_sub",
            type: "uint256",
          },
        ],
        internalType: "struct VectorAddress",
        name: "va",
        type: "tuple",
      },
    ],
    name: "getIdForVectorAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "experience",
        type: "address",
      },
    ],
    name: "getPortalInfoByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "contract IExperience",
            name: "destination",
            type: "address",
          },
          {
            internalType: "contract IPortalCondition",
            name: "condition",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
        ],
        internalType: "struct PortalInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
    ],
    name: "getPortalInfoById",
    outputs: [
      {
        components: [
          {
            internalType: "contract IExperience",
            name: "destination",
            type: "address",
          },
          {
            internalType: "contract IPortalCondition",
            name: "condition",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
        ],
        internalType: "struct PortalInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "x",
            type: "string",
          },
          {
            internalType: "string",
            name: "y",
            type: "string",
          },
          {
            internalType: "string",
            name: "z",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "t",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "p",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "p_sub",
            type: "uint256",
          },
        ],
        internalType: "struct VectorAddress",
        name: "va",
        type: "tuple",
      },
    ],
    name: "getPortalInfoByVectorAddress",
    outputs: [
      {
        components: [
          {
            internalType: "contract IExperience",
            name: "destination",
            type: "address",
          },
          {
            internalType: "contract IPortalCondition",
            name: "condition",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
        ],
        internalType: "struct PortalInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "portalId",
        type: "uint256",
      },
    ],
    name: "jumpRequest",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldExperience",
        type: "address",
      },
      {
        internalType: "address",
        name: "newExperience",
        type: "address",
      },
    ],
    name: "upgradeExperiencePortal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newRegistry",
        type: "address",
      },
    ],
    name: "upgradeRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPortalRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IPortalRegistryInterface {
    return new Interface(_abi) as IPortalRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPortalRegistry {
    return new Contract(address, _abi, runner) as unknown as IPortalRegistry;
  }
}
