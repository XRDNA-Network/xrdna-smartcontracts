/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICompanyHook,
  ICompanyHookInterface,
} from "../../../contracts/company/ICompanyHook";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "initData",
            type: "bytes",
          },
        ],
        internalType: "struct AddExperienceArgs",
        name: "args",
        type: "tuple",
      },
    ],
    name: "beforeAddExperience",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "beforeMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOrTokenId",
        type: "uint256",
      },
    ],
    name: "beforeRevoke",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICompanyHook__factory {
  static readonly abi = _abi;
  static createInterface(): ICompanyHookInterface {
    return new Interface(_abi) as ICompanyHookInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICompanyHook {
    return new Contract(address, _abi, runner) as unknown as ICompanyHook;
  }
}
