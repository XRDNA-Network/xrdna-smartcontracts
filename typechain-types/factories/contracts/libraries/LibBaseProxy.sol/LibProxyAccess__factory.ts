/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LibProxyAccess,
  LibProxyAccessInterface,
} from "../../../../contracts/libraries/LibBaseProxy.sol/LibProxyAccess";

const _abi = [
  {
    inputs: [],
    name: "ADMIN_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SIGNER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063a1ebf35d14607a575b600080fd5b60687fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60405190815260200160405180910390f35b60687fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f708156fea26469706673582212202c4c1d8164ac1789194f954ec68aa93860548680dfc76efd5bb91cedba9ae6ba64736f6c63430008180033";

type LibProxyAccessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibProxyAccessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibProxyAccess__factory extends ContractFactory {
  constructor(...args: LibProxyAccessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LibProxyAccess & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LibProxyAccess__factory {
    return super.connect(runner) as LibProxyAccess__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibProxyAccessInterface {
    return new Interface(_abi) as LibProxyAccessInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LibProxyAccess {
    return new Contract(address, _abi, runner) as unknown as LibProxyAccess;
  }
}
