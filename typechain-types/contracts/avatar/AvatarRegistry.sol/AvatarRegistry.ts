/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type AvatarRegistryArgsStruct = {
  mainAdmin: AddressLike;
  admins: AddressLike[];
  avatarFactory: AddressLike;
  worldRegistry: AddressLike;
};

export type AvatarRegistryArgsStructOutput = [
  mainAdmin: string,
  admins: string[],
  avatarFactory: string,
  worldRegistry: string
] & {
  mainAdmin: string;
  admins: string[];
  avatarFactory: string;
  worldRegistry: string;
};

export type AvatarRegistrationRequestStruct = {
  sendTokensToAvatarOwner: boolean;
  avatarOwner: AddressLike;
  defaultExperience: AddressLike;
  username: string;
  initData: BytesLike;
};

export type AvatarRegistrationRequestStructOutput = [
  sendTokensToAvatarOwner: boolean,
  avatarOwner: string,
  defaultExperience: string,
  username: string,
  initData: string
] & {
  sendTokensToAvatarOwner: boolean;
  avatarOwner: string;
  defaultExperience: string;
  username: string;
  initData: string;
};

export interface AvatarRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "avatarFactory"
      | "currentAvatarVersion"
      | "findByUsername"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isAvatar"
      | "nameAvailable"
      | "registerAvatar"
      | "renounceRole"
      | "revokeRole"
      | "setAvatarFactory"
      | "setCurrentAvatarVersion"
      | "supportsInterface"
      | "upgradeAvatar"
      | "worldRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AvatarCreated"
      | "AvatarFactoryChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAvatarVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findByUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvatar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nameAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvatar",
    values: [AvatarRegistrationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatarFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentAvatarVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAvatar",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "worldRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAvatarVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvatarFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentAvatarVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldRegistry",
    data: BytesLike
  ): Result;
}

export namespace AvatarCreatedEvent {
  export type InputTuple = [
    avatar: AddressLike,
    owner: AddressLike,
    defaultExperience: AddressLike
  ];
  export type OutputTuple = [
    avatar: string,
    owner: string,
    defaultExperience: string
  ];
  export interface OutputObject {
    avatar: string;
    owner: string;
    defaultExperience: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarFactoryChangedEvent {
  export type InputTuple = [oldFactory: AddressLike, newFactory: AddressLike];
  export type OutputTuple = [oldFactory: string, newFactory: string];
  export interface OutputObject {
    oldFactory: string;
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AvatarRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AvatarRegistry;
  waitForDeployment(): Promise<this>;

  interface: AvatarRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  avatarFactory: TypedContractMethod<[], [string], "view">;

  currentAvatarVersion: TypedContractMethod<[], [bigint], "view">;

  findByUsername: TypedContractMethod<[username: string], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAvatar: TypedContractMethod<[a: AddressLike], [boolean], "view">;

  nameAvailable: TypedContractMethod<[username: string], [boolean], "view">;

  registerAvatar: TypedContractMethod<
    [registration: AvatarRegistrationRequestStruct],
    [string],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAvatarFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setCurrentAvatarVersion: TypedContractMethod<
    [v: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeAvatar: TypedContractMethod<
    [initData: BytesLike],
    [void],
    "nonpayable"
  >;

  worldRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "avatarFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentAvatarVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "findByUsername"
  ): TypedContractMethod<[username: string], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAvatar"
  ): TypedContractMethod<[a: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nameAvailable"
  ): TypedContractMethod<[username: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAvatar"
  ): TypedContractMethod<
    [registration: AvatarRegistrationRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAvatarFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrentAvatarVersion"
  ): TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeAvatar"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "worldRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AvatarCreated"
  ): TypedContractEvent<
    AvatarCreatedEvent.InputTuple,
    AvatarCreatedEvent.OutputTuple,
    AvatarCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AvatarFactoryChanged"
  ): TypedContractEvent<
    AvatarFactoryChangedEvent.InputTuple,
    AvatarFactoryChangedEvent.OutputTuple,
    AvatarFactoryChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AvatarCreated(address,address,address)": TypedContractEvent<
      AvatarCreatedEvent.InputTuple,
      AvatarCreatedEvent.OutputTuple,
      AvatarCreatedEvent.OutputObject
    >;
    AvatarCreated: TypedContractEvent<
      AvatarCreatedEvent.InputTuple,
      AvatarCreatedEvent.OutputTuple,
      AvatarCreatedEvent.OutputObject
    >;

    "AvatarFactoryChanged(address,address)": TypedContractEvent<
      AvatarFactoryChangedEvent.InputTuple,
      AvatarFactoryChangedEvent.OutputTuple,
      AvatarFactoryChangedEvent.OutputObject
    >;
    AvatarFactoryChanged: TypedContractEvent<
      AvatarFactoryChangedEvent.InputTuple,
      AvatarFactoryChangedEvent.OutputTuple,
      AvatarFactoryChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
