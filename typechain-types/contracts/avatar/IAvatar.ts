/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type WearableStruct = { asset: AddressLike; tokenId: BigNumberish };

export type WearableStructOutput = [asset: string, tokenId: bigint] & {
  asset: string;
  tokenId: bigint;
};

export type DelegatedJumpRequestStruct = {
  portalId: BigNumberish;
  agreedFee: BigNumberish;
  avatarOwnerSignature: BytesLike;
};

export type DelegatedJumpRequestStructOutput = [
  portalId: bigint,
  agreedFee: bigint,
  avatarOwnerSignature: string
] & { portalId: bigint; agreedFee: bigint; avatarOwnerSignature: string };

export type AvatarJumpRequestStruct = {
  portalId: BigNumberish;
  agreedFee: BigNumberish;
  destinationCompanySignature: BytesLike;
};

export type AvatarJumpRequestStructOutput = [
  portalId: bigint,
  agreedFee: bigint,
  destinationCompanySignature: string
] & {
  portalId: bigint;
  agreedFee: bigint;
  destinationCompanySignature: string;
};

export interface IAvatarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addWearable"
      | "appearanceDetails"
      | "avatarOwnerSigningNonce"
      | "canReceiveTokensOutsideOfExperience"
      | "companySigningNonce"
      | "delegateJump"
      | "getWearables"
      | "init"
      | "isWearing"
      | "jump"
      | "location"
      | "onERC721Received"
      | "owner"
      | "removeHook"
      | "removeWearable"
      | "setAppearanceDetails"
      | "setCanReceiveTokensOutsideOfExperience"
      | "setHook"
      | "upgrade"
      | "upgradeComplete"
      | "username"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AppearanceChanged"
      | "AvatarUpgraded"
      | "JumpSuccess"
      | "LocationChanged"
      | "SignerAdded"
      | "SignerRemoved"
      | "WearableAdded"
      | "WearableRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addWearable",
    values: [WearableStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "appearanceDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarOwnerSigningNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canReceiveTokensOutsideOfExperience",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companySigningNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateJump",
    values: [DelegatedJumpRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWearing",
    values: [WearableStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "jump",
    values: [AvatarJumpRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "location", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWearable",
    values: [WearableStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppearanceDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCanReceiveTokensOutsideOfExperience",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeComplete",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "username", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWearable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appearanceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarOwnerSigningNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canReceiveTokensOutsideOfExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companySigningNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateJump",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWearing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jump", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "location", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWearable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAppearanceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCanReceiveTokensOutsideOfExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "username", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AppearanceChangedEvent {
  export type InputTuple = [appearanceDetails: BytesLike];
  export type OutputTuple = [appearanceDetails: string];
  export interface OutputObject {
    appearanceDetails: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarUpgradedEvent {
  export type InputTuple = [oldVersion: AddressLike, nextVersion: AddressLike];
  export type OutputTuple = [oldVersion: string, nextVersion: string];
  export interface OutputObject {
    oldVersion: string;
    nextVersion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JumpSuccessEvent {
  export type InputTuple = [
    experience: AddressLike,
    connectionDetails: BytesLike
  ];
  export type OutputTuple = [experience: string, connectionDetails: string];
  export interface OutputObject {
    experience: string;
    connectionDetails: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocationChangedEvent {
  export type InputTuple = [location: AddressLike];
  export type OutputTuple = [location: string];
  export interface OutputObject {
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRemovedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WearableAddedEvent {
  export type InputTuple = [wearable: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [wearable: string, tokenId: bigint];
  export interface OutputObject {
    wearable: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WearableRemovedEvent {
  export type InputTuple = [wearable: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [wearable: string, tokenId: bigint];
  export interface OutputObject {
    wearable: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAvatar extends BaseContract {
  connect(runner?: ContractRunner | null): IAvatar;
  waitForDeployment(): Promise<this>;

  interface: IAvatarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWearable: TypedContractMethod<
    [wearable: WearableStruct],
    [void],
    "nonpayable"
  >;

  appearanceDetails: TypedContractMethod<[], [string], "view">;

  avatarOwnerSigningNonce: TypedContractMethod<[], [bigint], "view">;

  canReceiveTokensOutsideOfExperience: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  companySigningNonce: TypedContractMethod<
    [signer: AddressLike],
    [bigint],
    "view"
  >;

  delegateJump: TypedContractMethod<
    [request: DelegatedJumpRequestStruct],
    [void],
    "payable"
  >;

  getWearables: TypedContractMethod<[], [WearableStructOutput[]], "view">;

  init: TypedContractMethod<
    [
      owner: AddressLike,
      defaultExperience: AddressLike,
      username: string,
      initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isWearing: TypedContractMethod<[wearable: WearableStruct], [boolean], "view">;

  jump: TypedContractMethod<
    [request: AvatarJumpRequestStruct],
    [void],
    "payable"
  >;

  location: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  removeWearable: TypedContractMethod<
    [wearable: WearableStruct],
    [void],
    "nonpayable"
  >;

  setAppearanceDetails: TypedContractMethod<
    [arg0: BytesLike],
    [void],
    "nonpayable"
  >;

  setCanReceiveTokensOutsideOfExperience: TypedContractMethod<
    [canReceive: boolean],
    [void],
    "nonpayable"
  >;

  setHook: TypedContractMethod<[hook: AddressLike], [void], "nonpayable">;

  upgrade: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  upgradeComplete: TypedContractMethod<
    [nextVersion: AddressLike],
    [void],
    "nonpayable"
  >;

  username: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWearable"
  ): TypedContractMethod<[wearable: WearableStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "appearanceDetails"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "avatarOwnerSigningNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canReceiveTokensOutsideOfExperience"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "companySigningNonce"
  ): TypedContractMethod<[signer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateJump"
  ): TypedContractMethod<
    [request: DelegatedJumpRequestStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getWearables"
  ): TypedContractMethod<[], [WearableStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      defaultExperience: AddressLike,
      username: string,
      initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWearing"
  ): TypedContractMethod<[wearable: WearableStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "jump"
  ): TypedContractMethod<[request: AvatarJumpRequestStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "location"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWearable"
  ): TypedContractMethod<[wearable: WearableStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAppearanceDetails"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCanReceiveTokensOutsideOfExperience"
  ): TypedContractMethod<[canReceive: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHook"
  ): TypedContractMethod<[hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeComplete"
  ): TypedContractMethod<[nextVersion: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "username"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AppearanceChanged"
  ): TypedContractEvent<
    AppearanceChangedEvent.InputTuple,
    AppearanceChangedEvent.OutputTuple,
    AppearanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "AvatarUpgraded"
  ): TypedContractEvent<
    AvatarUpgradedEvent.InputTuple,
    AvatarUpgradedEvent.OutputTuple,
    AvatarUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "JumpSuccess"
  ): TypedContractEvent<
    JumpSuccessEvent.InputTuple,
    JumpSuccessEvent.OutputTuple,
    JumpSuccessEvent.OutputObject
  >;
  getEvent(
    key: "LocationChanged"
  ): TypedContractEvent<
    LocationChangedEvent.InputTuple,
    LocationChangedEvent.OutputTuple,
    LocationChangedEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRemoved"
  ): TypedContractEvent<
    SignerRemovedEvent.InputTuple,
    SignerRemovedEvent.OutputTuple,
    SignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WearableAdded"
  ): TypedContractEvent<
    WearableAddedEvent.InputTuple,
    WearableAddedEvent.OutputTuple,
    WearableAddedEvent.OutputObject
  >;
  getEvent(
    key: "WearableRemoved"
  ): TypedContractEvent<
    WearableRemovedEvent.InputTuple,
    WearableRemovedEvent.OutputTuple,
    WearableRemovedEvent.OutputObject
  >;

  filters: {
    "AppearanceChanged(bytes)": TypedContractEvent<
      AppearanceChangedEvent.InputTuple,
      AppearanceChangedEvent.OutputTuple,
      AppearanceChangedEvent.OutputObject
    >;
    AppearanceChanged: TypedContractEvent<
      AppearanceChangedEvent.InputTuple,
      AppearanceChangedEvent.OutputTuple,
      AppearanceChangedEvent.OutputObject
    >;

    "AvatarUpgraded(address,address)": TypedContractEvent<
      AvatarUpgradedEvent.InputTuple,
      AvatarUpgradedEvent.OutputTuple,
      AvatarUpgradedEvent.OutputObject
    >;
    AvatarUpgraded: TypedContractEvent<
      AvatarUpgradedEvent.InputTuple,
      AvatarUpgradedEvent.OutputTuple,
      AvatarUpgradedEvent.OutputObject
    >;

    "JumpSuccess(address,bytes)": TypedContractEvent<
      JumpSuccessEvent.InputTuple,
      JumpSuccessEvent.OutputTuple,
      JumpSuccessEvent.OutputObject
    >;
    JumpSuccess: TypedContractEvent<
      JumpSuccessEvent.InputTuple,
      JumpSuccessEvent.OutputTuple,
      JumpSuccessEvent.OutputObject
    >;

    "LocationChanged(address)": TypedContractEvent<
      LocationChangedEvent.InputTuple,
      LocationChangedEvent.OutputTuple,
      LocationChangedEvent.OutputObject
    >;
    LocationChanged: TypedContractEvent<
      LocationChangedEvent.InputTuple,
      LocationChangedEvent.OutputTuple,
      LocationChangedEvent.OutputObject
    >;

    "SignerAdded(address)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;

    "SignerRemoved(address)": TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;
    SignerRemoved: TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;

    "WearableAdded(address,uint256)": TypedContractEvent<
      WearableAddedEvent.InputTuple,
      WearableAddedEvent.OutputTuple,
      WearableAddedEvent.OutputObject
    >;
    WearableAdded: TypedContractEvent<
      WearableAddedEvent.InputTuple,
      WearableAddedEvent.OutputTuple,
      WearableAddedEvent.OutputObject
    >;

    "WearableRemoved(address,uint256)": TypedContractEvent<
      WearableRemovedEvent.InputTuple,
      WearableRemovedEvent.OutputTuple,
      WearableRemovedEvent.OutputObject
    >;
    WearableRemoved: TypedContractEvent<
      WearableRemovedEvent.InputTuple,
      WearableRemovedEvent.OutputTuple,
      WearableRemovedEvent.OutputObject
    >;
  };
}
