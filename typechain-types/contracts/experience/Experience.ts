/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ExperienceConstructorArgsStruct = {
  experienceFactory: AddressLike;
  portalRegistry: AddressLike;
  experienceRegistry: AddressLike;
};

export type ExperienceConstructorArgsStructOutput = [
  experienceFactory: string,
  portalRegistry: string,
  experienceRegistry: string
] & {
  experienceFactory: string;
  portalRegistry: string;
  experienceRegistry: string;
};

export type ExperienceInitDataStruct = {
  entryFee: BigNumberish;
  connectionDetails: BytesLike;
};

export type ExperienceInitDataStructOutput = [
  entryFee: bigint,
  connectionDetails: string
] & { entryFee: bigint; connectionDetails: string };

export type JumpEntryRequestStruct = {
  sourceWorld: AddressLike;
  sourceCompany: AddressLike;
  avatar: AddressLike;
};

export type JumpEntryRequestStructOutput = [
  sourceWorld: string,
  sourceCompany: string,
  avatar: string
] & { sourceWorld: string; sourceCompany: string; avatar: string };

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export interface ExperienceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_company"
      | "addHook"
      | "addPortalCondition"
      | "changePortalFee"
      | "company"
      | "connectionDetails"
      | "encodeInitData"
      | "entering"
      | "entryFee"
      | "experienceFactory"
      | "experienceRegistry"
      | "experienceUpgraded"
      | "hook"
      | "init"
      | "name"
      | "portalRegistry"
      | "removeHook"
      | "removePortalCondition"
      | "upgrade"
      | "upgraded"
      | "vectorAddress"
      | "world"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExperienceUpgraded"
      | "HookAdded"
      | "HookRemoved"
      | "JumpEntry"
      | "PortalFeeChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_company", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPortalCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changePortalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "company", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "connectionDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeInitData",
    values: [ExperienceInitDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "entering",
    values: [JumpEntryRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "entryFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "experienceFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceUpgraded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, string, VectorAddressStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "portalRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePortalCondition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "upgraded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vectorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_company", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPortalCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "company", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entering", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "experienceFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceUpgraded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "portalRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePortalCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgraded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
}

export namespace ExperienceUpgradedEvent {
  export type InputTuple = [oldVersion: AddressLike, newVersion: AddressLike];
  export type OutputTuple = [oldVersion: string, newVersion: string];
  export interface OutputObject {
    oldVersion: string;
    newVersion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HookAddedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HookRemovedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JumpEntryEvent {
  export type InputTuple = [
    sourceWorld: AddressLike,
    sourceCompany: AddressLike,
    avatar: AddressLike,
    attachedFees: BigNumberish
  ];
  export type OutputTuple = [
    sourceWorld: string,
    sourceCompany: string,
    avatar: string,
    attachedFees: bigint
  ];
  export interface OutputObject {
    sourceWorld: string;
    sourceCompany: string;
    avatar: string;
    attachedFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalFeeChangedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Experience extends BaseContract {
  connect(runner?: ContractRunner | null): Experience;
  waitForDeployment(): Promise<this>;

  interface: ExperienceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _company: TypedContractMethod<[], [string], "view">;

  addHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  addPortalCondition: TypedContractMethod<
    [condition: AddressLike],
    [void],
    "nonpayable"
  >;

  changePortalFee: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  company: TypedContractMethod<[], [string], "view">;

  connectionDetails: TypedContractMethod<[], [string], "view">;

  encodeInitData: TypedContractMethod<
    [data: ExperienceInitDataStruct],
    [string],
    "view"
  >;

  entering: TypedContractMethod<
    [request: JumpEntryRequestStruct],
    [string],
    "payable"
  >;

  entryFee: TypedContractMethod<[], [bigint], "view">;

  experienceFactory: TypedContractMethod<[], [string], "view">;

  experienceRegistry: TypedContractMethod<[], [string], "view">;

  experienceUpgraded: TypedContractMethod<
    [nextVersion: AddressLike],
    [void],
    "nonpayable"
  >;

  hook: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<
    [
      __company: AddressLike,
      _name: string,
      vector: VectorAddressStruct,
      initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  portalRegistry: TypedContractMethod<[], [string], "view">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  removePortalCondition: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  upgraded: TypedContractMethod<[], [boolean], "view">;

  vectorAddress: TypedContractMethod<[], [VectorAddressStructOutput], "view">;

  world: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_company"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPortalCondition"
  ): TypedContractMethod<[condition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changePortalFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "company"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "connectionDetails"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encodeInitData"
  ): TypedContractMethod<[data: ExperienceInitDataStruct], [string], "view">;
  getFunction(
    nameOrSignature: "entering"
  ): TypedContractMethod<
    [request: JumpEntryRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "entryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "experienceRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "experienceUpgraded"
  ): TypedContractMethod<[nextVersion: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      __company: AddressLike,
      _name: string,
      vector: VectorAddressStruct,
      initData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "portalRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removePortalCondition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgraded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "vectorAddress"
  ): TypedContractMethod<[], [VectorAddressStructOutput], "view">;
  getFunction(
    nameOrSignature: "world"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ExperienceUpgraded"
  ): TypedContractEvent<
    ExperienceUpgradedEvent.InputTuple,
    ExperienceUpgradedEvent.OutputTuple,
    ExperienceUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "HookAdded"
  ): TypedContractEvent<
    HookAddedEvent.InputTuple,
    HookAddedEvent.OutputTuple,
    HookAddedEvent.OutputObject
  >;
  getEvent(
    key: "HookRemoved"
  ): TypedContractEvent<
    HookRemovedEvent.InputTuple,
    HookRemovedEvent.OutputTuple,
    HookRemovedEvent.OutputObject
  >;
  getEvent(
    key: "JumpEntry"
  ): TypedContractEvent<
    JumpEntryEvent.InputTuple,
    JumpEntryEvent.OutputTuple,
    JumpEntryEvent.OutputObject
  >;
  getEvent(
    key: "PortalFeeChanged"
  ): TypedContractEvent<
    PortalFeeChangedEvent.InputTuple,
    PortalFeeChangedEvent.OutputTuple,
    PortalFeeChangedEvent.OutputObject
  >;

  filters: {
    "ExperienceUpgraded(address,address)": TypedContractEvent<
      ExperienceUpgradedEvent.InputTuple,
      ExperienceUpgradedEvent.OutputTuple,
      ExperienceUpgradedEvent.OutputObject
    >;
    ExperienceUpgraded: TypedContractEvent<
      ExperienceUpgradedEvent.InputTuple,
      ExperienceUpgradedEvent.OutputTuple,
      ExperienceUpgradedEvent.OutputObject
    >;

    "HookAdded(address)": TypedContractEvent<
      HookAddedEvent.InputTuple,
      HookAddedEvent.OutputTuple,
      HookAddedEvent.OutputObject
    >;
    HookAdded: TypedContractEvent<
      HookAddedEvent.InputTuple,
      HookAddedEvent.OutputTuple,
      HookAddedEvent.OutputObject
    >;

    "HookRemoved(address)": TypedContractEvent<
      HookRemovedEvent.InputTuple,
      HookRemovedEvent.OutputTuple,
      HookRemovedEvent.OutputObject
    >;
    HookRemoved: TypedContractEvent<
      HookRemovedEvent.InputTuple,
      HookRemovedEvent.OutputTuple,
      HookRemovedEvent.OutputObject
    >;

    "JumpEntry(address,address,address,uint256)": TypedContractEvent<
      JumpEntryEvent.InputTuple,
      JumpEntryEvent.OutputTuple,
      JumpEntryEvent.OutputObject
    >;
    JumpEntry: TypedContractEvent<
      JumpEntryEvent.InputTuple,
      JumpEntryEvent.OutputTuple,
      JumpEntryEvent.OutputObject
    >;

    "PortalFeeChanged(uint256)": TypedContractEvent<
      PortalFeeChangedEvent.InputTuple,
      PortalFeeChangedEvent.OutputTuple,
      PortalFeeChangedEvent.OutputObject
    >;
    PortalFeeChanged: TypedContractEvent<
      PortalFeeChangedEvent.InputTuple,
      PortalFeeChangedEvent.OutputTuple,
      PortalFeeChangedEvent.OutputObject
    >;
  };
}
