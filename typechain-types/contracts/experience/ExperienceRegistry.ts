/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ExperienceRegistryConstructorArgsStruct = {
  mainAdmin: AddressLike;
  experienceFactory: AddressLike;
  compRegistry: AddressLike;
  portRegistry: AddressLike;
  admins: AddressLike[];
};

export type ExperienceRegistryConstructorArgsStructOutput = [
  mainAdmin: string,
  experienceFactory: string,
  compRegistry: string,
  portRegistry: string,
  admins: string[]
] & {
  mainAdmin: string;
  experienceFactory: string;
  compRegistry: string;
  portRegistry: string;
  admins: string[];
};

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type ExperienceInfoStruct = {
  company: AddressLike;
  world: AddressLike;
  experience: AddressLike;
  portalId: BigNumberish;
};

export type ExperienceInfoStructOutput = [
  company: string,
  world: string,
  experience: string,
  portalId: bigint
] & { company: string; world: string; experience: string; portalId: bigint };

export type RegisterExperienceRequestStruct = {
  vector: VectorAddressStruct;
  initData: BytesLike;
  name: string;
};

export type RegisterExperienceRequestStructOutput = [
  vector: VectorAddressStructOutput,
  initData: string,
  name: string
] & { vector: VectorAddressStructOutput; initData: string; name: string };

export interface ExperienceRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "_experiencesByVectorHash"
      | "currentExperienceVersion"
      | "experiencesByAddress"
      | "experiencesByName"
      | "getExperienceByVector"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isExperience"
      | "registerExperience"
      | "renounceRole"
      | "revokeRole"
      | "setCompanyRegistry"
      | "setExperienceFactory"
      | "setPortalRegistry"
      | "supportsInterface"
      | "upgradeExperience"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExperienceRegistered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_experiencesByVectorHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentExperienceVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experiencesByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "experiencesByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExperienceByVector",
    values: [VectorAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExperience",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExperience",
    values: [RegisterExperienceRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompanyRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPortalRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExperience",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_experiencesByVectorHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentExperienceVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experiencesByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experiencesByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExperienceByVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCompanyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPortalRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExperience",
    data: BytesLike
  ): Result;
}

export namespace ExperienceRegisteredEvent {
  export type InputTuple = [
    world: AddressLike,
    company: AddressLike,
    experience: AddressLike,
    name: string
  ];
  export type OutputTuple = [
    world: string,
    company: string,
    experience: string,
    name: string
  ];
  export interface OutputObject {
    world: string;
    company: string;
    experience: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExperienceRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ExperienceRegistry;
  waitForDeployment(): Promise<this>;

  interface: ExperienceRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  _experiencesByVectorHash: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;

  currentExperienceVersion: TypedContractMethod<[], [bigint], "view">;

  experiencesByAddress: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;

  experiencesByName: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;

  getExperienceByVector: TypedContractMethod<
    [vector: VectorAddressStruct],
    [ExperienceInfoStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isExperience: TypedContractMethod<[exp: AddressLike], [boolean], "view">;

  registerExperience: TypedContractMethod<
    [request: RegisterExperienceRequestStruct],
    [[string, bigint]],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCompanyRegistry: TypedContractMethod<
    [reg: AddressLike],
    [void],
    "nonpayable"
  >;

  setExperienceFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setPortalRegistry: TypedContractMethod<
    [reg: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeExperience: TypedContractMethod<
    [initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_experiencesByVectorHash"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentExperienceVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experiencesByAddress"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "experiencesByName"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        company: string;
        world: string;
        experience: string;
        portalId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExperienceByVector"
  ): TypedContractMethod<
    [vector: VectorAddressStruct],
    [ExperienceInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isExperience"
  ): TypedContractMethod<[exp: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerExperience"
  ): TypedContractMethod<
    [request: RegisterExperienceRequestStruct],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCompanyRegistry"
  ): TypedContractMethod<[reg: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExperienceFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPortalRegistry"
  ): TypedContractMethod<[reg: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeExperience"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ExperienceRegistered"
  ): TypedContractEvent<
    ExperienceRegisteredEvent.InputTuple,
    ExperienceRegisteredEvent.OutputTuple,
    ExperienceRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ExperienceRegistered(address,address,address,string)": TypedContractEvent<
      ExperienceRegisteredEvent.InputTuple,
      ExperienceRegisteredEvent.OutputTuple,
      ExperienceRegisteredEvent.OutputObject
    >;
    ExperienceRegistered: TypedContractEvent<
      ExperienceRegisteredEvent.InputTuple,
      ExperienceRegisteredEvent.OutputTuple,
      ExperienceRegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
