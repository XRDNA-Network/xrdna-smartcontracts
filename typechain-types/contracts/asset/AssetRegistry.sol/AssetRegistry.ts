/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface AssetRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "addAssetCondition"
      | "assetExists"
      | "assetFactory"
      | "assetsByOriginalAddressAndChain"
      | "canUseAsset"
      | "canViewAsset"
      | "getAssetCondition"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isRegisteredAsset"
      | "registerAsset"
      | "registeredAssets"
      | "removeAssetCondition"
      | "renounceRole"
      | "revokeRole"
      | "setAssetFactory"
      | "supportsInterface"
      | "upgradeAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetConditionAdded"
      | "AssetConditionRemoved"
      | "AssetCreated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetCondition",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetExists",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetsByOriginalAddressAndChain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUseAsset",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canViewAsset",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAsset",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetsByOriginalAddressAndChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canViewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAsset",
    data: BytesLike
  ): Result;
}

export namespace AssetConditionAddedEvent {
  export type InputTuple = [asset: AddressLike, condition: AddressLike];
  export type OutputTuple = [asset: string, condition: string];
  export interface OutputObject {
    asset: string;
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConditionRemovedEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetCreatedEvent {
  export type InputTuple = [asset: AddressLike, assetType: BigNumberish];
  export type OutputTuple = [asset: string, assetType: bigint];
  export interface OutputObject {
    asset: string;
    assetType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AssetRegistry;
  waitForDeployment(): Promise<this>;

  interface: AssetRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addAssetCondition: TypedContractMethod<
    [asset: AddressLike, condition: AddressLike],
    [void],
    "nonpayable"
  >;

  assetExists: TypedContractMethod<
    [original: AddressLike, chainId: BigNumberish],
    [boolean],
    "view"
  >;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetsByOriginalAddressAndChain: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  canUseAsset: TypedContractMethod<
    [
      asset: AddressLike,
      world: AddressLike,
      company: AddressLike,
      experience: AddressLike
    ],
    [boolean],
    "view"
  >;

  canViewAsset: TypedContractMethod<
    [
      asset: AddressLike,
      world: AddressLike,
      company: AddressLike,
      experience: AddressLike
    ],
    [boolean],
    "view"
  >;

  getAssetCondition: TypedContractMethod<
    [asset: AddressLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredAsset: TypedContractMethod<
    [asset: AddressLike],
    [boolean],
    "view"
  >;

  registerAsset: TypedContractMethod<
    [assetType: BigNumberish, initData: BytesLike],
    [string],
    "nonpayable"
  >;

  registeredAssets: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { issuer: string; condition: string }],
    "view"
  >;

  removeAssetCondition: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetFactory: TypedContractMethod<
    [_assetFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeAsset: TypedContractMethod<
    [asset: AddressLike, assetType: BigNumberish, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAssetCondition"
  ): TypedContractMethod<
    [asset: AddressLike, condition: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetExists"
  ): TypedContractMethod<
    [original: AddressLike, chainId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetsByOriginalAddressAndChain"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "canUseAsset"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      world: AddressLike,
      company: AddressLike,
      experience: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canViewAsset"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      world: AddressLike,
      company: AddressLike,
      experience: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetCondition"
  ): TypedContractMethod<[asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredAsset"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<
    [assetType: BigNumberish, initData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredAssets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { issuer: string; condition: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAssetCondition"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetFactory"
  ): TypedContractMethod<[_assetFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeAsset"
  ): TypedContractMethod<
    [asset: AddressLike, assetType: BigNumberish, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetConditionAdded"
  ): TypedContractEvent<
    AssetConditionAddedEvent.InputTuple,
    AssetConditionAddedEvent.OutputTuple,
    AssetConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetConditionRemoved"
  ): TypedContractEvent<
    AssetConditionRemovedEvent.InputTuple,
    AssetConditionRemovedEvent.OutputTuple,
    AssetConditionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AssetCreated"
  ): TypedContractEvent<
    AssetCreatedEvent.InputTuple,
    AssetCreatedEvent.OutputTuple,
    AssetCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AssetConditionAdded(address,address)": TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;
    AssetConditionAdded: TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;

    "AssetConditionRemoved(address)": TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;
    AssetConditionRemoved: TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;

    "AssetCreated(address,uint256)": TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;
    AssetCreated: TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
