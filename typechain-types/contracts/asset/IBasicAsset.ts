/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AssetCheckArgsStruct = {
  asset: AddressLike;
  world: AddressLike;
  company: AddressLike;
  experience: AddressLike;
  avatar: AddressLike;
};

export type AssetCheckArgsStructOutput = [
  asset: string,
  world: string,
  company: string,
  experience: string,
  avatar: string
] & {
  asset: string;
  world: string;
  company: string;
  experience: string;
  avatar: string;
};

export interface IBasicAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCondition"
      | "addHook"
      | "canUseAsset"
      | "canViewAsset"
      | "init"
      | "issuer"
      | "originAddress"
      | "originChainId"
      | "removeCondition"
      | "removeHook"
      | "upgrade"
      | "upgradeComplete"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUseAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canViewAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeComplete",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canViewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface IBasicAsset extends BaseContract {
  connect(runner?: ContractRunner | null): IBasicAsset;
  waitForDeployment(): Promise<this>;

  interface: IBasicAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCondition: TypedContractMethod<
    [condition: AddressLike],
    [void],
    "nonpayable"
  >;

  addHook: TypedContractMethod<[hook: AddressLike], [void], "nonpayable">;

  canUseAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  canViewAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  init: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  issuer: TypedContractMethod<[], [string], "view">;

  originAddress: TypedContractMethod<[], [string], "view">;

  originChainId: TypedContractMethod<[], [bigint], "view">;

  removeCondition: TypedContractMethod<[], [void], "nonpayable">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  upgradeComplete: TypedContractMethod<
    [nextVersion: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCondition"
  ): TypedContractMethod<[condition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<[hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canUseAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "canViewAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeCondition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeComplete"
  ): TypedContractMethod<[nextVersion: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
