/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BaseAssetArgsStruct = {
  assetFactory: AddressLike;
  assetRegistry: AddressLike;
  avatarRegistry: AddressLike;
  experienceRegistry: AddressLike;
};

export type BaseAssetArgsStructOutput = [
  assetFactory: string,
  assetRegistry: string,
  avatarRegistry: string,
  experienceRegistry: string
] & {
  assetFactory: string;
  assetRegistry: string;
  avatarRegistry: string;
  experienceRegistry: string;
};

export type AssetCheckArgsStruct = {
  asset: AddressLike;
  world: AddressLike;
  company: AddressLike;
  experience: AddressLike;
  avatar: AddressLike;
};

export type AssetCheckArgsStructOutput = [
  asset: string,
  world: string,
  company: string,
  experience: string,
  avatar: string
] & {
  asset: string;
  world: string;
  company: string;
  experience: string;
  avatar: string;
};

export type ERC20InitDataStruct = {
  originChainAddress: AddressLike;
  issuer: AddressLike;
  decimals: BigNumberish;
  originChainId: BigNumberish;
  name: string;
  symbol: string;
};

export type ERC20InitDataStructOutput = [
  originChainAddress: string,
  issuer: string,
  decimals: bigint,
  originChainId: bigint,
  name: string,
  symbol: string
] & {
  originChainAddress: string;
  issuer: string;
  decimals: bigint;
  originChainId: bigint;
  name: string;
  symbol: string;
};

export interface NTERC20AssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCondition"
      | "addHook"
      | "allowance"
      | "approve"
      | "assetFactory"
      | "assetRegistry"
      | "avatarRegistry"
      | "balanceOf"
      | "canMint"
      | "canUseAsset"
      | "canViewAsset"
      | "decimals"
      | "encodeInitData"
      | "experienceRegistry"
      | "init"
      | "issuer"
      | "mint"
      | "name"
      | "originAddress"
      | "originChainId"
      | "removeCondition"
      | "removeHook"
      | "revoke"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "upgrade"
      | "upgradeComplete"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AssetConditionAdded"
      | "AssetConditionRemoved"
      | "AssetHookAdded"
      | "AssetHookRemoved"
      | "ERC20Minted"
      | "ERC20Upgraded"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUseAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canViewAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeInitData",
    values: [ERC20InitDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "experienceRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeComplete",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canViewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConditionAddedEvent {
  export type InputTuple = [condition: AddressLike];
  export type OutputTuple = [condition: string];
  export interface OutputObject {
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConditionRemovedEvent {
  export type InputTuple = [condition: AddressLike];
  export type OutputTuple = [condition: string];
  export interface OutputObject {
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHookAddedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHookRemovedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20MintedEvent {
  export type InputTuple = [to: AddressLike, amt: BigNumberish];
  export type OutputTuple = [to: string, amt: bigint];
  export interface OutputObject {
    to: string;
    amt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20UpgradedEvent {
  export type InputTuple = [oldAsset: AddressLike, newAsset: AddressLike];
  export type OutputTuple = [oldAsset: string, newAsset: string];
  export interface OutputObject {
    oldAsset: string;
    newAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NTERC20Asset extends BaseContract {
  connect(runner?: ContractRunner | null): NTERC20Asset;
  waitForDeployment(): Promise<this>;

  interface: NTERC20AssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCondition: TypedContractMethod<
    [condition: AddressLike],
    [void],
    "nonpayable"
  >;

  addHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetRegistry: TypedContractMethod<[], [string], "view">;

  avatarRegistry: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  canMint: TypedContractMethod<
    [to: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  canUseAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  canViewAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  encodeInitData: TypedContractMethod<
    [data: ERC20InitDataStruct],
    [string],
    "view"
  >;

  experienceRegistry: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  issuer: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  originAddress: TypedContractMethod<[], [string], "view">;

  originChainId: TypedContractMethod<[], [bigint], "view">;

  removeCondition: TypedContractMethod<[], [void], "nonpayable">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  revoke: TypedContractMethod<
    [tgt: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  upgradeComplete: TypedContractMethod<
    [newAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCondition"
  ): TypedContractMethod<[condition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "avatarRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canMint"
  ): TypedContractMethod<[to: AddressLike, arg1: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canUseAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "canViewAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "encodeInitData"
  ): TypedContractMethod<[data: ERC20InitDataStruct], [string], "view">;
  getFunction(
    nameOrSignature: "experienceRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeCondition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [tgt: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeComplete"
  ): TypedContractMethod<[newAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AssetConditionAdded"
  ): TypedContractEvent<
    AssetConditionAddedEvent.InputTuple,
    AssetConditionAddedEvent.OutputTuple,
    AssetConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetConditionRemoved"
  ): TypedContractEvent<
    AssetConditionRemovedEvent.InputTuple,
    AssetConditionRemovedEvent.OutputTuple,
    AssetConditionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AssetHookAdded"
  ): TypedContractEvent<
    AssetHookAddedEvent.InputTuple,
    AssetHookAddedEvent.OutputTuple,
    AssetHookAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetHookRemoved"
  ): TypedContractEvent<
    AssetHookRemovedEvent.InputTuple,
    AssetHookRemovedEvent.OutputTuple,
    AssetHookRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Minted"
  ): TypedContractEvent<
    ERC20MintedEvent.InputTuple,
    ERC20MintedEvent.OutputTuple,
    ERC20MintedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Upgraded"
  ): TypedContractEvent<
    ERC20UpgradedEvent.InputTuple,
    ERC20UpgradedEvent.OutputTuple,
    ERC20UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AssetConditionAdded(address)": TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;
    AssetConditionAdded: TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;

    "AssetConditionRemoved(address)": TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;
    AssetConditionRemoved: TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;

    "AssetHookAdded(address)": TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;
    AssetHookAdded: TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;

    "AssetHookRemoved(address)": TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;
    AssetHookRemoved: TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;

    "ERC20Minted(address,uint256)": TypedContractEvent<
      ERC20MintedEvent.InputTuple,
      ERC20MintedEvent.OutputTuple,
      ERC20MintedEvent.OutputObject
    >;
    ERC20Minted: TypedContractEvent<
      ERC20MintedEvent.InputTuple,
      ERC20MintedEvent.OutputTuple,
      ERC20MintedEvent.OutputObject
    >;

    "ERC20Upgraded(address,address)": TypedContractEvent<
      ERC20UpgradedEvent.InputTuple,
      ERC20UpgradedEvent.OutputTuple,
      ERC20UpgradedEvent.OutputObject
    >;
    ERC20Upgraded: TypedContractEvent<
      ERC20UpgradedEvent.InputTuple,
      ERC20UpgradedEvent.OutputTuple,
      ERC20UpgradedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
