/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AssetCheckArgsStruct = {
  asset: AddressLike;
  world: AddressLike;
  company: AddressLike;
  experience: AddressLike;
  avatar: AddressLike;
};

export type AssetCheckArgsStructOutput = [
  asset: string,
  world: string,
  company: string,
  experience: string,
  avatar: string
] & {
  asset: string;
  world: string;
  company: string;
  experience: string;
  avatar: string;
};

export interface BaseAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCondition"
      | "addHook"
      | "assetFactory"
      | "assetRegistry"
      | "avatarRegistry"
      | "canUseAsset"
      | "canViewAsset"
      | "companyRegistry"
      | "hook"
      | "init"
      | "issuer"
      | "originAddress"
      | "originChainId"
      | "removeCondition"
      | "removeHook"
      | "upgrade"
      | "upgradeComplete"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetConditionAdded"
      | "AssetConditionRemoved"
      | "AssetHookAdded"
      | "AssetHookRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canUseAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canViewAsset",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "companyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeComplete",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canViewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AssetConditionAddedEvent {
  export type InputTuple = [condition: AddressLike];
  export type OutputTuple = [condition: string];
  export interface OutputObject {
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConditionRemovedEvent {
  export type InputTuple = [condition: AddressLike];
  export type OutputTuple = [condition: string];
  export interface OutputObject {
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHookAddedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHookRemovedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseAsset extends BaseContract {
  connect(runner?: ContractRunner | null): BaseAsset;
  waitForDeployment(): Promise<this>;

  interface: BaseAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCondition: TypedContractMethod<
    [condition: AddressLike],
    [void],
    "nonpayable"
  >;

  addHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetRegistry: TypedContractMethod<[], [string], "view">;

  avatarRegistry: TypedContractMethod<[], [string], "view">;

  canUseAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  canViewAsset: TypedContractMethod<
    [args: AssetCheckArgsStruct],
    [boolean],
    "view"
  >;

  companyRegistry: TypedContractMethod<[], [string], "view">;

  hook: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  issuer: TypedContractMethod<[], [string], "view">;

  originAddress: TypedContractMethod<[], [string], "view">;

  originChainId: TypedContractMethod<[], [bigint], "view">;

  removeCondition: TypedContractMethod<[], [void], "nonpayable">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  upgradeComplete: TypedContractMethod<
    [nextVersion: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCondition"
  ): TypedContractMethod<[condition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "avatarRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canUseAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "canViewAsset"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "companyRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeCondition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeComplete"
  ): TypedContractMethod<[nextVersion: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AssetConditionAdded"
  ): TypedContractEvent<
    AssetConditionAddedEvent.InputTuple,
    AssetConditionAddedEvent.OutputTuple,
    AssetConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetConditionRemoved"
  ): TypedContractEvent<
    AssetConditionRemovedEvent.InputTuple,
    AssetConditionRemovedEvent.OutputTuple,
    AssetConditionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AssetHookAdded"
  ): TypedContractEvent<
    AssetHookAddedEvent.InputTuple,
    AssetHookAddedEvent.OutputTuple,
    AssetHookAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetHookRemoved"
  ): TypedContractEvent<
    AssetHookRemovedEvent.InputTuple,
    AssetHookRemovedEvent.OutputTuple,
    AssetHookRemovedEvent.OutputObject
  >;

  filters: {
    "AssetConditionAdded(address)": TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;
    AssetConditionAdded: TypedContractEvent<
      AssetConditionAddedEvent.InputTuple,
      AssetConditionAddedEvent.OutputTuple,
      AssetConditionAddedEvent.OutputObject
    >;

    "AssetConditionRemoved(address)": TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;
    AssetConditionRemoved: TypedContractEvent<
      AssetConditionRemovedEvent.InputTuple,
      AssetConditionRemovedEvent.OutputTuple,
      AssetConditionRemovedEvent.OutputObject
    >;

    "AssetHookAdded(address)": TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;
    AssetHookAdded: TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;

    "AssetHookRemoved(address)": TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;
    AssetHookRemoved: TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;
  };
}
