/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AssetCheckArgsStruct = {
  asset: AddressLike;
  world: AddressLike;
  company: AddressLike;
  experience: AddressLike;
  avatar: AddressLike;
};

export type AssetCheckArgsStructOutput = [
  asset: string,
  world: string,
  company: string,
  experience: string,
  avatar: string
] & {
  asset: string;
  world: string;
  company: string;
  experience: string;
  avatar: string;
};

export interface IAssetConditionInterface extends Interface {
  getFunction(nameOrSignature: "canUse" | "canView"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canUse",
    values: [AssetCheckArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canView",
    values: [AssetCheckArgsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "canUse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canView", data: BytesLike): Result;
}

export interface IAssetCondition extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetCondition;
  waitForDeployment(): Promise<this>;

  interface: IAssetConditionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canUse: TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;

  canView: TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canUse"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "canView"
  ): TypedContractMethod<[args: AssetCheckArgsStruct], [boolean], "view">;

  filters: {};
}
