/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BaseAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addHook"
      | "assetFactory"
      | "assetRegistry"
      | "assetType"
      | "avatarRegistry"
      | "experienceRegistry"
      | "hook"
      | "issuer"
      | "originAddress"
      | "originChainId"
      | "removeHook"
      | "upgraded"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssetHookAdded" | "AssetHookRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "avatarRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgraded", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avatarRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgraded", data: BytesLike): Result;
}

export namespace AssetHookAddedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHookRemovedEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseAsset extends BaseContract {
  connect(runner?: ContractRunner | null): BaseAsset;
  waitForDeployment(): Promise<this>;

  interface: BaseAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetRegistry: TypedContractMethod<[], [string], "view">;

  assetType: TypedContractMethod<[], [bigint], "view">;

  avatarRegistry: TypedContractMethod<[], [string], "view">;

  experienceRegistry: TypedContractMethod<[], [string], "view">;

  hook: TypedContractMethod<[], [string], "view">;

  issuer: TypedContractMethod<[], [string], "view">;

  originAddress: TypedContractMethod<[], [string], "view">;

  originChainId: TypedContractMethod<[], [bigint], "view">;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  upgraded: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "avatarRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "experienceRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "originChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgraded"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AssetHookAdded"
  ): TypedContractEvent<
    AssetHookAddedEvent.InputTuple,
    AssetHookAddedEvent.OutputTuple,
    AssetHookAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetHookRemoved"
  ): TypedContractEvent<
    AssetHookRemovedEvent.InputTuple,
    AssetHookRemovedEvent.OutputTuple,
    AssetHookRemovedEvent.OutputObject
  >;

  filters: {
    "AssetHookAdded(address)": TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;
    AssetHookAdded: TypedContractEvent<
      AssetHookAddedEvent.InputTuple,
      AssetHookAddedEvent.OutputTuple,
      AssetHookAddedEvent.OutputObject
    >;

    "AssetHookRemoved(address)": TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;
    AssetHookRemoved: TypedContractEvent<
      AssetHookRemovedEvent.InputTuple,
      AssetHookRemovedEvent.OutputTuple,
      AssetHookRemovedEvent.OutputObject
    >;
  };
}
