/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type CompanyRegistrationRequestStruct = {
  sendTokensToCompanyOwner: boolean;
  owner: AddressLike;
  vector: VectorAddressStruct;
  initData: BytesLike;
  name: string;
};

export type CompanyRegistrationRequestStructOutput = [
  sendTokensToCompanyOwner: boolean,
  owner: string,
  vector: VectorAddressStructOutput,
  initData: string,
  name: string
] & {
  sendTokensToCompanyOwner: boolean;
  owner: string;
  vector: VectorAddressStructOutput;
  initData: string;
  name: string;
};

export interface ICompanyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isRegisteredCompany"
      | "registerCompany"
      | "setCompanyFactory"
      | "setWorldRegistry"
      | "upgradeCompany"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CompanyRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "isRegisteredCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCompany",
    values: [CompanyRegistrationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompanyFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCompany",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isRegisteredCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompanyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCompany",
    data: BytesLike
  ): Result;
}

export namespace CompanyRegisteredEvent {
  export type InputTuple = [company: AddressLike, arg1: VectorAddressStruct];
  export type OutputTuple = [company: string, arg1: VectorAddressStructOutput];
  export interface OutputObject {
    company: string;
    arg1: VectorAddressStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICompanyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ICompanyRegistry;
  waitForDeployment(): Promise<this>;

  interface: ICompanyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isRegisteredCompany: TypedContractMethod<
    [company: AddressLike],
    [boolean],
    "view"
  >;

  registerCompany: TypedContractMethod<
    [request: CompanyRegistrationRequestStruct],
    [string],
    "payable"
  >;

  setCompanyFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setWorldRegistry: TypedContractMethod<
    [registry: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeCompany: TypedContractMethod<
    [initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isRegisteredCompany"
  ): TypedContractMethod<[company: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerCompany"
  ): TypedContractMethod<
    [request: CompanyRegistrationRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setCompanyFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWorldRegistry"
  ): TypedContractMethod<[registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeCompany"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "CompanyRegistered"
  ): TypedContractEvent<
    CompanyRegisteredEvent.InputTuple,
    CompanyRegisteredEvent.OutputTuple,
    CompanyRegisteredEvent.OutputObject
  >;

  filters: {
    "CompanyRegistered(address,tuple)": TypedContractEvent<
      CompanyRegisteredEvent.InputTuple,
      CompanyRegisteredEvent.OutputTuple,
      CompanyRegisteredEvent.OutputObject
    >;
    CompanyRegistered: TypedContractEvent<
      CompanyRegisteredEvent.InputTuple,
      CompanyRegisteredEvent.OutputTuple,
      CompanyRegisteredEvent.OutputObject
    >;
  };
}
