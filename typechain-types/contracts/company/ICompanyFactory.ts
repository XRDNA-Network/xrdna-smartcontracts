/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type CompanyInitArgsStruct = {
  owner: AddressLike;
  world: AddressLike;
  vector: VectorAddressStruct;
  initData: BytesLike;
  name: string;
};

export type CompanyInitArgsStructOutput = [
  owner: string,
  world: string,
  vector: VectorAddressStructOutput,
  initData: string,
  name: string
] & {
  owner: string;
  world: string;
  vector: VectorAddressStructOutput;
  initData: string;
  name: string;
};

export interface ICompanyFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createCompany" | "supportsVersion" | "upgradeCompany"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCompany",
    values: [CompanyInitArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCompany",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCompany",
    data: BytesLike
  ): Result;
}

export interface ICompanyFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ICompanyFactory;
  waitForDeployment(): Promise<this>;

  interface: ICompanyFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createCompany: TypedContractMethod<
    [request: CompanyInitArgsStruct],
    [string],
    "nonpayable"
  >;

  supportsVersion: TypedContractMethod<[], [bigint], "view">;

  upgradeCompany: TypedContractMethod<
    [company: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createCompany"
  ): TypedContractMethod<
    [request: CompanyInitArgsStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeCompany"
  ): TypedContractMethod<
    [company: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
