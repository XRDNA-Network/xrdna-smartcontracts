/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AddPortalRequestStruct = {
  destination: AddressLike;
  fee: BigNumberish;
};

export type AddPortalRequestStructOutput = [
  destination: string,
  fee: bigint
] & { destination: string; fee: bigint };

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type PortalInfoStruct = {
  destination: AddressLike;
  condition: AddressLike;
  fee: BigNumberish;
};

export type PortalInfoStructOutput = [
  destination: string,
  condition: string,
  fee: bigint
] & { destination: string; condition: string; fee: bigint };

export interface IPortalRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCondition"
      | "addPortal"
      | "changePortalFee"
      | "getIdForExperience"
      | "getIdForVectorAddress"
      | "getPortalInfoByAddress"
      | "getPortalInfoById"
      | "getPortalInfoByVectorAddress"
      | "jumpRequest"
      | "removeCondition"
      | "upgradeExperiencePortal"
      | "upgradeRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JumpSuccessful"
      | "PortalAdded"
      | "PortalConditionAdded"
      | "PortalConditionRemoved"
      | "PortalDestinationUpgraded"
      | "PortalFeeChanged"
      | "PortalRegistryUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCondition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPortal",
    values: [AddPortalRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "changePortalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdForExperience",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdForVectorAddress",
    values: [VectorAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortalInfoByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortalInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortalInfoByVectorAddress",
    values: [VectorAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "jumpRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExperiencePortal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRegistry",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPortal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdForExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdForVectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortalInfoByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortalInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortalInfoByVectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jumpRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExperiencePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRegistry",
    data: BytesLike
  ): Result;
}

export namespace JumpSuccessfulEvent {
  export type InputTuple = [
    portalId: BigNumberish,
    avatar: AddressLike,
    destination: AddressLike
  ];
  export type OutputTuple = [
    portalId: bigint,
    avatar: string,
    destination: string
  ];
  export interface OutputObject {
    portalId: bigint;
    avatar: string;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalAddedEvent {
  export type InputTuple = [portalId: BigNumberish, experience: AddressLike];
  export type OutputTuple = [portalId: bigint, experience: string];
  export interface OutputObject {
    portalId: bigint;
    experience: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalConditionAddedEvent {
  export type InputTuple = [portalId: BigNumberish, condition: AddressLike];
  export type OutputTuple = [portalId: bigint, condition: string];
  export interface OutputObject {
    portalId: bigint;
    condition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalConditionRemovedEvent {
  export type InputTuple = [portalId: BigNumberish];
  export type OutputTuple = [portalId: bigint];
  export interface OutputObject {
    portalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalDestinationUpgradedEvent {
  export type InputTuple = [
    portalId: BigNumberish,
    oldExperience: AddressLike,
    newExperience: AddressLike
  ];
  export type OutputTuple = [
    portalId: bigint,
    oldExperience: string,
    newExperience: string
  ];
  export interface OutputObject {
    portalId: bigint;
    oldExperience: string;
    newExperience: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalFeeChangedEvent {
  export type InputTuple = [portalId: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [portalId: bigint, newFee: bigint];
  export interface OutputObject {
    portalId: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PortalRegistryUpgradedEvent {
  export type InputTuple = [newRegistry: AddressLike];
  export type OutputTuple = [newRegistry: string];
  export interface OutputObject {
    newRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPortalRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IPortalRegistry;
  waitForDeployment(): Promise<this>;

  interface: IPortalRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCondition: TypedContractMethod<
    [condition: AddressLike],
    [void],
    "nonpayable"
  >;

  addPortal: TypedContractMethod<
    [arg0: AddPortalRequestStruct],
    [bigint],
    "nonpayable"
  >;

  changePortalFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getIdForExperience: TypedContractMethod<
    [experience: AddressLike],
    [bigint],
    "view"
  >;

  getIdForVectorAddress: TypedContractMethod<
    [va: VectorAddressStruct],
    [bigint],
    "view"
  >;

  getPortalInfoByAddress: TypedContractMethod<
    [experience: AddressLike],
    [PortalInfoStructOutput],
    "view"
  >;

  getPortalInfoById: TypedContractMethod<
    [portalId: BigNumberish],
    [PortalInfoStructOutput],
    "view"
  >;

  getPortalInfoByVectorAddress: TypedContractMethod<
    [va: VectorAddressStruct],
    [PortalInfoStructOutput],
    "view"
  >;

  jumpRequest: TypedContractMethod<
    [portalId: BigNumberish],
    [string],
    "payable"
  >;

  removeCondition: TypedContractMethod<[], [void], "nonpayable">;

  upgradeExperiencePortal: TypedContractMethod<
    [oldExperience: AddressLike, newExperience: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeRegistry: TypedContractMethod<
    [newRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCondition"
  ): TypedContractMethod<[condition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPortal"
  ): TypedContractMethod<
    [arg0: AddPortalRequestStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePortalFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getIdForExperience"
  ): TypedContractMethod<[experience: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdForVectorAddress"
  ): TypedContractMethod<[va: VectorAddressStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPortalInfoByAddress"
  ): TypedContractMethod<
    [experience: AddressLike],
    [PortalInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPortalInfoById"
  ): TypedContractMethod<
    [portalId: BigNumberish],
    [PortalInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPortalInfoByVectorAddress"
  ): TypedContractMethod<
    [va: VectorAddressStruct],
    [PortalInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jumpRequest"
  ): TypedContractMethod<[portalId: BigNumberish], [string], "payable">;
  getFunction(
    nameOrSignature: "removeCondition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeExperiencePortal"
  ): TypedContractMethod<
    [oldExperience: AddressLike, newExperience: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeRegistry"
  ): TypedContractMethod<[newRegistry: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "JumpSuccessful"
  ): TypedContractEvent<
    JumpSuccessfulEvent.InputTuple,
    JumpSuccessfulEvent.OutputTuple,
    JumpSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "PortalAdded"
  ): TypedContractEvent<
    PortalAddedEvent.InputTuple,
    PortalAddedEvent.OutputTuple,
    PortalAddedEvent.OutputObject
  >;
  getEvent(
    key: "PortalConditionAdded"
  ): TypedContractEvent<
    PortalConditionAddedEvent.InputTuple,
    PortalConditionAddedEvent.OutputTuple,
    PortalConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "PortalConditionRemoved"
  ): TypedContractEvent<
    PortalConditionRemovedEvent.InputTuple,
    PortalConditionRemovedEvent.OutputTuple,
    PortalConditionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PortalDestinationUpgraded"
  ): TypedContractEvent<
    PortalDestinationUpgradedEvent.InputTuple,
    PortalDestinationUpgradedEvent.OutputTuple,
    PortalDestinationUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "PortalFeeChanged"
  ): TypedContractEvent<
    PortalFeeChangedEvent.InputTuple,
    PortalFeeChangedEvent.OutputTuple,
    PortalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "PortalRegistryUpgraded"
  ): TypedContractEvent<
    PortalRegistryUpgradedEvent.InputTuple,
    PortalRegistryUpgradedEvent.OutputTuple,
    PortalRegistryUpgradedEvent.OutputObject
  >;

  filters: {
    "JumpSuccessful(uint256,address,address)": TypedContractEvent<
      JumpSuccessfulEvent.InputTuple,
      JumpSuccessfulEvent.OutputTuple,
      JumpSuccessfulEvent.OutputObject
    >;
    JumpSuccessful: TypedContractEvent<
      JumpSuccessfulEvent.InputTuple,
      JumpSuccessfulEvent.OutputTuple,
      JumpSuccessfulEvent.OutputObject
    >;

    "PortalAdded(uint256,address)": TypedContractEvent<
      PortalAddedEvent.InputTuple,
      PortalAddedEvent.OutputTuple,
      PortalAddedEvent.OutputObject
    >;
    PortalAdded: TypedContractEvent<
      PortalAddedEvent.InputTuple,
      PortalAddedEvent.OutputTuple,
      PortalAddedEvent.OutputObject
    >;

    "PortalConditionAdded(uint256,address)": TypedContractEvent<
      PortalConditionAddedEvent.InputTuple,
      PortalConditionAddedEvent.OutputTuple,
      PortalConditionAddedEvent.OutputObject
    >;
    PortalConditionAdded: TypedContractEvent<
      PortalConditionAddedEvent.InputTuple,
      PortalConditionAddedEvent.OutputTuple,
      PortalConditionAddedEvent.OutputObject
    >;

    "PortalConditionRemoved(uint256)": TypedContractEvent<
      PortalConditionRemovedEvent.InputTuple,
      PortalConditionRemovedEvent.OutputTuple,
      PortalConditionRemovedEvent.OutputObject
    >;
    PortalConditionRemoved: TypedContractEvent<
      PortalConditionRemovedEvent.InputTuple,
      PortalConditionRemovedEvent.OutputTuple,
      PortalConditionRemovedEvent.OutputObject
    >;

    "PortalDestinationUpgraded(uint256,address,address)": TypedContractEvent<
      PortalDestinationUpgradedEvent.InputTuple,
      PortalDestinationUpgradedEvent.OutputTuple,
      PortalDestinationUpgradedEvent.OutputObject
    >;
    PortalDestinationUpgraded: TypedContractEvent<
      PortalDestinationUpgradedEvent.InputTuple,
      PortalDestinationUpgradedEvent.OutputTuple,
      PortalDestinationUpgradedEvent.OutputObject
    >;

    "PortalFeeChanged(uint256,uint256)": TypedContractEvent<
      PortalFeeChangedEvent.InputTuple,
      PortalFeeChangedEvent.OutputTuple,
      PortalFeeChangedEvent.OutputObject
    >;
    PortalFeeChanged: TypedContractEvent<
      PortalFeeChangedEvent.InputTuple,
      PortalFeeChangedEvent.OutputTuple,
      PortalFeeChangedEvent.OutputObject
    >;

    "PortalRegistryUpgraded(address)": TypedContractEvent<
      PortalRegistryUpgradedEvent.InputTuple,
      PortalRegistryUpgradedEvent.OutputTuple,
      PortalRegistryUpgradedEvent.OutputObject
    >;
    PortalRegistryUpgraded: TypedContractEvent<
      PortalRegistryUpgradedEvent.InputTuple,
      PortalRegistryUpgradedEvent.OutputTuple,
      PortalRegistryUpgradedEvent.OutputObject
    >;
  };
}
