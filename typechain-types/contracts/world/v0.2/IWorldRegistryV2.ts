/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type WorldRegistrationRequestStruct = {
  sendTokensToWorldOwner: boolean;
  oldWorld: AddressLike;
  owner: AddressLike;
  baseVector: VectorAddressStruct;
  name: string;
  registrarId: BigNumberish;
  initData: BytesLike;
  vectorAuthoritySignature: BytesLike;
};

export type WorldRegistrationRequestStructOutput = [
  sendTokensToWorldOwner: boolean,
  oldWorld: string,
  owner: string,
  baseVector: VectorAddressStructOutput,
  name: string,
  registrarId: bigint,
  initData: string,
  vectorAuthoritySignature: string
] & {
  sendTokensToWorldOwner: boolean;
  oldWorld: string;
  owner: string;
  baseVector: VectorAddressStructOutput;
  name: string;
  registrarId: bigint;
  initData: string;
  vectorAuthoritySignature: string;
};

export interface IWorldRegistryV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVectorAddressAuthority"
      | "getWorldByName"
      | "isVectorAddressAuthority"
      | "isWorld"
      | "register"
      | "registrarUpgradeWorld"
      | "removeVectorAddressAuthority"
      | "setWorldFactory"
      | "worldUpgradeSelf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "VectorAddressAuthorityAdded"
      | "VectorAddressAuthorityRemoved"
      | "WorldRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVectorAddressAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVectorAddressAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWorld",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [WorldRegistrationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registrarUpgradeWorld",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVectorAddressAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "worldUpgradeSelf",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVectorAddressAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVectorAddressAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWorld", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrarUpgradeWorld",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVectorAddressAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldUpgradeSelf",
    data: BytesLike
  ): Result;
}

export namespace VectorAddressAuthorityAddedEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VectorAddressAuthorityRemovedEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorldRegisteredEvent {
  export type InputTuple = [
    world: AddressLike,
    owner: AddressLike,
    vectorAddress: VectorAddressStruct
  ];
  export type OutputTuple = [
    world: string,
    owner: string,
    vectorAddress: VectorAddressStructOutput
  ];
  export interface OutputObject {
    world: string;
    owner: string;
    vectorAddress: VectorAddressStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWorldRegistryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IWorldRegistryV2;
  waitForDeployment(): Promise<this>;

  interface: IWorldRegistryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVectorAddressAuthority: TypedContractMethod<
    [auth: AddressLike],
    [void],
    "nonpayable"
  >;

  getWorldByName: TypedContractMethod<[name: string], [string], "view">;

  isVectorAddressAuthority: TypedContractMethod<
    [auth: AddressLike],
    [boolean],
    "view"
  >;

  isWorld: TypedContractMethod<[world: AddressLike], [boolean], "view">;

  register: TypedContractMethod<
    [request: WorldRegistrationRequestStruct],
    [void],
    "payable"
  >;

  registrarUpgradeWorld: TypedContractMethod<
    [registrarId: BigNumberish, oldWorld: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  removeVectorAddressAuthority: TypedContractMethod<
    [auth: AddressLike],
    [void],
    "nonpayable"
  >;

  setWorldFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  worldUpgradeSelf: TypedContractMethod<
    [initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVectorAddressAuthority"
  ): TypedContractMethod<[auth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getWorldByName"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "isVectorAddressAuthority"
  ): TypedContractMethod<[auth: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWorld"
  ): TypedContractMethod<[world: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [request: WorldRegistrationRequestStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrarUpgradeWorld"
  ): TypedContractMethod<
    [registrarId: BigNumberish, oldWorld: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVectorAddressAuthority"
  ): TypedContractMethod<[auth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWorldFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "worldUpgradeSelf"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "VectorAddressAuthorityAdded"
  ): TypedContractEvent<
    VectorAddressAuthorityAddedEvent.InputTuple,
    VectorAddressAuthorityAddedEvent.OutputTuple,
    VectorAddressAuthorityAddedEvent.OutputObject
  >;
  getEvent(
    key: "VectorAddressAuthorityRemoved"
  ): TypedContractEvent<
    VectorAddressAuthorityRemovedEvent.InputTuple,
    VectorAddressAuthorityRemovedEvent.OutputTuple,
    VectorAddressAuthorityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WorldRegistered"
  ): TypedContractEvent<
    WorldRegisteredEvent.InputTuple,
    WorldRegisteredEvent.OutputTuple,
    WorldRegisteredEvent.OutputObject
  >;

  filters: {
    "VectorAddressAuthorityAdded(address)": TypedContractEvent<
      VectorAddressAuthorityAddedEvent.InputTuple,
      VectorAddressAuthorityAddedEvent.OutputTuple,
      VectorAddressAuthorityAddedEvent.OutputObject
    >;
    VectorAddressAuthorityAdded: TypedContractEvent<
      VectorAddressAuthorityAddedEvent.InputTuple,
      VectorAddressAuthorityAddedEvent.OutputTuple,
      VectorAddressAuthorityAddedEvent.OutputObject
    >;

    "VectorAddressAuthorityRemoved(address)": TypedContractEvent<
      VectorAddressAuthorityRemovedEvent.InputTuple,
      VectorAddressAuthorityRemovedEvent.OutputTuple,
      VectorAddressAuthorityRemovedEvent.OutputObject
    >;
    VectorAddressAuthorityRemoved: TypedContractEvent<
      VectorAddressAuthorityRemovedEvent.InputTuple,
      VectorAddressAuthorityRemovedEvent.OutputTuple,
      VectorAddressAuthorityRemovedEvent.OutputObject
    >;

    "WorldRegistered(address,address,tuple)": TypedContractEvent<
      WorldRegisteredEvent.InputTuple,
      WorldRegisteredEvent.OutputTuple,
      WorldRegisteredEvent.OutputObject
    >;
    WorldRegistered: TypedContractEvent<
      WorldRegisteredEvent.InputTuple,
      WorldRegisteredEvent.OutputTuple,
      WorldRegisteredEvent.OutputObject
    >;
  };
}
