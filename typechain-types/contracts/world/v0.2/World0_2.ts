/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type WorldConstructorArgsStruct = {
  worldFactory: AddressLike;
  worldRegistry: AddressLike;
  companyRegistry: AddressLike;
  avatarRegistry: AddressLike;
};

export type WorldConstructorArgsStructOutput = [
  worldFactory: string,
  worldRegistry: string,
  companyRegistry: string,
  avatarRegistry: string
] & {
  worldFactory: string;
  worldRegistry: string;
  companyRegistry: string;
  avatarRegistry: string;
};

export type VectorAddressStruct = {
  x: string;
  y: string;
  z: string;
  t: BigNumberish;
  p: BigNumberish;
  p_sub: BigNumberish;
};

export type VectorAddressStructOutput = [
  x: string,
  y: string,
  z: string,
  t: bigint,
  p: bigint,
  p_sub: bigint
] & { x: string; y: string; z: string; t: bigint; p: bigint; p_sub: bigint };

export type WorldCreateRequestStruct = {
  owner: AddressLike;
  oldWorld: AddressLike;
  baseVector: VectorAddressStruct;
  name: string;
  initData: BytesLike;
};

export type WorldCreateRequestStructOutput = [
  owner: string,
  oldWorld: string,
  baseVector: VectorAddressStructOutput,
  name: string,
  initData: string
] & {
  owner: string;
  oldWorld: string;
  baseVector: VectorAddressStructOutput;
  name: string;
  initData: string;
};

export type AvatarRegistrationRequestStruct = {
  sendTokensToAvatarOwner: boolean;
  avatarOwner: AddressLike;
  defaultExperience: AddressLike;
  username: string;
  initData: BytesLike;
};

export type AvatarRegistrationRequestStructOutput = [
  sendTokensToAvatarOwner: boolean,
  avatarOwner: string,
  defaultExperience: string,
  username: string,
  initData: string
] & {
  sendTokensToAvatarOwner: boolean;
  avatarOwner: string;
  defaultExperience: string;
  username: string;
  initData: string;
};

export type CompanyRegistrationArgsStruct = {
  sendTokensToCompanyOwner: boolean;
  owner: AddressLike;
  name: string;
  initData: BytesLike;
};

export type CompanyRegistrationArgsStructOutput = [
  sendTokensToCompanyOwner: boolean,
  owner: string,
  name: string,
  initData: string
] & {
  sendTokensToCompanyOwner: boolean;
  owner: string;
  name: string;
  initData: string;
};

export interface World0_2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSigners"
      | "avatarRegistry"
      | "companyRegistry"
      | "getBaseVector"
      | "getName"
      | "getOwner"
      | "init"
      | "isSigner"
      | "registerAvatar"
      | "registerCompany"
      | "removeHook"
      | "removeSigners"
      | "setHook"
      | "upgrade"
      | "upgradeComplete"
      | "version"
      | "withdraw"
      | "worldFactory"
      | "worldRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AvatarRegistered"
      | "CompanyRegistered"
      | "ReceivedFunds"
      | "SignerAdded"
      | "SignerRemoved"
      | "WorldHookRemoved"
      | "WorldHookSet"
      | "WorldUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSigners",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "avatarRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseVector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [WorldCreateRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvatar",
    values: [AvatarRegistrationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCompany",
    values: [CompanyRegistrationArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigners",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeComplete",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avatarRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldRegistry",
    data: BytesLike
  ): Result;
}

export namespace AvatarRegisteredEvent {
  export type InputTuple = [avatar: AddressLike, experience: AddressLike];
  export type OutputTuple = [avatar: string, experience: string];
  export interface OutputObject {
    avatar: string;
    experience: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompanyRegisteredEvent {
  export type InputTuple = [
    company: AddressLike,
    vector: VectorAddressStruct,
    name: string
  ];
  export type OutputTuple = [
    company: string,
    vector: VectorAddressStructOutput,
    name: string
  ];
  export interface OutputObject {
    company: string;
    vector: VectorAddressStructOutput;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedFundsEvent {
  export type InputTuple = [sender: AddressLike, value: BigNumberish];
  export type OutputTuple = [sender: string, value: bigint];
  export interface OutputObject {
    sender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRemovedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorldHookRemovedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorldHookSetEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorldUpgradedEvent {
  export type InputTuple = [oldWorld: AddressLike, newWorld: AddressLike];
  export type OutputTuple = [oldWorld: string, newWorld: string];
  export interface OutputObject {
    oldWorld: string;
    newWorld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface World0_2 extends BaseContract {
  connect(runner?: ContractRunner | null): World0_2;
  waitForDeployment(): Promise<this>;

  interface: World0_2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSigners: TypedContractMethod<
    [signers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  avatarRegistry: TypedContractMethod<[], [string], "view">;

  companyRegistry: TypedContractMethod<[], [string], "view">;

  getBaseVector: TypedContractMethod<[], [VectorAddressStructOutput], "view">;

  getName: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<
    [request: WorldCreateRequestStruct],
    [void],
    "nonpayable"
  >;

  isSigner: TypedContractMethod<[signer: AddressLike], [boolean], "view">;

  registerAvatar: TypedContractMethod<
    [args: AvatarRegistrationRequestStruct],
    [string],
    "payable"
  >;

  registerCompany: TypedContractMethod<
    [args: CompanyRegistrationArgsStruct],
    [string],
    "payable"
  >;

  removeHook: TypedContractMethod<[], [void], "nonpayable">;

  removeSigners: TypedContractMethod<
    [signers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  upgrade: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  upgradeComplete: TypedContractMethod<
    [nextVersion: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  worldFactory: TypedContractMethod<[], [string], "view">;

  worldRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSigners"
  ): TypedContractMethod<[signers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "avatarRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "companyRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseVector"
  ): TypedContractMethod<[], [VectorAddressStructOutput], "view">;
  getFunction(
    nameOrSignature: "getName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [request: WorldCreateRequestStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSigner"
  ): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAvatar"
  ): TypedContractMethod<
    [args: AvatarRegistrationRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerCompany"
  ): TypedContractMethod<
    [args: CompanyRegistrationArgsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSigners"
  ): TypedContractMethod<[signers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeComplete"
  ): TypedContractMethod<[nextVersion: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "worldFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worldRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AvatarRegistered"
  ): TypedContractEvent<
    AvatarRegisteredEvent.InputTuple,
    AvatarRegisteredEvent.OutputTuple,
    AvatarRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "CompanyRegistered"
  ): TypedContractEvent<
    CompanyRegisteredEvent.InputTuple,
    CompanyRegisteredEvent.OutputTuple,
    CompanyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedFunds"
  ): TypedContractEvent<
    ReceivedFundsEvent.InputTuple,
    ReceivedFundsEvent.OutputTuple,
    ReceivedFundsEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRemoved"
  ): TypedContractEvent<
    SignerRemovedEvent.InputTuple,
    SignerRemovedEvent.OutputTuple,
    SignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WorldHookRemoved"
  ): TypedContractEvent<
    WorldHookRemovedEvent.InputTuple,
    WorldHookRemovedEvent.OutputTuple,
    WorldHookRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WorldHookSet"
  ): TypedContractEvent<
    WorldHookSetEvent.InputTuple,
    WorldHookSetEvent.OutputTuple,
    WorldHookSetEvent.OutputObject
  >;
  getEvent(
    key: "WorldUpgraded"
  ): TypedContractEvent<
    WorldUpgradedEvent.InputTuple,
    WorldUpgradedEvent.OutputTuple,
    WorldUpgradedEvent.OutputObject
  >;

  filters: {
    "AvatarRegistered(address,address)": TypedContractEvent<
      AvatarRegisteredEvent.InputTuple,
      AvatarRegisteredEvent.OutputTuple,
      AvatarRegisteredEvent.OutputObject
    >;
    AvatarRegistered: TypedContractEvent<
      AvatarRegisteredEvent.InputTuple,
      AvatarRegisteredEvent.OutputTuple,
      AvatarRegisteredEvent.OutputObject
    >;

    "CompanyRegistered(address,tuple,string)": TypedContractEvent<
      CompanyRegisteredEvent.InputTuple,
      CompanyRegisteredEvent.OutputTuple,
      CompanyRegisteredEvent.OutputObject
    >;
    CompanyRegistered: TypedContractEvent<
      CompanyRegisteredEvent.InputTuple,
      CompanyRegisteredEvent.OutputTuple,
      CompanyRegisteredEvent.OutputObject
    >;

    "ReceivedFunds(address,uint256)": TypedContractEvent<
      ReceivedFundsEvent.InputTuple,
      ReceivedFundsEvent.OutputTuple,
      ReceivedFundsEvent.OutputObject
    >;
    ReceivedFunds: TypedContractEvent<
      ReceivedFundsEvent.InputTuple,
      ReceivedFundsEvent.OutputTuple,
      ReceivedFundsEvent.OutputObject
    >;

    "SignerAdded(address)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;

    "SignerRemoved(address)": TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;
    SignerRemoved: TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;

    "WorldHookRemoved()": TypedContractEvent<
      WorldHookRemovedEvent.InputTuple,
      WorldHookRemovedEvent.OutputTuple,
      WorldHookRemovedEvent.OutputObject
    >;
    WorldHookRemoved: TypedContractEvent<
      WorldHookRemovedEvent.InputTuple,
      WorldHookRemovedEvent.OutputTuple,
      WorldHookRemovedEvent.OutputObject
    >;

    "WorldHookSet(address)": TypedContractEvent<
      WorldHookSetEvent.InputTuple,
      WorldHookSetEvent.OutputTuple,
      WorldHookSetEvent.OutputObject
    >;
    WorldHookSet: TypedContractEvent<
      WorldHookSetEvent.InputTuple,
      WorldHookSetEvent.OutputTuple,
      WorldHookSetEvent.OutputObject
    >;

    "WorldUpgraded(address,address)": TypedContractEvent<
      WorldUpgradedEvent.InputTuple,
      WorldUpgradedEvent.OutputTuple,
      WorldUpgradedEvent.OutputObject
    >;
    WorldUpgraded: TypedContractEvent<
      WorldUpgradedEvent.InputTuple,
      WorldUpgradedEvent.OutputTuple,
      WorldUpgradedEvent.OutputObject
    >;
  };
}
