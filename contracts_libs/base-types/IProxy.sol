// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.24;

import {Version} from '../core-libs/LibTypes.sol';

/**
 * Entity proxy is used for upgradeable entity components that are generated by a cloning or registration process.
 * The proxy itself can never be upgraded; but its implementation is upgradeable through the factory used to 
 * generate the implementation. An entity proxy also has the option of always using the latest implementation
 * from the latest entity factory module.
 */
interface IProxy {

    event ProxyImplementationChanged(address indexed newImpl, Version version);

    /**
     * @dev Set the implementation of the proxy. This can only be called by the registry that 
     * creates or clones the proxy. This is an immutable address set on the proxy at creation.
     */
    function setImplementation(address _newImplementation) external;

    /**
     * @dev Get the version of the implementation.
     */
    function implementationVersion() external view returns (Version memory);
}